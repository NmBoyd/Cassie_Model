/*
 * Automatically Generated from Mathematica.
 * Fri 16 Mar 2018 12:16:30 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "J_VectorNav_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t87;
  double t233;
  double t401;
  double t516;
  double t586;
  double t710;
  double t860;
  double t1038;
  double t1550;
  double t1635;
  double t1736;
  double t1776;
  double t1219;
  double t1227;
  double t1391;
  double t2258;
  double t2396;
  double t2445;
  double t3319;
  double t3323;
  double t3488;
  double t4314;
  double t3048;
  double t3077;
  double t3128;
  double t5875;
  double t5882;
  double t5898;
  double t6015;
  double t6017;
  double t6018;
  double t6049;
  double t6005;
  double t6011;
  double t6012;
  double t6059;
  double t6061;
  double t6063;
  double t6099;
  double t6104;
  double t6105;
  double t6116;
  double t6080;
  double t6092;
  double t6095;
  double t6125;
  double t6127;
  double t6128;
  double t270;
  double t308;
  double t347;
  double t408;
  double t410;
  double t853;
  double t880;
  double t888;
  double t1120;
  double t1123;
  double t1146;
  double t1739;
  double t1924;
  double t2155;
  double t2529;
  double t2641;
  double t2729;
  double t6163;
  double t6166;
  double t6169;
  double t6171;
  double t6173;
  double t6174;
  double t3608;
  double t4858;
  double t5736;
  double t5919;
  double t5983;
  double t5990;
  double t6178;
  double t6179;
  double t6181;
  double t6185;
  double t6186;
  double t6187;
  double t6042;
  double t6051;
  double t6053;
  double t6064;
  double t6070;
  double t6073;
  double t6189;
  double t6190;
  double t6192;
  double t6194;
  double t6195;
  double t6196;
  double t6113;
  double t6120;
  double t6121;
  double t6129;
  double t6130;
  double t6131;
  double t6198;
  double t6199;
  double t6201;
  double t6204;
  double t6205;
  double t6206;
  double t6227;
  double t6228;
  double t6229;
  double t6231;
  double t6232;
  double t6233;
  double t6236;
  double t6237;
  double t6238;
  double t6240;
  double t6241;
  double t6244;
  double t6249;
  double t6250;
  double t6252;
  double t6256;
  double t6257;
  double t6258;
  double t6282;
  double t6286;
  double t6287;
  double t6290;
  double t6291;
  double t6294;
  double t6296;
  double t6298;
  double t6299;
  double t6303;
  double t6304;
  double t6305;
  double t6307;
  double t6308;
  double t6309;
  double t6311;
  double t6312;
  double t6313;
  double t6272;
  double t6273;
  double t6274;
  double t6346;
  double t6347;
  double t6348;
  double t6351;
  double t6353;
  double t6354;
  double t6357;
  double t6359;
  double t6360;
  double t6363;
  double t6366;
  double t6367;
  double t6370;
  double t6371;
  double t6374;
  double t6376;
  double t6378;
  double t6379;
  double t6400;
  double t6402;
  double t6405;
  double t6407;
  double t6409;
  double t6410;
  double t6414;
  double t6415;
  double t6417;
  double t6421;
  double t6422;
  double t6423;
  double t6429;
  double t6430;
  double t6431;
  double t6425;
  double t6426;
  double t6427;
  double t6392;
  double t6393;
  double t6394;
  double t6455;
  double t6456;
  double t6459;
  double t6461;
  double t6462;
  double t6464;
  double t6465;
  double t6466;
  double t6468;
  double t6469;
  double t6470;
  double t6473;
  double t6476;
  double t6479;
  double t6488;
  double t6489;
  double t6491;
  double t6481;
  double t6483;
  double t6484;
  double t6447;
  double t6448;
  double t6507;
  double t6508;
  double t6511;
  double t6517;
  double t6519;
  double t6520;
  double t6522;
  double t6524;
  double t6528;
  double t6529;
  double t6530;
  double t6532;
  double t6533;
  double t6534;
  double t6540;
  double t6543;
  double t6544;
  double t6536;
  double t6537;
  double t6538;
  double t6406;
  double t6413;
  double t6418;
  double t6424;
  double t6428;
  double t6433;
  double t6434;
  double t6435;
  double t6437;
  double t6438;
  double t6439;
  double t6440;
  double t6441;
  double t6444;
  double t6558;
  double t6559;
  double t6561;
  double t6562;
  double t6564;
  double t6575;
  double t6578;
  double t6580;
  double t6581;
  double t6583;
  double t6584;
  double t6585;
  double t6592;
  double t6594;
  double t6595;
  double t6587;
  double t6588;
  double t6590;
  double t6613;
  double t6614;
  double t6615;
  double t6619;
  double t6621;
  double t6623;
  double t6624;
  double t6626;
  double t6627;
  double t6628;
  double t6631;
  double t6634;
  double t6637;
  double t6645;
  double t6646;
  double t6647;
  double t6640;
  double t6641;
  double t6643;
  double t6664;
  double t6665;
  double t6666;
  double t6671;
  double t6672;
  double t6675;
  double t6676;
  double t6682;
  double t6683;
  double t6684;
  double t6678;
  double t6679;
  double t6680;
  double t6661;
  double t6662;
  double t6667;
  double t6668;
  double t6669;
  double t6698;
  double t6699;
  double t6704;
  double t6705;
  double t6706;
  double t6701;
  double t6702;
  double t6718;
  double t6719;
  double t6720;
  double t6722;
  double t6723;
  double t6725;
  double t6726;
  double t6732;
  double t6733;
  double t6734;
  double t6728;
  double t6729;
  double t6730;
  double t6748;
  double t6749;
  double t6750;
  double t6758;
  double t6759;
  double t6755;
  double t6756;
  double t6745;
  double t6746;
  double t6751;
  double t6752;
  double t6753;
  double t6773;
  double t6774;
  double t6214;
  double t6785;
  double t6786;
  double t6787;
  double t6792;
  double t6793;
  double t6789;
  double t6790;
  double t6807;
  double t6808;
  double t6809;
  double t6762;
  double t6765;
  double t6804;
  double t6805;
  double t6810;
  double t6811;
  double t6812;
  double t6777;
  double t6215;
  double t6216;
  double t6829;
  double t6830;
  double t6831;
  double t6796;
  double t6799;
  t87 = Sin(var1[7]);
  t233 = Cos(var1[8]);
  t401 = Sin(var1[8]);
  t516 = Cos(var1[9]);
  t586 = -1.*t516;
  t710 = 1. + t586;
  t860 = Sin(var1[9]);
  t1038 = Cos(var1[7]);
  t1550 = Cos(var1[10]);
  t1635 = -1.*t1550;
  t1736 = 1. + t1635;
  t1776 = Sin(var1[10]);
  t1219 = -1.*t516*t87*t401;
  t1227 = -1.*t1038*t860;
  t1391 = t1219 + t1227;
  t2258 = -1.*t1038*t516;
  t2396 = t87*t401*t860;
  t2445 = t2258 + t2396;
  t3319 = Cos(var1[11]);
  t3323 = -1.*t3319;
  t3488 = 1. + t3323;
  t4314 = Sin(var1[11]);
  t3048 = t1550*t1391;
  t3077 = t2445*t1776;
  t3128 = t3048 + t3077;
  t5875 = t1550*t2445;
  t5882 = -1.*t1391*t1776;
  t5898 = t5875 + t5882;
  t6015 = Cos(var1[12]);
  t6017 = -1.*t6015;
  t6018 = 1. + t6017;
  t6049 = Sin(var1[12]);
  t6005 = t3319*t3128;
  t6011 = t5898*t4314;
  t6012 = t6005 + t6011;
  t6059 = t3319*t5898;
  t6061 = -1.*t3128*t4314;
  t6063 = t6059 + t6061;
  t6099 = Cos(var1[13]);
  t6104 = -1.*t6099;
  t6105 = 1. + t6104;
  t6116 = Sin(var1[13]);
  t6080 = t6015*t6012;
  t6092 = t6063*t6049;
  t6095 = t6080 + t6092;
  t6125 = t6015*t6063;
  t6127 = -1.*t6012*t6049;
  t6128 = t6125 + t6127;
  t270 = -1.*t233;
  t308 = 1. + t270;
  t347 = -0.135*t308;
  t408 = 0.049*t401;
  t410 = 0. + t347 + t408;
  t853 = -0.049*t710;
  t880 = -0.09*t860;
  t888 = 0. + t853 + t880;
  t1120 = -0.09*t710;
  t1123 = 0.049*t860;
  t1146 = 0. + t1120 + t1123;
  t1739 = -0.049*t1736;
  t1924 = -0.21*t1776;
  t2155 = 0. + t1739 + t1924;
  t2529 = -0.21*t1736;
  t2641 = 0.049*t1776;
  t2729 = 0. + t2529 + t2641;
  t6163 = t1038*t516*t401;
  t6166 = -1.*t87*t860;
  t6169 = t6163 + t6166;
  t6171 = -1.*t516*t87;
  t6173 = -1.*t1038*t401*t860;
  t6174 = t6171 + t6173;
  t3608 = -0.0016*t3488;
  t4858 = -0.2707*t4314;
  t5736 = 0. + t3608 + t4858;
  t5919 = -0.2707*t3488;
  t5983 = 0.0016*t4314;
  t5990 = 0. + t5919 + t5983;
  t6178 = t1550*t6169;
  t6179 = t6174*t1776;
  t6181 = t6178 + t6179;
  t6185 = t1550*t6174;
  t6186 = -1.*t6169*t1776;
  t6187 = t6185 + t6186;
  t6042 = 0.0184*t6018;
  t6051 = -0.7055*t6049;
  t6053 = 0. + t6042 + t6051;
  t6064 = -0.7055*t6018;
  t6070 = -0.0184*t6049;
  t6073 = 0. + t6064 + t6070;
  t6189 = t3319*t6181;
  t6190 = t6187*t4314;
  t6192 = t6189 + t6190;
  t6194 = t3319*t6187;
  t6195 = -1.*t6181*t4314;
  t6196 = t6194 + t6195;
  t6113 = -0.0216*t6105;
  t6120 = -1.1135*t6116;
  t6121 = 0. + t6113 + t6120;
  t6129 = -1.1135*t6105;
  t6130 = 0.0216*t6116;
  t6131 = 0. + t6129 + t6130;
  t6198 = t6015*t6192;
  t6199 = t6196*t6049;
  t6201 = t6198 + t6199;
  t6204 = t6015*t6196;
  t6205 = -1.*t6192*t6049;
  t6206 = t6204 + t6205;
  t6227 = -1.*t516*t1550*t401;
  t6228 = t401*t860*t1776;
  t6229 = t6227 + t6228;
  t6231 = t1550*t401*t860;
  t6232 = t516*t401*t1776;
  t6233 = t6231 + t6232;
  t6236 = t3319*t6229;
  t6237 = t6233*t4314;
  t6238 = t6236 + t6237;
  t6240 = t3319*t6233;
  t6241 = -1.*t6229*t4314;
  t6244 = t6240 + t6241;
  t6249 = t6015*t6238;
  t6250 = t6244*t6049;
  t6252 = t6249 + t6250;
  t6256 = t6015*t6244;
  t6257 = -1.*t6238*t6049;
  t6258 = t6256 + t6257;
  t6282 = t1038*t233*t516*t1550;
  t6286 = -1.*t1038*t233*t860*t1776;
  t6287 = t6282 + t6286;
  t6290 = -1.*t1038*t233*t1550*t860;
  t6291 = -1.*t1038*t233*t516*t1776;
  t6294 = t6290 + t6291;
  t6296 = t3319*t6287;
  t6298 = t6294*t4314;
  t6299 = t6296 + t6298;
  t6303 = t3319*t6294;
  t6304 = -1.*t6287*t4314;
  t6305 = t6303 + t6304;
  t6307 = t6015*t6299;
  t6308 = t6305*t6049;
  t6309 = t6307 + t6308;
  t6311 = t6015*t6305;
  t6312 = -1.*t6299*t6049;
  t6313 = t6311 + t6312;
  t6272 = 0.049*t233;
  t6273 = -0.135*t401;
  t6274 = t6272 + t6273;
  t6346 = t233*t516*t1550*t87;
  t6347 = -1.*t233*t87*t860*t1776;
  t6348 = t6346 + t6347;
  t6351 = -1.*t233*t1550*t87*t860;
  t6353 = -1.*t233*t516*t87*t1776;
  t6354 = t6351 + t6353;
  t6357 = t3319*t6348;
  t6359 = t6354*t4314;
  t6360 = t6357 + t6359;
  t6363 = t3319*t6354;
  t6366 = -1.*t6348*t4314;
  t6367 = t6363 + t6366;
  t6370 = t6015*t6360;
  t6371 = t6367*t6049;
  t6374 = t6370 + t6371;
  t6376 = t6015*t6367;
  t6378 = -1.*t6360*t6049;
  t6379 = t6376 + t6378;
  t6400 = -1.*t233*t1550*t860;
  t6402 = -1.*t233*t516*t1776;
  t6405 = t6400 + t6402;
  t6407 = -1.*t233*t516*t1550;
  t6409 = t233*t860*t1776;
  t6410 = t6407 + t6409;
  t6414 = t3319*t6405;
  t6415 = t6410*t4314;
  t6417 = t6414 + t6415;
  t6421 = t3319*t6410;
  t6422 = -1.*t6405*t4314;
  t6423 = t6421 + t6422;
  t6429 = t6015*t6423;
  t6430 = -1.*t6417*t6049;
  t6431 = t6429 + t6430;
  t6425 = t6015*t6417;
  t6426 = t6423*t6049;
  t6427 = t6425 + t6426;
  t6392 = -0.09*t516;
  t6393 = -0.049*t860;
  t6394 = t6392 + t6393;
  t6455 = -1.*t1038*t516*t401;
  t6456 = t87*t860;
  t6459 = t6455 + t6456;
  t6461 = t6459*t1776;
  t6462 = t6185 + t6461;
  t6464 = t1550*t6459;
  t6465 = -1.*t6174*t1776;
  t6466 = t6464 + t6465;
  t6468 = t3319*t6462;
  t6469 = t6466*t4314;
  t6470 = t6468 + t6469;
  t6473 = t3319*t6466;
  t6476 = -1.*t6462*t4314;
  t6479 = t6473 + t6476;
  t6488 = t6015*t6479;
  t6489 = -1.*t6470*t6049;
  t6491 = t6488 + t6489;
  t6481 = t6015*t6470;
  t6483 = t6479*t6049;
  t6484 = t6481 + t6483;
  t6447 = 0.049*t516;
  t6448 = t6447 + t880;
  t6507 = t1038*t516;
  t6508 = -1.*t87*t401*t860;
  t6511 = t6507 + t6508;
  t6517 = t1550*t6511;
  t6519 = t1391*t1776;
  t6520 = t6517 + t6519;
  t6522 = -1.*t6511*t1776;
  t6524 = t3048 + t6522;
  t6528 = t3319*t6520;
  t6529 = t6524*t4314;
  t6530 = t6528 + t6529;
  t6532 = t3319*t6524;
  t6533 = -1.*t6520*t4314;
  t6534 = t6532 + t6533;
  t6540 = t6015*t6534;
  t6543 = -1.*t6530*t6049;
  t6544 = t6540 + t6543;
  t6536 = t6015*t6530;
  t6537 = t6534*t6049;
  t6538 = t6536 + t6537;
  t6406 = t6405*t5736;
  t6413 = t6410*t5990;
  t6418 = t6417*t6053;
  t6424 = t6423*t6073;
  t6428 = t6427*t6121;
  t6433 = t6431*t6131;
  t6434 = t6099*t6431;
  t6435 = -1.*t6427*t6116;
  t6437 = t6434 + t6435;
  t6438 = -1.1312*t6437;
  t6439 = t6099*t6427;
  t6440 = t6431*t6116;
  t6441 = t6439 + t6440;
  t6444 = 0.0306*t6441;
  t6558 = 0.049*t1550;
  t6559 = t6558 + t1924;
  t6561 = -0.21*t1550;
  t6562 = -0.049*t1776;
  t6564 = t6561 + t6562;
  t6575 = -1.*t1550*t6169;
  t6578 = t6575 + t6465;
  t6580 = t6578*t4314;
  t6581 = t6194 + t6580;
  t6583 = t3319*t6578;
  t6584 = -1.*t6187*t4314;
  t6585 = t6583 + t6584;
  t6592 = t6015*t6585;
  t6594 = -1.*t6581*t6049;
  t6595 = t6592 + t6594;
  t6587 = t6015*t6581;
  t6588 = t6585*t6049;
  t6590 = t6587 + t6588;
  t6613 = t516*t87*t401;
  t6614 = t1038*t860;
  t6615 = t6613 + t6614;
  t6619 = -1.*t6615*t1776;
  t6621 = t6517 + t6619;
  t6623 = -1.*t1550*t6615;
  t6624 = t6623 + t6522;
  t6626 = t3319*t6621;
  t6627 = t6624*t4314;
  t6628 = t6626 + t6627;
  t6631 = t3319*t6624;
  t6634 = -1.*t6621*t4314;
  t6637 = t6631 + t6634;
  t6645 = t6015*t6637;
  t6646 = -1.*t6628*t6049;
  t6647 = t6645 + t6646;
  t6640 = t6015*t6628;
  t6641 = t6637*t6049;
  t6643 = t6640 + t6641;
  t6664 = t233*t516*t1550;
  t6665 = -1.*t233*t860*t1776;
  t6666 = t6664 + t6665;
  t6671 = -1.*t6666*t4314;
  t6672 = t6414 + t6671;
  t6675 = -1.*t3319*t6666;
  t6676 = t6675 + t6422;
  t6682 = t6015*t6676;
  t6683 = -1.*t6672*t6049;
  t6684 = t6682 + t6683;
  t6678 = t6015*t6672;
  t6679 = t6676*t6049;
  t6680 = t6678 + t6679;
  t6661 = 0.0016*t3319;
  t6662 = t6661 + t4858;
  t6667 = -0.2707*t3319;
  t6668 = -0.0016*t4314;
  t6669 = t6667 + t6668;
  t6698 = -1.*t3319*t6181;
  t6699 = t6698 + t6584;
  t6704 = t6015*t6699;
  t6705 = -1.*t6196*t6049;
  t6706 = t6704 + t6705;
  t6701 = t6699*t6049;
  t6702 = t6204 + t6701;
  t6718 = t1550*t6615;
  t6719 = t6511*t1776;
  t6720 = t6718 + t6719;
  t6722 = -1.*t6720*t4314;
  t6723 = t6626 + t6722;
  t6725 = -1.*t3319*t6720;
  t6726 = t6725 + t6634;
  t6732 = t6015*t6726;
  t6733 = -1.*t6723*t6049;
  t6734 = t6732 + t6733;
  t6728 = t6015*t6723;
  t6729 = t6726*t6049;
  t6730 = t6728 + t6729;
  t6748 = t3319*t6666;
  t6749 = t6405*t4314;
  t6750 = t6748 + t6749;
  t6758 = -1.*t6015*t6750;
  t6759 = t6758 + t6683;
  t6755 = -1.*t6750*t6049;
  t6756 = t6678 + t6755;
  t6745 = -0.0184*t6015;
  t6746 = t6745 + t6051;
  t6751 = -0.7055*t6015;
  t6752 = 0.0184*t6049;
  t6753 = t6751 + t6752;
  t6773 = -1.*t6015*t6192;
  t6774 = t6773 + t6705;
  t6214 = t6099*t6206;
  t6785 = t3319*t6720;
  t6786 = t6621*t4314;
  t6787 = t6785 + t6786;
  t6792 = -1.*t6015*t6787;
  t6793 = t6792 + t6733;
  t6789 = -1.*t6787*t6049;
  t6790 = t6728 + t6789;
  t6807 = t6015*t6750;
  t6808 = t6672*t6049;
  t6809 = t6807 + t6808;
  t6762 = -1.*t6756*t6116;
  t6765 = t6099*t6756;
  t6804 = 0.0216*t6099;
  t6805 = t6804 + t6120;
  t6810 = -1.1135*t6099;
  t6811 = -0.0216*t6116;
  t6812 = t6810 + t6811;
  t6777 = -1.*t6206*t6116;
  t6215 = -1.*t6201*t6116;
  t6216 = t6214 + t6215;
  t6829 = t6015*t6787;
  t6830 = t6723*t6049;
  t6831 = t6829 + t6830;
  t6796 = -1.*t6790*t6116;
  t6799 = t6099*t6790;

  p_output1(0)=0;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=0;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=0;
  p_output1(9)=0;
  p_output1(10)=0;
  p_output1(11)=0;
  p_output1(12)=0;
  p_output1(13)=0;
  p_output1(14)=0;
  p_output1(15)=0;
  p_output1(16)=0;
  p_output1(17)=0;
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=t1038*t1146 - 1.*t1391*t2155 - 1.*t2445*t2729 - 1.*t3128*t5736 - 1.*t5898*t5990 - 1.*t6012*t6053 - 1.*t6063*t6073 - 1.*t6095*t6121 + 1.1312*(-1.*t6095*t6116 + t6099*t6128) - 0.0306*(t6095*t6099 + t6116*t6128) - 1.*t6128*t6131 + 0.135*t87 - 0.1305*t233*t87 + t410*t87 + t401*t87*t888;
  p_output1(23)=-0.135*t1038 + 0.1305*t1038*t233 - 1.*t1038*t410 - 1.*t2155*t6169 - 1.*t2729*t6174 - 1.*t5736*t6181 - 1.*t5990*t6187 - 1.*t6053*t6192 - 1.*t6073*t6196 - 1.*t6121*t6201 - 1.*t6131*t6206 - 0.0306*(t6099*t6201 + t6116*t6206) + 1.1312*t6216 + t1146*t87 - 1.*t1038*t401*t888;
  p_output1(24)=-0.004500000000000004*t233 - 0.049*t401 - 1.*t2155*t401*t516 + t5736*t6229 + t5990*t6233 + t6053*t6238 + t6073*t6244 + t6121*t6252 + t6131*t6258 - 1.1312*(-1.*t6116*t6252 + t6099*t6258) + 0.0306*(t6099*t6252 + t6116*t6258) + t2729*t401*t860 - 1.*t401*t888;
  p_output1(25)=-0.1305*t1038*t401 - 1.*t1038*t2155*t233*t516 - 1.*t1038*t6274 - 1.*t5736*t6287 - 1.*t5990*t6294 - 1.*t6053*t6299 - 1.*t6073*t6305 - 1.*t6121*t6309 - 1.*t6131*t6313 + 1.1312*(-1.*t6116*t6309 + t6099*t6313) - 0.0306*(t6099*t6309 + t6116*t6313) + t1038*t233*t2729*t860 - 1.*t1038*t233*t888;
  p_output1(26)=-1.*t5736*t6348 - 1.*t5990*t6354 - 1.*t6053*t6360 - 1.*t6073*t6367 - 1.*t6121*t6374 - 1.*t6131*t6379 + 1.1312*(-1.*t6116*t6374 + t6099*t6379) - 0.0306*(t6099*t6374 + t6116*t6379) - 0.1305*t401*t87 - 1.*t2155*t233*t516*t87 - 1.*t6274*t87 + t233*t2729*t860*t87 - 1.*t233*t87*t888;
  p_output1(27)=-1.*t233*t2729*t516 + t233*t6394 + t6406 + t6413 + t6418 + t6424 + t6428 + t6433 + t6438 + t6444 - 1.*t2155*t233*t860;
  p_output1(28)=-1.*t2155*t6174 - 1.*t1038*t401*t6394 - 1.*t2729*t6459 - 1.*t5736*t6462 - 1.*t5990*t6466 - 1.*t6053*t6470 - 1.*t6073*t6479 - 1.*t6121*t6484 - 1.*t6131*t6491 + 1.1312*(-1.*t6116*t6484 + t6099*t6491) - 0.0306*(t6099*t6484 + t6116*t6491) + t6448*t87;
  p_output1(29)=-1.*t1391*t2729 - 1.*t1038*t6448 - 1.*t2155*t6511 - 1.*t5736*t6520 - 1.*t5990*t6524 - 1.*t6053*t6530 - 1.*t6073*t6534 - 1.*t6121*t6538 - 1.*t6131*t6544 + 1.1312*(-1.*t6116*t6538 + t6099*t6544) - 0.0306*(t6099*t6538 + t6116*t6544) - 1.*t401*t6394*t87;
  p_output1(30)=t6406 + t6413 + t6418 + t6424 + t6428 + t6433 + t6438 + t6444 + t233*t516*t6564 - 1.*t233*t6559*t860;
  p_output1(31)=-1.*t5736*t6187 - 1.*t6174*t6559 - 1.*t6169*t6564 - 1.*t5990*t6578 - 1.*t6053*t6581 - 1.*t6073*t6585 - 1.*t6121*t6590 - 1.*t6131*t6595 + 1.1312*(-1.*t6116*t6590 + t6099*t6595) - 0.0306*(t6099*t6590 + t6116*t6595);
  p_output1(32)=-1.*t6511*t6559 - 1.*t6564*t6615 - 1.*t5736*t6621 - 1.*t5990*t6624 - 1.*t6053*t6628 - 1.*t6073*t6637 - 1.*t6121*t6643 - 1.*t6131*t6647 + 1.1312*(-1.*t6116*t6643 + t6099*t6647) - 0.0306*(t6099*t6643 + t6116*t6647);
  p_output1(33)=t6405*t6662 + t6666*t6669 + t6053*t6672 + t6073*t6676 + t6121*t6680 + t6131*t6684 - 1.1312*(-1.*t6116*t6680 + t6099*t6684) + 0.0306*(t6099*t6680 + t6116*t6684);
  p_output1(34)=-1.*t6053*t6196 - 1.*t6187*t6662 - 1.*t6181*t6669 - 1.*t6073*t6699 - 1.*t6121*t6702 - 1.*t6131*t6706 + 1.1312*(-1.*t6116*t6702 + t6099*t6706) - 0.0306*(t6099*t6702 + t6116*t6706);
  p_output1(35)=-1.*t6621*t6662 - 1.*t6669*t6720 - 1.*t6053*t6723 - 1.*t6073*t6726 - 1.*t6121*t6730 - 1.*t6131*t6734 + 1.1312*(-1.*t6116*t6730 + t6099*t6734) - 0.0306*(t6099*t6730 + t6116*t6734);
  p_output1(36)=t6672*t6746 + t6750*t6753 + t6121*t6756 + t6131*t6759 - 1.1312*(t6099*t6759 + t6762) + 0.0306*(t6116*t6759 + t6765);
  p_output1(37)=-1.*t6121*t6206 - 1.*t6196*t6746 - 1.*t6192*t6753 - 1.*t6131*t6774 - 0.0306*(t6214 + t6116*t6774) + 1.1312*(t6099*t6774 + t6777);
  p_output1(38)=-1.*t6723*t6746 - 1.*t6753*t6787 - 1.*t6121*t6790 - 1.*t6131*t6793 + 1.1312*(t6099*t6793 + t6796) - 0.0306*(t6116*t6793 + t6799);
  p_output1(39)=t6756*t6805 - 1.1312*(t6762 - 1.*t6099*t6809) + 0.0306*(t6765 - 1.*t6116*t6809) + t6809*t6812;
  p_output1(40)=-0.0306*t6216 + 1.1312*(-1.*t6099*t6201 + t6777) - 1.*t6206*t6805 - 1.*t6201*t6812;
  p_output1(41)=-1.*t6790*t6805 - 1.*t6812*t6831 + 1.1312*(t6796 - 1.*t6099*t6831) - 0.0306*(t6799 - 1.*t6116*t6831);
}


       
void J_VectorNav_to_RightToeBottom(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
