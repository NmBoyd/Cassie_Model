/*
 * Automatically Generated from Mathematica.
 * Fri 16 Mar 2018 12:16:45 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_RightToeBottom_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t373;
  double t257;
  double t300;
  double t359;
  double t448;
  double t235;
  double t898;
  double t933;
  double t982;
  double t364;
  double t489;
  double t602;
  double t1014;
  double t176;
  double t1214;
  double t1239;
  double t1306;
  double t607;
  double t1024;
  double t1041;
  double t1424;
  double t148;
  double t1574;
  double t1581;
  double t1605;
  double t1126;
  double t1438;
  double t1452;
  double t1618;
  double t98;
  double t1759;
  double t1809;
  double t1820;
  double t1540;
  double t1630;
  double t1690;
  double t1885;
  double t2213;
  double t2340;
  double t2347;
  double t2438;
  double t2244;
  double t2261;
  double t2303;
  double t2654;
  double t2690;
  double t2698;
  double t2336;
  double t2480;
  double t2535;
  double t2866;
  double t2938;
  double t2993;
  double t2639;
  double t2716;
  double t2720;
  double t3500;
  double t3514;
  double t3538;
  double t3423;
  double t3468;
  double t3472;
  double t3718;
  double t3749;
  double t3766;
  double t3493;
  double t3560;
  double t3605;
  double t4051;
  double t4100;
  double t4111;
  double t3607;
  double t3935;
  double t3936;
  double t4261;
  double t4265;
  double t4294;
  double t3983;
  double t4194;
  double t4219;
  double t1715;
  double t1893;
  double t2036;
  double t2115;
  double t2147;
  double t2150;
  double t2770;
  double t2996;
  double t3066;
  double t3160;
  double t3201;
  double t3230;
  double t4260;
  double t4297;
  double t4319;
  double t4344;
  double t4430;
  double t4527;
  double t4829;
  double t4920;
  double t4956;
  double t4339;
  double t4623;
  double t4629;
  double t3127;
  double t3254;
  double t3335;
  double t5117;
  double t5124;
  double t5140;
  double t2073;
  double t2170;
  double t2202;
  double t7465;
  double t7489;
  double t7667;
  double t7671;
  double t7743;
  double t7744;
  double t7785;
  double t7788;
  double t7820;
  double t7826;
  double t7386;
  double t7423;
  double t7541;
  double t7543;
  double t7554;
  double t7680;
  double t7698;
  double t7701;
  double t7704;
  double t7709;
  double t7729;
  double t7746;
  double t7747;
  double t7757;
  double t7771;
  double t7772;
  double t7782;
  double t7793;
  double t7805;
  double t7806;
  double t7808;
  double t7809;
  double t7810;
  double t7827;
  double t7828;
  double t7829;
  double t7832;
  double t7833;
  double t7834;
  double t4775;
  double t4815;
  double t4825;
  double t5946;
  double t6100;
  double t7303;
  double t7330;
  double t7425;
  double t7446;
  double t7450;
  double t7457;
  double t7610;
  double t7638;
  double t7648;
  double t7653;
  double t7657;
  double t7702;
  double t7735;
  double t7767;
  double t7783;
  double t7807;
  double t7815;
  double t7831;
  double t7838;
  double t7839;
  double t7840;
  double t7841;
  double t7843;
  double t7849;
  double t7854;
  double t7856;
  double t7857;
  double t7859;
  double t7860;
  double t7862;
  double t7865;
  double t7867;
  double t7868;
  double t7873;
  double t7877;
  double t7882;
  double t5305;
  double t5431;
  double t5618;
  double t3381;
  double t4701;
  double t4728;
  double t4747;
  double t4976;
  double t5217;
  double t5260;
  double t5269;
  double t5712;
  double t5822;
  double t5862;
  double t7939;
  double t7950;
  double t7953;
  double t7954;
  double t7957;
  double t7959;
  double t7976;
  double t7989;
  double t7991;
  double t7992;
  double t7995;
  double t7998;
  double t7999;
  double t8000;
  double t8006;
  double t8007;
  double t8008;
  double t8011;
  double t8012;
  double t8013;
  double t8015;
  double t8021;
  double t8022;
  double t8023;
  double t8029;
  double t8032;
  double t8035;
  double t8039;
  double t8041;
  double t8042;
  double t8044;
  double t8048;
  double t8049;
  double t8051;
  double t8058;
  double t8059;
  double t8060;
  double t8077;
  double t7942;
  double t7943;
  double t7965;
  double t7972;
  double t7973;
  double t7975;
  double t7978;
  double t7979;
  double t7958;
  double t7960;
  double t7961;
  double t8090;
  double t7981;
  double t7982;
  double t7984;
  double t7994;
  double t7996;
  double t7997;
  double t8096;
  double t8097;
  double t8099;
  double t8102;
  double t8103;
  double t8105;
  double t8003;
  double t8004;
  double t8005;
  double t8014;
  double t8016;
  double t8020;
  double t8107;
  double t8108;
  double t8109;
  double t8112;
  double t8113;
  double t8114;
  double t8025;
  double t8026;
  double t8028;
  double t8043;
  double t8045;
  double t8047;
  double t8116;
  double t8118;
  double t8119;
  double t8121;
  double t8122;
  double t8123;
  double t8054;
  double t8055;
  double t8057;
  double t8126;
  double t8127;
  double t8128;
  double t8130;
  double t8131;
  double t8132;
  double t8083;
  double t8084;
  double t8086;
  double t8091;
  double t8092;
  double t8093;
  double t8150;
  double t8151;
  double t8152;
  double t8154;
  double t8155;
  double t8156;
  double t8158;
  double t8159;
  double t8160;
  double t8162;
  double t8163;
  double t8164;
  double t8166;
  double t8167;
  double t8168;
  double t8170;
  double t8171;
  double t8172;
  double t8174;
  double t8175;
  double t8176;
  double t8178;
  double t8179;
  double t8180;
  double t7897;
  double t7898;
  double t7899;
  double t7900;
  double t7901;
  double t7902;
  double t7903;
  double t7904;
  double t7908;
  double t7909;
  double t7910;
  double t7911;
  double t7912;
  double t7913;
  double t7919;
  double t7924;
  double t7842;
  double t7884;
  double t7887;
  double t7944;
  double t7962;
  double t7970;
  double t7980;
  double t7985;
  double t8001;
  double t8010;
  double t8024;
  double t8038;
  double t8052;
  double t8061;
  double t8063;
  double t8064;
  double t8065;
  double t8066;
  double t8067;
  double t8068;
  double t8070;
  double t8071;
  double t8072;
  double t8078;
  double t8079;
  double t8080;
  double t8081;
  double t8087;
  double t8089;
  double t8095;
  double t8100;
  double t8106;
  double t8111;
  double t8115;
  double t8120;
  double t8124;
  double t8129;
  double t8133;
  double t8134;
  double t8135;
  double t8136;
  double t8137;
  double t8138;
  double t8139;
  double t8140;
  double t8141;
  double t8142;
  double t8145;
  double t8146;
  double t8147;
  double t8148;
  double t8149;
  double t8153;
  double t8157;
  double t8161;
  double t8165;
  double t8169;
  double t8173;
  double t8177;
  double t8181;
  double t8182;
  double t8183;
  double t8184;
  double t8185;
  double t8186;
  double t8187;
  double t8188;
  double t8189;
  double t8190;
  double t8193;
  double t8194;
  double t8195;
  double t7889;
  double t7890;
  double t7891;
  t373 = Cos(var1[7]);
  t257 = Cos(var1[9]);
  t300 = Sin(var1[7]);
  t359 = Sin(var1[8]);
  t448 = Sin(var1[9]);
  t235 = Cos(var1[10]);
  t898 = t373*t257;
  t933 = -1.*t300*t359*t448;
  t982 = t898 + t933;
  t364 = t257*t300*t359;
  t489 = t373*t448;
  t602 = t364 + t489;
  t1014 = Sin(var1[10]);
  t176 = Cos(var1[11]);
  t1214 = t235*t982;
  t1239 = -1.*t602*t1014;
  t1306 = t1214 + t1239;
  t607 = t235*t602;
  t1024 = t982*t1014;
  t1041 = t607 + t1024;
  t1424 = Sin(var1[11]);
  t148 = Cos(var1[12]);
  t1574 = t176*t1306;
  t1581 = -1.*t1041*t1424;
  t1605 = t1574 + t1581;
  t1126 = t176*t1041;
  t1438 = t1306*t1424;
  t1452 = t1126 + t1438;
  t1618 = Sin(var1[12]);
  t98 = Cos(var1[13]);
  t1759 = t148*t1605;
  t1809 = -1.*t1452*t1618;
  t1820 = t1759 + t1809;
  t1540 = t148*t1452;
  t1630 = t1605*t1618;
  t1690 = t1540 + t1630;
  t1885 = Sin(var1[13]);
  t2213 = Cos(var1[8]);
  t2340 = -1.*t2213*t235*t448;
  t2347 = -1.*t2213*t257*t1014;
  t2438 = t2340 + t2347;
  t2244 = t2213*t257*t235;
  t2261 = -1.*t2213*t448*t1014;
  t2303 = t2244 + t2261;
  t2654 = t176*t2438;
  t2690 = -1.*t2303*t1424;
  t2698 = t2654 + t2690;
  t2336 = t176*t2303;
  t2480 = t2438*t1424;
  t2535 = t2336 + t2480;
  t2866 = t148*t2698;
  t2938 = -1.*t2535*t1618;
  t2993 = t2866 + t2938;
  t2639 = t148*t2535;
  t2716 = t2698*t1618;
  t2720 = t2639 + t2716;
  t3500 = -1.*t257*t300;
  t3514 = -1.*t373*t359*t448;
  t3538 = t3500 + t3514;
  t3423 = t373*t257*t359;
  t3468 = -1.*t300*t448;
  t3472 = t3423 + t3468;
  t3718 = t235*t3538;
  t3749 = -1.*t3472*t1014;
  t3766 = t3718 + t3749;
  t3493 = t235*t3472;
  t3560 = t3538*t1014;
  t3605 = t3493 + t3560;
  t4051 = t176*t3766;
  t4100 = -1.*t3605*t1424;
  t4111 = t4051 + t4100;
  t3607 = t176*t3605;
  t3935 = t3766*t1424;
  t3936 = t3607 + t3935;
  t4261 = t148*t4111;
  t4265 = -1.*t3936*t1618;
  t4294 = t4261 + t4265;
  t3983 = t148*t3936;
  t4194 = t4111*t1618;
  t4219 = t3983 + t4194;
  t1715 = t98*t1690;
  t1893 = t1820*t1885;
  t2036 = t1715 + t1893;
  t2115 = t98*t1820;
  t2147 = -1.*t1690*t1885;
  t2150 = t2115 + t2147;
  t2770 = t98*t2720;
  t2996 = t2993*t1885;
  t3066 = t2770 + t2996;
  t3160 = t98*t2993;
  t3201 = -1.*t2720*t1885;
  t3230 = t3160 + t3201;
  t4260 = t98*t4219;
  t4297 = t4294*t1885;
  t4319 = t4260 + t4297;
  t4344 = t98*t4294;
  t4430 = -1.*t4219*t1885;
  t4527 = t4344 + t4430;
  t4829 = 0.642788*t3066;
  t4920 = 0.766044*t3230;
  t4956 = t4829 + t4920;
  t4339 = -0.766044*t4319;
  t4623 = 0.642788*t4527;
  t4629 = t4339 + t4623;
  t3127 = -0.766044*t3066;
  t3254 = 0.642788*t3230;
  t3335 = t3127 + t3254;
  t5117 = 0.642788*t4319;
  t5124 = 0.766044*t4527;
  t5140 = t5117 + t5124;
  t2073 = 0.642788*t2036;
  t2170 = 0.766044*t2150;
  t2202 = t2073 + t2170;
  t7465 = -1.*t257;
  t7489 = 1. + t7465;
  t7667 = -1.*t235;
  t7671 = 1. + t7667;
  t7743 = -1.*t176;
  t7744 = 1. + t7743;
  t7785 = -1.*t148;
  t7788 = 1. + t7785;
  t7820 = -1.*t98;
  t7826 = 1. + t7820;
  t7386 = -1.*t2213;
  t7423 = 1. + t7386;
  t7541 = -0.049*t7489;
  t7543 = -0.09*t448;
  t7554 = 0. + t7541 + t7543;
  t7680 = -0.049*t7671;
  t7698 = -0.21*t1014;
  t7701 = 0. + t7680 + t7698;
  t7704 = -0.21*t7671;
  t7709 = 0.049*t1014;
  t7729 = 0. + t7704 + t7709;
  t7746 = -0.0016*t7744;
  t7747 = -0.2707*t1424;
  t7757 = 0. + t7746 + t7747;
  t7771 = -0.2707*t7744;
  t7772 = 0.0016*t1424;
  t7782 = 0. + t7771 + t7772;
  t7793 = 0.0184*t7788;
  t7805 = -0.7055*t1618;
  t7806 = 0. + t7793 + t7805;
  t7808 = -0.7055*t7788;
  t7809 = -0.0184*t1618;
  t7810 = 0. + t7808 + t7809;
  t7827 = -0.0216*t7826;
  t7828 = -1.1135*t1885;
  t7829 = 0. + t7827 + t7828;
  t7832 = -1.1135*t7826;
  t7833 = 0.0216*t1885;
  t7834 = 0. + t7832 + t7833;
  t4775 = -0.766044*t2036;
  t4815 = 0.642788*t2150;
  t4825 = t4775 + t4815;
  t5946 = -1.*t373;
  t6100 = 1. + t5946;
  t7303 = -0.135*t6100;
  t7330 = -0.1305*t373*t2213;
  t7425 = -0.135*t7423;
  t7446 = 0.049*t359;
  t7450 = 0. + t7425 + t7446;
  t7457 = t373*t7450;
  t7610 = t373*t359*t7554;
  t7638 = -0.09*t7489;
  t7648 = 0.049*t448;
  t7653 = 0. + t7638 + t7648;
  t7657 = -1.*t300*t7653;
  t7702 = t3472*t7701;
  t7735 = t3538*t7729;
  t7767 = t3605*t7757;
  t7783 = t3766*t7782;
  t7807 = t3936*t7806;
  t7815 = t4111*t7810;
  t7831 = t4219*t7829;
  t7838 = t4294*t7834;
  t7839 = 0.0306*t4319;
  t7840 = -1.1312*t4527;
  t7841 = 0. + t7303 + t7330 + t7457 + t7610 + t7657 + t7702 + t7735 + t7767 + t7783 + t7807 + t7815 + t7831 + t7838 + t7839 + t7840;
  t7843 = -0.049*t7423;
  t7849 = -0.004500000000000004*t359;
  t7854 = t2213*t7554;
  t7856 = t2213*t257*t7701;
  t7857 = -1.*t2213*t448*t7729;
  t7859 = t2303*t7757;
  t7860 = t2438*t7782;
  t7862 = t2535*t7806;
  t7865 = t2698*t7810;
  t7867 = t2720*t7829;
  t7868 = t2993*t7834;
  t7873 = 0.0306*t3066;
  t7877 = -1.1312*t3230;
  t7882 = 0. + t7843 + t7849 + t7854 + t7856 + t7857 + t7859 + t7860 + t7862 + t7865 + t7867 + t7868 + t7873 + t7877;
  t5305 = t4956*t4629;
  t5431 = -1.*t3335*t5140;
  t5618 = t5305 + t5431;
  t3381 = t373*t2213*t3335;
  t4701 = t359*t4629;
  t4728 = t3381 + t4701;
  t4747 = -1.*t2202*t4728;
  t4976 = t373*t2213*t4956;
  t5217 = t359*t5140;
  t5260 = t4976 + t5217;
  t5269 = t4825*t5260;
  t5712 = -1.*t2213*t300*t5618;
  t5822 = 0. + t4747 + t5269 + t5712;
  t5862 = 1/t5822;
  t7939 = Cos(var1[1]);
  t7950 = Cos(var1[2]);
  t7953 = Cos(var1[3]);
  t7954 = -1.*t7953;
  t7957 = 1. + t7954;
  t7959 = Sin(var1[3]);
  t7976 = Sin(var1[2]);
  t7989 = Cos(var1[4]);
  t7991 = -1.*t7989;
  t7992 = 1. + t7991;
  t7995 = Sin(var1[4]);
  t7998 = -1.*t7939*t7950*t7959;
  t7999 = -1.*t7953*t7939*t7976;
  t8000 = t7998 + t7999;
  t8006 = t7953*t7939*t7950;
  t8007 = -1.*t7939*t7959*t7976;
  t8008 = t8006 + t8007;
  t8011 = Cos(var1[5]);
  t8012 = -1.*t8011;
  t8013 = 1. + t8012;
  t8015 = Sin(var1[5]);
  t8021 = t7995*t8000;
  t8022 = t7989*t8008;
  t8023 = t8021 + t8022;
  t8029 = t7989*t8000;
  t8032 = -1.*t7995*t8008;
  t8035 = t8029 + t8032;
  t8039 = Cos(var1[6]);
  t8041 = -1.*t8039;
  t8042 = 1. + t8041;
  t8044 = Sin(var1[6]);
  t8048 = -1.*t8015*t8023;
  t8049 = t8011*t8035;
  t8051 = t8048 + t8049;
  t8058 = t8011*t8023;
  t8059 = t8015*t8035;
  t8060 = t8058 + t8059;
  t8077 = Cos(var1[0]);
  t7942 = -1.*t7939;
  t7943 = 1. + t7942;
  t7965 = Sin(var1[1]);
  t7972 = -1.*t7950;
  t7973 = 1. + t7972;
  t7975 = -0.049*t7973;
  t7978 = -0.09*t7976;
  t7979 = 0. + t7975 + t7978;
  t7958 = -0.049*t7957;
  t7960 = -0.21*t7959;
  t7961 = 0. + t7958 + t7960;
  t8090 = Sin(var1[0]);
  t7981 = -0.21*t7957;
  t7982 = 0.049*t7959;
  t7984 = 0. + t7981 + t7982;
  t7994 = -0.2707*t7992;
  t7996 = 0.0016*t7995;
  t7997 = 0. + t7994 + t7996;
  t8096 = t8077*t7950*t7965;
  t8097 = -1.*t8090*t7976;
  t8099 = t8096 + t8097;
  t8102 = -1.*t7950*t8090;
  t8103 = -1.*t8077*t7965*t7976;
  t8105 = t8102 + t8103;
  t8003 = -0.0016*t7992;
  t8004 = -0.2707*t7995;
  t8005 = 0. + t8003 + t8004;
  t8014 = 0.0184*t8013;
  t8016 = -0.7055*t8015;
  t8020 = 0. + t8014 + t8016;
  t8107 = -1.*t7959*t8099;
  t8108 = t7953*t8105;
  t8109 = t8107 + t8108;
  t8112 = t7953*t8099;
  t8113 = t7959*t8105;
  t8114 = t8112 + t8113;
  t8025 = -0.7055*t8013;
  t8026 = -0.0184*t8015;
  t8028 = 0. + t8025 + t8026;
  t8043 = -1.1135*t8042;
  t8045 = 0.0216*t8044;
  t8047 = 0. + t8043 + t8045;
  t8116 = t7995*t8109;
  t8118 = t7989*t8114;
  t8119 = t8116 + t8118;
  t8121 = t7989*t8109;
  t8122 = -1.*t7995*t8114;
  t8123 = t8121 + t8122;
  t8054 = -0.0216*t8042;
  t8055 = -1.1135*t8044;
  t8057 = 0. + t8054 + t8055;
  t8126 = -1.*t8015*t8119;
  t8127 = t8011*t8123;
  t8128 = t8126 + t8127;
  t8130 = t8011*t8119;
  t8131 = t8015*t8123;
  t8132 = t8130 + t8131;
  t8083 = 0.135*t7943;
  t8084 = 0.049*t7965;
  t8086 = 0. + t8083 + t8084;
  t8091 = -0.09*t7973;
  t8092 = 0.049*t7976;
  t8093 = 0. + t8091 + t8092;
  t8150 = t7950*t8090*t7965;
  t8151 = t8077*t7976;
  t8152 = t8150 + t8151;
  t8154 = t8077*t7950;
  t8155 = -1.*t8090*t7965*t7976;
  t8156 = t8154 + t8155;
  t8158 = -1.*t7959*t8152;
  t8159 = t7953*t8156;
  t8160 = t8158 + t8159;
  t8162 = t7953*t8152;
  t8163 = t7959*t8156;
  t8164 = t8162 + t8163;
  t8166 = t7995*t8160;
  t8167 = t7989*t8164;
  t8168 = t8166 + t8167;
  t8170 = t7989*t8160;
  t8171 = -1.*t7995*t8164;
  t8172 = t8170 + t8171;
  t8174 = -1.*t8015*t8168;
  t8175 = t8011*t8172;
  t8176 = t8174 + t8175;
  t8178 = t8011*t8168;
  t8179 = t8015*t8172;
  t8180 = t8178 + t8179;
  t7897 = 0.135*t300;
  t7898 = -0.1305*t2213*t300;
  t7899 = t300*t7450;
  t7900 = t300*t359*t7554;
  t7901 = t373*t7653;
  t7902 = t602*t7701;
  t7903 = t982*t7729;
  t7904 = t1041*t7757;
  t7908 = t1306*t7782;
  t7909 = t1452*t7806;
  t7910 = t1605*t7810;
  t7911 = t1690*t7829;
  t7912 = t1820*t7834;
  t7913 = 0.0306*t2036;
  t7919 = -1.1312*t2150;
  t7924 = 0. + t7897 + t7898 + t7899 + t7900 + t7901 + t7902 + t7903 + t7904 + t7908 + t7909 + t7910 + t7911 + t7912 + t7913 + t7919;
  t7842 = t3335*t7841;
  t7884 = -1.*t7882*t4629;
  t7887 = t7842 + t7884;
  t7944 = -0.049*t7943;
  t7962 = t7939*t7950*t7961;
  t7970 = 0.004500000000000004*t7965;
  t7980 = t7939*t7979;
  t7985 = -1.*t7939*t7984*t7976;
  t8001 = t7997*t8000;
  t8010 = t8005*t8008;
  t8024 = t8020*t8023;
  t8038 = t8028*t8035;
  t8052 = t8047*t8051;
  t8061 = t8057*t8060;
  t8063 = t8044*t8051;
  t8064 = t8039*t8060;
  t8065 = t8063 + t8064;
  t8066 = 0.0306*t8065;
  t8067 = t8039*t8051;
  t8068 = -1.*t8044*t8060;
  t8070 = t8067 + t8068;
  t8071 = -1.1312*t8070;
  t8072 = 0. + t7944 + t7962 + t7970 + t7980 + t7985 + t8001 + t8010 + t8024 + t8038 + t8052 + t8061 + t8066 + t8071;
  t8078 = -1.*t8077;
  t8079 = 1. + t8078;
  t8080 = 0.135*t8079;
  t8081 = 0.1305*t8077*t7939;
  t8087 = t8077*t8086;
  t8089 = t8077*t7965*t7979;
  t8095 = -1.*t8090*t8093;
  t8100 = t7961*t8099;
  t8106 = t7984*t8105;
  t8111 = t7997*t8109;
  t8115 = t8005*t8114;
  t8120 = t8020*t8119;
  t8124 = t8028*t8123;
  t8129 = t8047*t8128;
  t8133 = t8057*t8132;
  t8134 = t8044*t8128;
  t8135 = t8039*t8132;
  t8136 = t8134 + t8135;
  t8137 = 0.0306*t8136;
  t8138 = t8039*t8128;
  t8139 = -1.*t8044*t8132;
  t8140 = t8138 + t8139;
  t8141 = -1.1312*t8140;
  t8142 = 0. + t8080 + t8081 + t8087 + t8089 + t8095 + t8100 + t8106 + t8111 + t8115 + t8120 + t8124 + t8129 + t8133 + t8137 + t8141;
  t8145 = -0.135*t8090;
  t8146 = 0.1305*t7939*t8090;
  t8147 = t8090*t8086;
  t8148 = t8090*t7965*t7979;
  t8149 = t8077*t8093;
  t8153 = t7961*t8152;
  t8157 = t7984*t8156;
  t8161 = t7997*t8160;
  t8165 = t8005*t8164;
  t8169 = t8020*t8168;
  t8173 = t8028*t8172;
  t8177 = t8047*t8176;
  t8181 = t8057*t8180;
  t8182 = t8044*t8176;
  t8183 = t8039*t8180;
  t8184 = t8182 + t8183;
  t8185 = 0.0306*t8184;
  t8186 = t8039*t8176;
  t8187 = -1.*t8044*t8180;
  t8188 = t8186 + t8187;
  t8189 = -1.1312*t8188;
  t8190 = 0. + t8145 + t8146 + t8147 + t8148 + t8149 + t8153 + t8157 + t8161 + t8165 + t8169 + t8173 + t8177 + t8181 + t8185 + t8189;
  t8193 = t373*t2213*t7882;
  t8194 = t359*t7841;
  t8195 = t8193 + t8194;
  t7889 = t4956*t7841;
  t7890 = -1.*t7882*t5140;
  t7891 = t7889 + t7890;

  p_output1(0)=t5862*(-1.*t2202*t7887 + t4825*t7891 - 1.*t5618*t7924) + (0. - 1.*t2202*t4629 + t4825*t5140)*t5862*t8072 + (0. + t2202*t3335 - 1.*t4825*t4956)*t5862*t8142 + (0. + t5305 + t5431)*t5862*t8190;
  p_output1(1)=(0. - 1.*t2213*t300*t4629 + t2213*t373*t4825)*t5862*t8072 + (0. + t2213*t300*t3335 + t359*t4825)*t5862*t8142 + (0. - 1.*t2213*t3335*t373 - 1.*t359*t4629)*t5862*t8190 + t5862*(-1.*t2213*t300*t7887 + t4728*t7924 - 1.*t4825*t8195);
  p_output1(2)=(0. - 1.*t2202*t2213*t373 + t2213*t300*t5140)*t5862*t8072 + (0. - 1.*t2202*t359 - 1.*t2213*t300*t4956)*t5862*t8142 + (0. + t4976 + t5217)*t5862*t8190 + t5862*(t2213*t300*t7891 - 1.*t5260*t7924 + t2202*t8195);
}


       
void p_RightToeBottom_to_LeftToeBottom(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
