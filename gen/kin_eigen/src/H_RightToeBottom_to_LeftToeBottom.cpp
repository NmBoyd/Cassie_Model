/*
 * Automatically Generated from Mathematica.
 * Mon 26 Feb 2018 15:43:07 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "H_RightToeBottom_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t305;
  double t325;
  double t335;
  double t310;
  double t346;
  double t239;
  double t540;
  double t543;
  double t594;
  double t327;
  double t379;
  double t450;
  double t647;
  double t198;
  double t784;
  double t823;
  double t824;
  double t511;
  double t693;
  double t729;
  double t837;
  double t188;
  double t1122;
  double t1123;
  double t1139;
  double t730;
  double t911;
  double t919;
  double t1355;
  double t1805;
  double t1729;
  double t1756;
  double t1913;
  double t1929;
  double t1981;
  double t1765;
  double t1870;
  double t1873;
  double t2006;
  double t2042;
  double t2043;
  double t1874;
  double t1984;
  double t1991;
  double t2259;
  double t2345;
  double t2384;
  double t1992;
  double t2192;
  double t2207;
  double t2421;
  double t2422;
  double t2426;
  double t2257;
  double t2389;
  double t2391;
  double t926;
  double t1446;
  double t1478;
  double t1587;
  double t1615;
  double t1628;
  double t2417;
  double t2436;
  double t2446;
  double t2502;
  double t2549;
  double t2643;
  double t2858;
  double t2955;
  double t2972;
  double t2819;
  double t2822;
  double t2823;
  double t3376;
  double t3402;
  double t3432;
  double t3158;
  double t3256;
  double t3313;
  double t3525;
  double t3549;
  double t3562;
  double t3314;
  double t3440;
  double t3446;
  double t3696;
  double t3727;
  double t3829;
  double t3524;
  double t3578;
  double t3589;
  double t4053;
  double t4064;
  double t4087;
  double t3648;
  double t3922;
  double t3929;
  double t2472;
  double t2676;
  double t2749;
  double t1495;
  double t1643;
  double t1648;
  double t3988;
  double t4129;
  double t4201;
  double t4207;
  double t4275;
  double t4366;
  double t4203;
  double t4373;
  double t4380;
  double t4577;
  double t4581;
  double t4602;
  double t186;
  double t4899;
  double t4992;
  double t3150;
  double t4387;
  double t4438;
  double t4459;
  double t4495;
  double t4644;
  double t4743;
  double t4789;
  double t5042;
  double t5144;
  double t5158;
  double t5226;
  double t185;
  double t5572;
  double t5787;
  double t5723;
  double t5747;
  double t5751;
  double t8655;
  double t8642;
  double t8646;
  double t8656;
  double t8666;
  double t8648;
  double t8661;
  double t8662;
  double t8638;
  double t8668;
  double t8671;
  double t8673;
  double t8683;
  double t8664;
  double t8676;
  double t8681;
  double t8635;
  double t8688;
  double t8692;
  double t8693;
  double t8708;
  double t8682;
  double t8699;
  double t8702;
  double t8632;
  double t8716;
  double t8717;
  double t8718;
  double t2809;
  double t2999;
  double t3033;
  double t8745;
  double t8746;
  double t8756;
  double t8759;
  double t8762;
  double t8766;
  double t8757;
  double t8768;
  double t8769;
  double t8771;
  double t8773;
  double t8774;
  double t8770;
  double t8776;
  double t8777;
  double t8779;
  double t8781;
  double t8782;
  double t8778;
  double t8783;
  double t8784;
  double t8791;
  double t8792;
  double t8793;
  double t5556;
  double t8807;
  double t8808;
  double t8810;
  double t8812;
  double t8813;
  double t8815;
  double t8811;
  double t8816;
  double t8817;
  double t8819;
  double t8820;
  double t8823;
  double t8818;
  double t8825;
  double t8826;
  double t8828;
  double t8829;
  double t8830;
  double t8827;
  double t8832;
  double t8835;
  double t8838;
  double t8839;
  double t8840;
  double t6487;
  double t6648;
  double t6769;
  double t8706;
  double t8720;
  double t8723;
  double t8729;
  double t8732;
  double t8734;
  double t8735;
  double t8739;
  double t8741;
  double t5942;
  double t5957;
  double t6102;
  double t8785;
  double t8794;
  double t8795;
  double t8796;
  double t8798;
  double t8801;
  double t8803;
  double t8804;
  double t8805;
  double t6174;
  double t6317;
  double t6357;
  double t8837;
  double t8841;
  double t8842;
  double t8844;
  double t8845;
  double t8846;
  double t8847;
  double t8849;
  double t8850;
  double t8618;
  double t8622;
  double t8625;
  double t7708;
  double t8465;
  double t8526;
  double t8600;
  double t8861;
  double t8862;
  double t8863;
  double t8865;
  double t8866;
  double t8867;
  double t8869;
  double t8870;
  double t8871;
  double t8898;
  double t8899;
  double t8915;
  double t8916;
  double t8927;
  double t8928;
  double t8939;
  double t8940;
  double t8949;
  double t8950;
  double t8890;
  double t8891;
  double t8900;
  double t8905;
  double t8906;
  double t8917;
  double t8918;
  double t8919;
  double t8921;
  double t8922;
  double t8925;
  double t8929;
  double t8930;
  double t8931;
  double t8935;
  double t8936;
  double t8937;
  double t8941;
  double t8942;
  double t8943;
  double t8945;
  double t8946;
  double t8947;
  double t8952;
  double t8953;
  double t8954;
  double t8956;
  double t8957;
  double t8958;
  double t8882;
  double t8885;
  double t8886;
  double t8889;
  double t8892;
  double t8895;
  double t8896;
  double t8897;
  double t8907;
  double t8908;
  double t8909;
  double t8910;
  double t8912;
  double t8920;
  double t8926;
  double t8932;
  double t8938;
  double t8944;
  double t8948;
  double t8955;
  double t8959;
  double t8963;
  double t8964;
  double t8967;
  double t8969;
  double t8970;
  double t8971;
  double t8972;
  double t8973;
  double t8974;
  double t8975;
  double t8976;
  double t8977;
  double t8978;
  double t8979;
  double t8980;
  double t8981;
  double t8982;
  double t9025;
  double t9026;
  double t9047;
  double t9048;
  double t9059;
  double t9060;
  double t9070;
  double t9071;
  double t9022;
  double t9023;
  double t9034;
  double t9035;
  double t9036;
  double t9037;
  double t9038;
  double t9029;
  double t9030;
  double t9031;
  double t9043;
  double t9044;
  double t9045;
  double t9049;
  double t9050;
  double t9051;
  double t9055;
  double t9056;
  double t9057;
  double t9061;
  double t9062;
  double t9063;
  double t9066;
  double t9067;
  double t9068;
  double t9072;
  double t9073;
  double t9074;
  double t9076;
  double t9077;
  double t9078;
  double t9090;
  double t9091;
  double t9092;
  double t9095;
  double t9096;
  double t9097;
  double t8995;
  double t8996;
  double t8999;
  double t9000;
  double t9001;
  double t9002;
  double t9003;
  double t9004;
  double t9009;
  double t9010;
  double t9011;
  double t9012;
  double t9013;
  double t9014;
  double t9015;
  double t9016;
  double t8968;
  double t8984;
  double t8985;
  double t9024;
  double t9032;
  double t9033;
  double t9040;
  double t9046;
  double t9054;
  double t9058;
  double t9065;
  double t9069;
  double t9075;
  double t9079;
  double t9080;
  double t9082;
  double t9083;
  double t9085;
  double t9087;
  double t9088;
  double t9089;
  double t9093;
  double t9094;
  double t9098;
  double t9099;
  double t9100;
  double t9101;
  double t9102;
  double t9103;
  double t9104;
  double t9105;
  double t9106;
  double t9107;
  double t9108;
  double t9109;
  double t9111;
  double t9112;
  double t9113;
  double t9114;
  double t9115;
  double t9116;
  double t9117;
  double t9118;
  double t9119;
  double t9120;
  double t9121;
  double t9122;
  double t9123;
  double t9124;
  double t9125;
  double t9126;
  double t9129;
  double t9130;
  double t9131;
  double t8989;
  double t8992;
  double t8993;
  t305 = Cos(var1[8]);
  t325 = Cos(var1[10]);
  t335 = Sin(var1[9]);
  t310 = Cos(var1[9]);
  t346 = Sin(var1[10]);
  t239 = Cos(var1[11]);
  t540 = -1.*t305*t325*t335;
  t543 = -1.*t305*t310*t346;
  t594 = t540 + t543;
  t327 = t305*t310*t325;
  t379 = -1.*t305*t335*t346;
  t450 = t327 + t379;
  t647 = Sin(var1[11]);
  t198 = Cos(var1[12]);
  t784 = t239*t594;
  t823 = -1.*t450*t647;
  t824 = t784 + t823;
  t511 = t239*t450;
  t693 = t594*t647;
  t729 = t511 + t693;
  t837 = Sin(var1[12]);
  t188 = Cos(var1[13]);
  t1122 = t198*t824;
  t1123 = -1.*t729*t837;
  t1139 = t1122 + t1123;
  t730 = t198*t729;
  t911 = t824*t837;
  t919 = t730 + t911;
  t1355 = Sin(var1[13]);
  t1805 = Cos(var1[7]);
  t1729 = Sin(var1[7]);
  t1756 = Sin(var1[8]);
  t1913 = t1805*t310;
  t1929 = -1.*t1729*t1756*t335;
  t1981 = t1913 + t1929;
  t1765 = t310*t1729*t1756;
  t1870 = t1805*t335;
  t1873 = t1765 + t1870;
  t2006 = t325*t1981;
  t2042 = -1.*t1873*t346;
  t2043 = t2006 + t2042;
  t1874 = t325*t1873;
  t1984 = t1981*t346;
  t1991 = t1874 + t1984;
  t2259 = t239*t2043;
  t2345 = -1.*t1991*t647;
  t2384 = t2259 + t2345;
  t1992 = t239*t1991;
  t2192 = t2043*t647;
  t2207 = t1992 + t2192;
  t2421 = t198*t2384;
  t2422 = -1.*t2207*t837;
  t2426 = t2421 + t2422;
  t2257 = t198*t2207;
  t2389 = t2384*t837;
  t2391 = t2257 + t2389;
  t926 = t188*t919;
  t1446 = t1139*t1355;
  t1478 = t926 + t1446;
  t1587 = t188*t1139;
  t1615 = -1.*t919*t1355;
  t1628 = t1587 + t1615;
  t2417 = t188*t2391;
  t2436 = t2426*t1355;
  t2446 = t2417 + t2436;
  t2502 = t188*t2426;
  t2549 = -1.*t2391*t1355;
  t2643 = t2502 + t2549;
  t2858 = 0.642788*t2446;
  t2955 = 0.766044*t2643;
  t2972 = t2858 + t2955;
  t2819 = -0.766044*t1478;
  t2822 = 0.642788*t1628;
  t2823 = t2819 + t2822;
  t3376 = -1.*t310*t1729;
  t3402 = -1.*t1805*t1756*t335;
  t3432 = t3376 + t3402;
  t3158 = t1805*t310*t1756;
  t3256 = -1.*t1729*t335;
  t3313 = t3158 + t3256;
  t3525 = t325*t3432;
  t3549 = -1.*t3313*t346;
  t3562 = t3525 + t3549;
  t3314 = t325*t3313;
  t3440 = t3432*t346;
  t3446 = t3314 + t3440;
  t3696 = t239*t3562;
  t3727 = -1.*t3446*t647;
  t3829 = t3696 + t3727;
  t3524 = t239*t3446;
  t3578 = t3562*t647;
  t3589 = t3524 + t3578;
  t4053 = t198*t3829;
  t4064 = -1.*t3589*t837;
  t4087 = t4053 + t4064;
  t3648 = t198*t3589;
  t3922 = t3829*t837;
  t3929 = t3648 + t3922;
  t2472 = -0.766044*t2446;
  t2676 = 0.642788*t2643;
  t2749 = t2472 + t2676;
  t1495 = 0.642788*t1478;
  t1643 = 0.766044*t1628;
  t1648 = t1495 + t1643;
  t3988 = t188*t3929;
  t4129 = t4087*t1355;
  t4201 = t3988 + t4129;
  t4207 = t188*t4087;
  t4275 = -1.*t3929*t1355;
  t4366 = t4207 + t4275;
  t4203 = -0.766044*t4201;
  t4373 = 0.642788*t4366;
  t4380 = t4203 + t4373;
  t4577 = 0.642788*t4201;
  t4581 = 0.766044*t4366;
  t4602 = t4577 + t4581;
  t186 = Cos(var1[1]);
  t4899 = t1648*t4380;
  t4992 = -1.*t2823*t4602;
  t3150 = t1805*t305*t2823;
  t4387 = t1756*t4380;
  t4438 = t3150 + t4387;
  t4459 = -1.*t2972*t4438;
  t4495 = t1805*t305*t1648;
  t4644 = t1756*t4602;
  t4743 = t4495 + t4644;
  t4789 = t2749*t4743;
  t5042 = t4899 + t4992;
  t5144 = -1.*t305*t1729*t5042;
  t5158 = 0. + t4459 + t4789 + t5144;
  t5226 = 1/t5158;
  t185 = Cos(var1[0]);
  t5572 = Sin(var1[0]);
  t5787 = Sin(var1[1]);
  t5723 = t4602*t2749;
  t5747 = -1.*t4380*t2972;
  t5751 = 0. + t5723 + t5747;
  t8655 = Cos(var1[3]);
  t8642 = Cos(var1[2]);
  t8646 = Sin(var1[3]);
  t8656 = Sin(var1[2]);
  t8666 = Cos(var1[4]);
  t8648 = -1.*t186*t8642*t8646;
  t8661 = -1.*t8655*t186*t8656;
  t8662 = t8648 + t8661;
  t8638 = Sin(var1[4]);
  t8668 = t8655*t186*t8642;
  t8671 = -1.*t186*t8646*t8656;
  t8673 = t8668 + t8671;
  t8683 = Cos(var1[5]);
  t8664 = t8638*t8662;
  t8676 = t8666*t8673;
  t8681 = t8664 + t8676;
  t8635 = Sin(var1[5]);
  t8688 = t8666*t8662;
  t8692 = -1.*t8638*t8673;
  t8693 = t8688 + t8692;
  t8708 = Cos(var1[6]);
  t8682 = -1.*t8635*t8681;
  t8699 = t8683*t8693;
  t8702 = t8682 + t8699;
  t8632 = Sin(var1[6]);
  t8716 = t8683*t8681;
  t8717 = t8635*t8693;
  t8718 = t8716 + t8717;
  t2809 = -1.*t1648*t2749;
  t2999 = t2823*t2972;
  t3033 = 0. + t2809 + t2999;
  t8745 = t185*t8642*t5787;
  t8746 = -1.*t5572*t8656;
  t8756 = t8745 + t8746;
  t8759 = -1.*t8642*t5572;
  t8762 = -1.*t185*t5787*t8656;
  t8766 = t8759 + t8762;
  t8757 = -1.*t8646*t8756;
  t8768 = t8655*t8766;
  t8769 = t8757 + t8768;
  t8771 = t8655*t8756;
  t8773 = t8646*t8766;
  t8774 = t8771 + t8773;
  t8770 = t8638*t8769;
  t8776 = t8666*t8774;
  t8777 = t8770 + t8776;
  t8779 = t8666*t8769;
  t8781 = -1.*t8638*t8774;
  t8782 = t8779 + t8781;
  t8778 = -1.*t8635*t8777;
  t8783 = t8683*t8782;
  t8784 = t8778 + t8783;
  t8791 = t8683*t8777;
  t8792 = t8635*t8782;
  t8793 = t8791 + t8792;
  t5556 = 0. + t4899 + t4992;
  t8807 = t8642*t5572*t5787;
  t8808 = t185*t8656;
  t8810 = t8807 + t8808;
  t8812 = t185*t8642;
  t8813 = -1.*t5572*t5787*t8656;
  t8815 = t8812 + t8813;
  t8811 = -1.*t8646*t8810;
  t8816 = t8655*t8815;
  t8817 = t8811 + t8816;
  t8819 = t8655*t8810;
  t8820 = t8646*t8815;
  t8823 = t8819 + t8820;
  t8818 = t8638*t8817;
  t8825 = t8666*t8823;
  t8826 = t8818 + t8825;
  t8828 = t8666*t8817;
  t8829 = -1.*t8638*t8823;
  t8830 = t8828 + t8829;
  t8827 = -1.*t8635*t8826;
  t8832 = t8683*t8830;
  t8835 = t8827 + t8832;
  t8838 = t8683*t8826;
  t8839 = t8635*t8830;
  t8840 = t8838 + t8839;
  t6487 = -1.*t305*t1729*t4380;
  t6648 = t1805*t305*t2749;
  t6769 = 0. + t6487 + t6648;
  t8706 = t8632*t8702;
  t8720 = t8708*t8718;
  t8723 = t8706 + t8720;
  t8729 = 0.642788*t8723;
  t8732 = t8708*t8702;
  t8734 = -1.*t8632*t8718;
  t8735 = t8732 + t8734;
  t8739 = 0.766044*t8735;
  t8741 = t8729 + t8739;
  t5942 = t305*t1729*t2823;
  t5957 = t1756*t2749;
  t6102 = 0. + t5942 + t5957;
  t8785 = t8632*t8784;
  t8794 = t8708*t8793;
  t8795 = t8785 + t8794;
  t8796 = 0.642788*t8795;
  t8798 = t8708*t8784;
  t8801 = -1.*t8632*t8793;
  t8803 = t8798 + t8801;
  t8804 = 0.766044*t8803;
  t8805 = t8796 + t8804;
  t6174 = -1.*t1805*t305*t2823;
  t6317 = -1.*t1756*t4380;
  t6357 = 0. + t6174 + t6317;
  t8837 = t8632*t8835;
  t8841 = t8708*t8840;
  t8842 = t8837 + t8841;
  t8844 = 0.642788*t8842;
  t8845 = t8708*t8835;
  t8846 = -1.*t8632*t8840;
  t8847 = t8845 + t8846;
  t8849 = 0.766044*t8847;
  t8850 = t8844 + t8849;
  t8618 = t305*t1729*t4602;
  t8622 = -1.*t1805*t305*t2972;
  t8625 = 0. + t8618 + t8622;
  t7708 = -1.*t305*t1729*t1648;
  t8465 = -1.*t1756*t2972;
  t8526 = 0. + t7708 + t8465;
  t8600 = 0. + t4495 + t4644;
  t8861 = -0.766044*t8723;
  t8862 = 0.642788*t8735;
  t8863 = t8861 + t8862;
  t8865 = -0.766044*t8795;
  t8866 = 0.642788*t8803;
  t8867 = t8865 + t8866;
  t8869 = -0.766044*t8842;
  t8870 = 0.642788*t8847;
  t8871 = t8869 + t8870;
  t8898 = -1.*t310;
  t8899 = 1. + t8898;
  t8915 = -1.*t325;
  t8916 = 1. + t8915;
  t8927 = -1.*t239;
  t8928 = 1. + t8927;
  t8939 = -1.*t198;
  t8940 = 1. + t8939;
  t8949 = -1.*t188;
  t8950 = 1. + t8949;
  t8890 = -1.*t305;
  t8891 = 1. + t8890;
  t8900 = -0.049*t8899;
  t8905 = -0.09*t335;
  t8906 = 0. + t8900 + t8905;
  t8917 = -0.049*t8916;
  t8918 = -0.21*t346;
  t8919 = 0. + t8917 + t8918;
  t8921 = -0.21*t8916;
  t8922 = 0.049*t346;
  t8925 = 0. + t8921 + t8922;
  t8929 = -0.0016*t8928;
  t8930 = -0.2707*t647;
  t8931 = 0. + t8929 + t8930;
  t8935 = -0.2707*t8928;
  t8936 = 0.0016*t647;
  t8937 = 0. + t8935 + t8936;
  t8941 = 0.0184*t8940;
  t8942 = -0.7055*t837;
  t8943 = 0. + t8941 + t8942;
  t8945 = -0.7055*t8940;
  t8946 = -0.0184*t837;
  t8947 = 0. + t8945 + t8946;
  t8952 = -0.0216*t8950;
  t8953 = -1.1135*t1355;
  t8954 = 0. + t8952 + t8953;
  t8956 = -1.1135*t8950;
  t8957 = 0.0216*t1355;
  t8958 = 0. + t8956 + t8957;
  t8882 = -1.*t1805;
  t8885 = 1. + t8882;
  t8886 = -0.135*t8885;
  t8889 = -0.1305*t1805*t305;
  t8892 = -0.135*t8891;
  t8895 = 0.049*t1756;
  t8896 = 0. + t8892 + t8895;
  t8897 = t1805*t8896;
  t8907 = t1805*t1756*t8906;
  t8908 = -0.09*t8899;
  t8909 = 0.049*t335;
  t8910 = 0. + t8908 + t8909;
  t8912 = -1.*t1729*t8910;
  t8920 = t3313*t8919;
  t8926 = t3432*t8925;
  t8932 = t3446*t8931;
  t8938 = t3562*t8937;
  t8944 = t3589*t8943;
  t8948 = t3829*t8947;
  t8955 = t3929*t8954;
  t8959 = t4087*t8958;
  t8963 = 0.0306*t4201;
  t8964 = -1.1312*t4366;
  t8967 = 0. + t8886 + t8889 + t8897 + t8907 + t8912 + t8920 + t8926 + t8932 + t8938 + t8944 + t8948 + t8955 + t8959 + t8963 + t8964;
  t8969 = -0.049*t8891;
  t8970 = -0.004500000000000004*t1756;
  t8971 = t305*t8906;
  t8972 = t305*t310*t8919;
  t8973 = -1.*t305*t335*t8925;
  t8974 = t450*t8931;
  t8975 = t594*t8937;
  t8976 = t729*t8943;
  t8977 = t824*t8947;
  t8978 = t919*t8954;
  t8979 = t1139*t8958;
  t8980 = 0.0306*t1478;
  t8981 = -1.1312*t1628;
  t8982 = 0. + t8969 + t8970 + t8971 + t8972 + t8973 + t8974 + t8975 + t8976 + t8977 + t8978 + t8979 + t8980 + t8981;
  t9025 = -1.*t8655;
  t9026 = 1. + t9025;
  t9047 = -1.*t8666;
  t9048 = 1. + t9047;
  t9059 = -1.*t8683;
  t9060 = 1. + t9059;
  t9070 = -1.*t8708;
  t9071 = 1. + t9070;
  t9022 = -1.*t186;
  t9023 = 1. + t9022;
  t9034 = -1.*t8642;
  t9035 = 1. + t9034;
  t9036 = -0.049*t9035;
  t9037 = -0.09*t8656;
  t9038 = 0. + t9036 + t9037;
  t9029 = -0.049*t9026;
  t9030 = -0.21*t8646;
  t9031 = 0. + t9029 + t9030;
  t9043 = -0.21*t9026;
  t9044 = 0.049*t8646;
  t9045 = 0. + t9043 + t9044;
  t9049 = -0.2707*t9048;
  t9050 = 0.0016*t8638;
  t9051 = 0. + t9049 + t9050;
  t9055 = -0.0016*t9048;
  t9056 = -0.2707*t8638;
  t9057 = 0. + t9055 + t9056;
  t9061 = 0.0184*t9060;
  t9062 = -0.7055*t8635;
  t9063 = 0. + t9061 + t9062;
  t9066 = -0.7055*t9060;
  t9067 = -0.0184*t8635;
  t9068 = 0. + t9066 + t9067;
  t9072 = -1.1135*t9071;
  t9073 = 0.0216*t8632;
  t9074 = 0. + t9072 + t9073;
  t9076 = -0.0216*t9071;
  t9077 = -1.1135*t8632;
  t9078 = 0. + t9076 + t9077;
  t9090 = 0.135*t9023;
  t9091 = 0.049*t5787;
  t9092 = 0. + t9090 + t9091;
  t9095 = -0.09*t9035;
  t9096 = 0.049*t8656;
  t9097 = 0. + t9095 + t9096;
  t8995 = 0.135*t1729;
  t8996 = -0.1305*t305*t1729;
  t8999 = t1729*t8896;
  t9000 = t1729*t1756*t8906;
  t9001 = t1805*t8910;
  t9002 = t1873*t8919;
  t9003 = t1981*t8925;
  t9004 = t1991*t8931;
  t9009 = t2043*t8937;
  t9010 = t2207*t8943;
  t9011 = t2384*t8947;
  t9012 = t2391*t8954;
  t9013 = t2426*t8958;
  t9014 = 0.0306*t2446;
  t9015 = -1.1312*t2643;
  t9016 = 0. + t8995 + t8996 + t8999 + t9000 + t9001 + t9002 + t9003 + t9004 + t9009 + t9010 + t9011 + t9012 + t9013 + t9014 + t9015;
  t8968 = t2823*t8967;
  t8984 = -1.*t8982*t4380;
  t8985 = t8968 + t8984;
  t9024 = -0.049*t9023;
  t9032 = t186*t8642*t9031;
  t9033 = 0.004500000000000004*t5787;
  t9040 = t186*t9038;
  t9046 = -1.*t186*t9045*t8656;
  t9054 = t9051*t8662;
  t9058 = t9057*t8673;
  t9065 = t9063*t8681;
  t9069 = t9068*t8693;
  t9075 = t9074*t8702;
  t9079 = t9078*t8718;
  t9080 = 0.0306*t8723;
  t9082 = -1.1312*t8735;
  t9083 = 0. + t9024 + t9032 + t9033 + t9040 + t9046 + t9054 + t9058 + t9065 + t9069 + t9075 + t9079 + t9080 + t9082;
  t9085 = -1.*t185;
  t9087 = 1. + t9085;
  t9088 = 0.135*t9087;
  t9089 = 0.1305*t185*t186;
  t9093 = t185*t9092;
  t9094 = t185*t5787*t9038;
  t9098 = -1.*t5572*t9097;
  t9099 = t9031*t8756;
  t9100 = t9045*t8766;
  t9101 = t9051*t8769;
  t9102 = t9057*t8774;
  t9103 = t9063*t8777;
  t9104 = t9068*t8782;
  t9105 = t9074*t8784;
  t9106 = t9078*t8793;
  t9107 = 0.0306*t8795;
  t9108 = -1.1312*t8803;
  t9109 = 0. + t9088 + t9089 + t9093 + t9094 + t9098 + t9099 + t9100 + t9101 + t9102 + t9103 + t9104 + t9105 + t9106 + t9107 + t9108;
  t9111 = -0.135*t5572;
  t9112 = 0.1305*t186*t5572;
  t9113 = t5572*t9092;
  t9114 = t5572*t5787*t9038;
  t9115 = t185*t9097;
  t9116 = t9031*t8810;
  t9117 = t9045*t8815;
  t9118 = t9051*t8817;
  t9119 = t9057*t8823;
  t9120 = t9063*t8826;
  t9121 = t9068*t8830;
  t9122 = t9074*t8835;
  t9123 = t9078*t8840;
  t9124 = 0.0306*t8842;
  t9125 = -1.1312*t8847;
  t9126 = 0. + t9111 + t9112 + t9113 + t9114 + t9115 + t9116 + t9117 + t9118 + t9119 + t9120 + t9121 + t9122 + t9123 + t9124 + t9125;
  t9129 = t1805*t305*t8982;
  t9130 = t1756*t8967;
  t9131 = t9129 + t9130;
  t8989 = t1648*t8967;
  t8992 = -1.*t8982*t4602;
  t8993 = t8989 + t8992;

  p_output1(0)=0. - 1.*t185*t186*t3033*t5226 - 1.*t186*t5226*t5556*t5572 + t5226*t5751*t5787;
  p_output1(1)=0. - 1.*t185*t186*t5226*t6102 - 1.*t186*t5226*t5572*t6357 + t5226*t5787*t6769;
  p_output1(2)=0. - 1.*t185*t186*t5226*t8526 - 1.*t186*t5226*t5572*t8600 + t5226*t5787*t8625;
  p_output1(3)=0.;
  p_output1(4)=0. + t5226*t5751*t8741 + t3033*t5226*t8805 + t5226*t5556*t8850;
  p_output1(5)=0. + t5226*t6769*t8741 + t5226*t6102*t8805 + t5226*t6357*t8850;
  p_output1(6)=0. + t5226*t8625*t8741 + t5226*t8526*t8805 + t5226*t8600*t8850;
  p_output1(7)=0.;
  p_output1(8)=0. + t5226*t5751*t8863 + t3033*t5226*t8867 + t5226*t5556*t8871;
  p_output1(9)=0. + t5226*t6769*t8863 + t5226*t6102*t8867 + t5226*t6357*t8871;
  p_output1(10)=0. + t5226*t8625*t8863 + t5226*t8526*t8867 + t5226*t8600*t8871;
  p_output1(11)=0.;
  p_output1(12)=t5226*(-1.*t2972*t8985 + t2749*t8993 - 1.*t5042*t9016) + t5226*t5751*t9083 + t3033*t5226*t9109 + t5226*t5556*t9126;
  p_output1(13)=t5226*t6769*t9083 + t5226*t6102*t9109 + t5226*t6357*t9126 + t5226*(-1.*t1729*t305*t8985 + t4438*t9016 - 1.*t2749*t9131);
  p_output1(14)=t5226*t8625*t9083 + t5226*t8526*t9109 + t5226*t8600*t9126 + t5226*(t1729*t305*t8993 - 1.*t4743*t9016 + t2972*t9131);
  p_output1(15)=0. + (t4459 + t4789 + t5144)*t5226;
}


       
void H_RightToeBottom_to_LeftToeBottom(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
