/*
 * Automatically Generated from Mathematica.
 * Mon 2 Jul 2018 15:37:27 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "J_VectorNav_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t57;
  double t84;
  double t200;
  double t300;
  double t303;
  double t314;
  double t337;
  double t353;
  double t681;
  double t714;
  double t743;
  double t797;
  double t901;
  double t909;
  double t925;
  double t1067;
  double t1104;
  double t1150;
  double t1191;
  double t1235;
  double t1237;
  double t1314;
  double t1436;
  double t1463;
  double t1483;
  double t1552;
  double t1693;
  double t1695;
  double t1785;
  double t1838;
  double t1848;
  double t2006;
  double t2105;
  double t2112;
  double t2127;
  double t2575;
  double t2606;
  double t2608;
  double t2757;
  double t2837;
  double t2839;
  double t2936;
  double t3020;
  double t3032;
  double t3149;
  double t3284;
  double t3292;
  double t3302;
  double t139;
  double t168;
  double t171;
  double t211;
  double t215;
  double t318;
  double t340;
  double t342;
  double t424;
  double t430;
  double t458;
  double t786;
  double t802;
  double t893;
  double t948;
  double t1014;
  double t1042;
  double t1251;
  double t1389;
  double t1430;
  double t4049;
  double t4108;
  double t4113;
  double t4198;
  double t4224;
  double t4237;
  double t1517;
  double t1536;
  double t1550;
  double t1880;
  double t2016;
  double t2057;
  double t4275;
  double t4291;
  double t4336;
  double t4362;
  double t4393;
  double t4421;
  double t2375;
  double t2410;
  double t2523;
  double t2866;
  double t2948;
  double t2962;
  double t4510;
  double t4557;
  double t4569;
  double t4619;
  double t4626;
  double t4641;
  double t3210;
  double t3214;
  double t3224;
  double t4665;
  double t4692;
  double t4716;
  double t4742;
  double t4749;
  double t4776;
  double t5225;
  double t5291;
  double t5299;
  double t5314;
  double t5316;
  double t5350;
  double t5411;
  double t5426;
  double t5433;
  double t5449;
  double t5457;
  double t5462;
  double t5488;
  double t5493;
  double t5495;
  double t5525;
  double t5533;
  double t5542;
  double t5901;
  double t5929;
  double t5953;
  double t6023;
  double t6078;
  double t6100;
  double t6135;
  double t6152;
  double t6162;
  double t6176;
  double t6204;
  double t6215;
  double t6220;
  double t6232;
  double t6243;
  double t6289;
  double t6309;
  double t6325;
  double t5741;
  double t5777;
  double t5784;
  double t6522;
  double t6540;
  double t6546;
  double t6557;
  double t6574;
  double t6581;
  double t6585;
  double t6586;
  double t6589;
  double t6612;
  double t6638;
  double t6658;
  double t6681;
  double t6686;
  double t6724;
  double t6767;
  double t6775;
  double t6800;
  double t6999;
  double t7019;
  double t7024;
  double t7035;
  double t7051;
  double t7058;
  double t7065;
  double t7097;
  double t7099;
  double t7115;
  double t7128;
  double t7131;
  double t7216;
  double t7218;
  double t7221;
  double t7253;
  double t7258;
  double t7282;
  double t6968;
  double t6979;
  double t6980;
  double t7410;
  double t7438;
  double t7441;
  double t7477;
  double t7499;
  double t7502;
  double t7508;
  double t7522;
  double t7532;
  double t7544;
  double t7556;
  double t7564;
  double t7574;
  double t7588;
  double t7598;
  double t7613;
  double t7625;
  double t7643;
  double t7659;
  double t7667;
  double t7390;
  double t7398;
  double t7815;
  double t7844;
  double t7905;
  double t7936;
  double t7955;
  double t7958;
  double t7984;
  double t7992;
  double t8116;
  double t8130;
  double t8151;
  double t8230;
  double t8248;
  double t8249;
  double t8285;
  double t8323;
  double t8335;
  double t8392;
  double t8413;
  double t8429;
  double t7030;
  double t7062;
  double t7110;
  double t7166;
  double t7250;
  double t7289;
  double t7290;
  double t7314;
  double t7318;
  double t7333;
  double t7336;
  double t7347;
  double t7357;
  double t7381;
  double t8593;
  double t8596;
  double t8605;
  double t8626;
  double t8645;
  double t8697;
  double t8712;
  double t8720;
  double t8723;
  double t8729;
  double t8736;
  double t8743;
  double t8754;
  double t8755;
  double t8756;
  double t8831;
  double t8840;
  double t8850;
  double t8940;
  double t8942;
  double t8954;
  double t8968;
  double t8970;
  double t8986;
  double t8988;
  double t8991;
  double t8992;
  double t8997;
  double t9003;
  double t9008;
  double t9010;
  double t9015;
  double t9018;
  double t9022;
  double t9039;
  double t9040;
  double t9041;
  double t9086;
  double t9092;
  double t9095;
  double t9097;
  double t9098;
  double t9100;
  double t9101;
  double t9105;
  double t9108;
  double t9113;
  double t9121;
  double t9123;
  double t9125;
  double t9069;
  double t9073;
  double t9081;
  double t9082;
  double t9085;
  double t9157;
  double t9158;
  double t9161;
  double t9162;
  double t9164;
  double t9166;
  double t9168;
  double t9207;
  double t9213;
  double t9214;
  double t9217;
  double t9220;
  double t9225;
  double t9226;
  double t9234;
  double t9237;
  double t9240;
  double t9243;
  double t9244;
  double t9245;
  double t9285;
  double t9287;
  double t9289;
  double t9303;
  double t9305;
  double t9310;
  double t9311;
  double t9275;
  double t9276;
  double t9280;
  double t9295;
  double t9301;
  double t9345;
  double t9346;
  double t4983;
  double t9370;
  double t9371;
  double t9372;
  double t9384;
  double t9389;
  double t9393;
  double t9395;
  double t9313;
  double t9424;
  double t9425;
  double t9426;
  double t9324;
  double t9413;
  double t9414;
  double t9418;
  double t9420;
  double t9422;
  double t9349;
  double t5015;
  double t5025;
  double t9397;
  double t9447;
  double t9448;
  double t9450;
  double t9403;
  t57 = Sin(var1[0]);
  t84 = Cos(var1[1]);
  t200 = Sin(var1[1]);
  t300 = Cos(var1[2]);
  t303 = -1.*t300;
  t314 = 1. + t303;
  t337 = Sin(var1[2]);
  t353 = Cos(var1[0]);
  t681 = Cos(var1[3]);
  t714 = -1.*t681;
  t743 = 1. + t714;
  t797 = Sin(var1[3]);
  t901 = -1.*t300*t57*t200;
  t909 = -1.*t353*t337;
  t925 = t901 + t909;
  t1067 = -1.*t353*t300;
  t1104 = t57*t200*t337;
  t1150 = t1067 + t1104;
  t1191 = Cos(var1[4]);
  t1235 = -1.*t1191;
  t1237 = 1. + t1235;
  t1314 = Sin(var1[4]);
  t1436 = -1.*t797*t925;
  t1463 = t681*t1150;
  t1483 = t1436 + t1463;
  t1552 = t681*t925;
  t1693 = t797*t1150;
  t1695 = t1552 + t1693;
  t1785 = Cos(var1[5]);
  t1838 = -1.*t1785;
  t1848 = 1. + t1838;
  t2006 = Sin(var1[5]);
  t2105 = t1314*t1483;
  t2112 = t1191*t1695;
  t2127 = t2105 + t2112;
  t2575 = t1191*t1483;
  t2606 = -1.*t1314*t1695;
  t2608 = t2575 + t2606;
  t2757 = Cos(var1[6]);
  t2837 = -1.*t2757;
  t2839 = 1. + t2837;
  t2936 = Sin(var1[6]);
  t3020 = -1.*t2006*t2127;
  t3032 = t1785*t2608;
  t3149 = t3020 + t3032;
  t3284 = t1785*t2127;
  t3292 = t2006*t2608;
  t3302 = t3284 + t3292;
  t139 = -1.*t84;
  t168 = 1. + t139;
  t171 = 0.135*t168;
  t211 = 0.049*t200;
  t215 = 0. + t171 + t211;
  t318 = -0.049*t314;
  t340 = -0.09*t337;
  t342 = 0. + t318 + t340;
  t424 = -0.09*t314;
  t430 = 0.049*t337;
  t458 = 0. + t424 + t430;
  t786 = -0.049*t743;
  t802 = -0.21*t797;
  t893 = 0. + t786 + t802;
  t948 = -0.21*t743;
  t1014 = 0.049*t797;
  t1042 = 0. + t948 + t1014;
  t1251 = -0.2707*t1237;
  t1389 = 0.0016*t1314;
  t1430 = 0. + t1251 + t1389;
  t4049 = t353*t300*t200;
  t4108 = -1.*t57*t337;
  t4113 = t4049 + t4108;
  t4198 = -1.*t300*t57;
  t4224 = -1.*t353*t200*t337;
  t4237 = t4198 + t4224;
  t1517 = -0.0016*t1237;
  t1536 = -0.2707*t1314;
  t1550 = 0. + t1517 + t1536;
  t1880 = 0.0184*t1848;
  t2016 = -0.7055*t2006;
  t2057 = 0. + t1880 + t2016;
  t4275 = -1.*t797*t4113;
  t4291 = t681*t4237;
  t4336 = t4275 + t4291;
  t4362 = t681*t4113;
  t4393 = t797*t4237;
  t4421 = t4362 + t4393;
  t2375 = -0.7055*t1848;
  t2410 = -0.0184*t2006;
  t2523 = 0. + t2375 + t2410;
  t2866 = -1.1135*t2839;
  t2948 = 0.0216*t2936;
  t2962 = 0. + t2866 + t2948;
  t4510 = t1314*t4336;
  t4557 = t1191*t4421;
  t4569 = t4510 + t4557;
  t4619 = t1191*t4336;
  t4626 = -1.*t1314*t4421;
  t4641 = t4619 + t4626;
  t3210 = -0.0216*t2839;
  t3214 = -1.1135*t2936;
  t3224 = 0. + t3210 + t3214;
  t4665 = -1.*t2006*t4569;
  t4692 = t1785*t4641;
  t4716 = t4665 + t4692;
  t4742 = t1785*t4569;
  t4749 = t2006*t4641;
  t4776 = t4742 + t4749;
  t5225 = t300*t797*t200;
  t5291 = t681*t200*t337;
  t5299 = t5225 + t5291;
  t5314 = -1.*t681*t300*t200;
  t5316 = t797*t200*t337;
  t5350 = t5314 + t5316;
  t5411 = t1314*t5299;
  t5426 = t1191*t5350;
  t5433 = t5411 + t5426;
  t5449 = t1191*t5299;
  t5457 = -1.*t1314*t5350;
  t5462 = t5449 + t5457;
  t5488 = -1.*t2006*t5433;
  t5493 = t1785*t5462;
  t5495 = t5488 + t5493;
  t5525 = t1785*t5433;
  t5533 = t2006*t5462;
  t5542 = t5525 + t5533;
  t5901 = -1.*t353*t84*t300*t797;
  t5929 = -1.*t681*t353*t84*t337;
  t5953 = t5901 + t5929;
  t6023 = t681*t353*t84*t300;
  t6078 = -1.*t353*t84*t797*t337;
  t6100 = t6023 + t6078;
  t6135 = t1314*t5953;
  t6152 = t1191*t6100;
  t6162 = t6135 + t6152;
  t6176 = t1191*t5953;
  t6204 = -1.*t1314*t6100;
  t6215 = t6176 + t6204;
  t6220 = -1.*t2006*t6162;
  t6232 = t1785*t6215;
  t6243 = t6220 + t6232;
  t6289 = t1785*t6162;
  t6309 = t2006*t6215;
  t6325 = t6289 + t6309;
  t5741 = 0.049*t84;
  t5777 = 0.135*t200;
  t5784 = t5741 + t5777;
  t6522 = -1.*t84*t300*t797*t57;
  t6540 = -1.*t681*t84*t57*t337;
  t6546 = t6522 + t6540;
  t6557 = t681*t84*t300*t57;
  t6574 = -1.*t84*t797*t57*t337;
  t6581 = t6557 + t6574;
  t6585 = t1314*t6546;
  t6586 = t1191*t6581;
  t6589 = t6585 + t6586;
  t6612 = t1191*t6546;
  t6638 = -1.*t1314*t6581;
  t6658 = t6612 + t6638;
  t6681 = -1.*t2006*t6589;
  t6686 = t1785*t6658;
  t6724 = t6681 + t6686;
  t6767 = t1785*t6589;
  t6775 = t2006*t6658;
  t6800 = t6767 + t6775;
  t6999 = -1.*t84*t300*t797;
  t7019 = -1.*t681*t84*t337;
  t7024 = t6999 + t7019;
  t7035 = -1.*t681*t84*t300;
  t7051 = t84*t797*t337;
  t7058 = t7035 + t7051;
  t7065 = -1.*t1314*t7024;
  t7097 = t1191*t7058;
  t7099 = t7065 + t7097;
  t7115 = t1191*t7024;
  t7128 = t1314*t7058;
  t7131 = t7115 + t7128;
  t7216 = t2006*t7099;
  t7218 = t1785*t7131;
  t7221 = t7216 + t7218;
  t7253 = t1785*t7099;
  t7258 = -1.*t2006*t7131;
  t7282 = t7253 + t7258;
  t6968 = -0.09*t300;
  t6979 = -0.049*t337;
  t6980 = t6968 + t6979;
  t7410 = -1.*t353*t300*t200;
  t7438 = t57*t337;
  t7441 = t7410 + t7438;
  t7477 = t797*t7441;
  t7499 = t7477 + t4291;
  t7502 = t681*t7441;
  t7508 = -1.*t797*t4237;
  t7522 = t7502 + t7508;
  t7532 = -1.*t1314*t7499;
  t7544 = t1191*t7522;
  t7556 = t7532 + t7544;
  t7564 = t1191*t7499;
  t7574 = t1314*t7522;
  t7588 = t7564 + t7574;
  t7598 = t2006*t7556;
  t7613 = t1785*t7588;
  t7625 = t7598 + t7613;
  t7643 = t1785*t7556;
  t7659 = -1.*t2006*t7588;
  t7667 = t7643 + t7659;
  t7390 = 0.049*t300;
  t7398 = t7390 + t340;
  t7815 = t353*t300;
  t7844 = -1.*t57*t200*t337;
  t7905 = t7815 + t7844;
  t7936 = t797*t925;
  t7955 = t681*t7905;
  t7958 = t7936 + t7955;
  t7984 = -1.*t797*t7905;
  t7992 = t1552 + t7984;
  t8116 = -1.*t1314*t7958;
  t8130 = t1191*t7992;
  t8151 = t8116 + t8130;
  t8230 = t1191*t7958;
  t8248 = t1314*t7992;
  t8249 = t8230 + t8248;
  t8285 = t2006*t8151;
  t8323 = t1785*t8249;
  t8335 = t8285 + t8323;
  t8392 = t1785*t8151;
  t8413 = -1.*t2006*t8249;
  t8429 = t8392 + t8413;
  t7030 = t1550*t7024;
  t7062 = t1430*t7058;
  t7110 = t2523*t7099;
  t7166 = t2057*t7131;
  t7250 = t3224*t7221;
  t7289 = t2962*t7282;
  t7290 = -1.*t2936*t7221;
  t7314 = t2757*t7282;
  t7318 = t7290 + t7314;
  t7333 = -1.1312*t7318;
  t7336 = t2757*t7221;
  t7347 = t2936*t7282;
  t7357 = t7336 + t7347;
  t7381 = 0.0306*t7357;
  t8593 = -0.21*t681;
  t8596 = -0.049*t797;
  t8605 = t8593 + t8596;
  t8626 = 0.049*t681;
  t8645 = t8626 + t802;
  t8697 = -1.*t681*t4113;
  t8712 = t8697 + t7508;
  t8720 = -1.*t1314*t4336;
  t8723 = t1191*t8712;
  t8729 = t8720 + t8723;
  t8736 = t1314*t8712;
  t8743 = t4619 + t8736;
  t8754 = t2006*t8729;
  t8755 = t1785*t8743;
  t8756 = t8754 + t8755;
  t8831 = t1785*t8729;
  t8840 = -1.*t2006*t8743;
  t8850 = t8831 + t8840;
  t8940 = t300*t57*t200;
  t8942 = t353*t337;
  t8954 = t8940 + t8942;
  t8968 = -1.*t797*t8954;
  t8970 = t8968 + t7955;
  t8986 = -1.*t681*t8954;
  t8988 = t8986 + t7984;
  t8991 = -1.*t1314*t8970;
  t8992 = t1191*t8988;
  t8997 = t8991 + t8992;
  t9003 = t1191*t8970;
  t9008 = t1314*t8988;
  t9010 = t9003 + t9008;
  t9015 = t2006*t8997;
  t9018 = t1785*t9010;
  t9022 = t9015 + t9018;
  t9039 = t1785*t8997;
  t9040 = -1.*t2006*t9010;
  t9041 = t9039 + t9040;
  t9086 = t681*t84*t300;
  t9092 = -1.*t84*t797*t337;
  t9095 = t9086 + t9092;
  t9097 = -1.*t1191*t9095;
  t9098 = t7065 + t9097;
  t9100 = -1.*t1314*t9095;
  t9101 = t7115 + t9100;
  t9105 = t2006*t9098;
  t9108 = t1785*t9101;
  t9113 = t9105 + t9108;
  t9121 = t1785*t9098;
  t9123 = -1.*t2006*t9101;
  t9125 = t9121 + t9123;
  t9069 = 0.0016*t1191;
  t9073 = t9069 + t1536;
  t9081 = -0.2707*t1191;
  t9082 = -0.0016*t1314;
  t9085 = t9081 + t9082;
  t9157 = -1.*t1191*t4421;
  t9158 = t8720 + t9157;
  t9161 = t2006*t9158;
  t9162 = t9161 + t4692;
  t9164 = t1785*t9158;
  t9166 = -1.*t2006*t4641;
  t9168 = t9164 + t9166;
  t9207 = t681*t8954;
  t9213 = t797*t7905;
  t9214 = t9207 + t9213;
  t9217 = -1.*t1191*t9214;
  t9220 = t8991 + t9217;
  t9225 = -1.*t1314*t9214;
  t9226 = t9003 + t9225;
  t9234 = t2006*t9220;
  t9237 = t1785*t9226;
  t9240 = t9234 + t9237;
  t9243 = t1785*t9220;
  t9244 = -1.*t2006*t9226;
  t9245 = t9243 + t9244;
  t9285 = t1314*t7024;
  t9287 = t1191*t9095;
  t9289 = t9285 + t9287;
  t9303 = -1.*t2006*t9289;
  t9305 = t9303 + t9108;
  t9310 = -1.*t1785*t9289;
  t9311 = t9310 + t9123;
  t9275 = -0.7055*t1785;
  t9276 = 0.0184*t2006;
  t9280 = t9275 + t9276;
  t9295 = -0.0184*t1785;
  t9301 = t9295 + t2016;
  t9345 = -1.*t1785*t4569;
  t9346 = t9345 + t9166;
  t4983 = t2757*t4716;
  t9370 = t1314*t8970;
  t9371 = t1191*t9214;
  t9372 = t9370 + t9371;
  t9384 = -1.*t2006*t9372;
  t9389 = t9384 + t9237;
  t9393 = -1.*t1785*t9372;
  t9395 = t9393 + t9244;
  t9313 = -1.*t2936*t9305;
  t9424 = t1785*t9289;
  t9425 = t2006*t9101;
  t9426 = t9424 + t9425;
  t9324 = t2757*t9305;
  t9413 = 0.0216*t2757;
  t9414 = t9413 + t3214;
  t9418 = -1.1135*t2757;
  t9420 = -0.0216*t2936;
  t9422 = t9418 + t9420;
  t9349 = -1.*t2936*t4716;
  t5015 = -1.*t2936*t4776;
  t5025 = t4983 + t5015;
  t9397 = -1.*t2936*t9389;
  t9447 = t1785*t9372;
  t9448 = t2006*t9226;
  t9450 = t9447 + t9448;
  t9403 = t2757*t9389;

  p_output1(0)=0;
  p_output1(1)=t1042*t1150 + t1430*t1483 + t1550*t1695 + t2057*t2127 + t2523*t2608 + t2962*t3149 + t3224*t3302 + 0.0306*(t2936*t3149 + t2757*t3302) - 1.1312*(t2757*t3149 - 1.*t2936*t3302) - 1.*t353*t458 + 0.135*t57 - 1.*t215*t57 - 1.*t200*t342*t57 - 0.1305*t57*t84 + t893*t925;
  p_output1(2)=-0.135*t353 + t215*t353 + t200*t342*t353 + t1042*t4237 + t1430*t4336 + t1550*t4421 + t2057*t4569 + t2523*t4641 + t2962*t4716 + t3224*t4776 + 0.0306*(t2936*t4716 + t2757*t4776) - 1.1312*t5025 - 1.*t458*t57 + 0.1305*t353*t84 + t4113*t893;
  p_output1(3)=-0.049*t200 + t1042*t200*t337 - 1.*t200*t342 + t1430*t5299 + t1550*t5350 + t2057*t5433 + t2523*t5462 + t2962*t5495 + t3224*t5542 + 0.0306*(t2936*t5495 + t2757*t5542) - 1.1312*(t2757*t5495 - 1.*t2936*t5542) + 0.004500000000000004*t84 - 1.*t200*t300*t893;
  p_output1(4)=-0.1305*t200*t353 + t353*t5784 + t1430*t5953 + t1550*t6100 + t2057*t6162 + t2523*t6215 + t2962*t6243 + t3224*t6325 + 0.0306*(t2936*t6243 + t2757*t6325) - 1.1312*(t2757*t6243 - 1.*t2936*t6325) - 1.*t1042*t337*t353*t84 + t342*t353*t84 + t300*t353*t84*t893;
  p_output1(5)=-0.1305*t200*t57 + t57*t5784 + t1430*t6546 + t1550*t6581 + t2057*t6589 + t2523*t6658 + t2962*t6724 + t3224*t6800 + 0.0306*(t2936*t6724 + t2757*t6800) - 1.1312*(t2757*t6724 - 1.*t2936*t6800) - 1.*t1042*t337*t57*t84 + t342*t57*t84 + t300*t57*t84*t893;
  p_output1(6)=t7030 + t7062 + t7110 + t7166 + t7250 + t7289 + t7333 + t7381 - 1.*t1042*t300*t84 + t6980*t84 - 1.*t337*t84*t893;
  p_output1(7)=t200*t353*t6980 - 1.*t57*t7398 + t1042*t7441 + t1550*t7499 + t1430*t7522 + t2523*t7556 + t2057*t7588 + t3224*t7625 + t2962*t7667 - 1.1312*(-1.*t2936*t7625 + t2757*t7667) + 0.0306*(t2757*t7625 + t2936*t7667) + t4237*t893;
  p_output1(8)=t200*t57*t6980 + t353*t7398 + t1550*t7958 + t1430*t7992 + t2523*t8151 + t2057*t8249 + t3224*t8335 + t2962*t8429 - 1.1312*(-1.*t2936*t8335 + t2757*t8429) + 0.0306*(t2757*t8335 + t2936*t8429) + t7905*t893 + t1042*t925;
  p_output1(9)=t7030 + t7062 + t7110 + t7166 + t7250 + t7289 + t7333 + t7381 + t300*t84*t8605 - 1.*t337*t84*t8645;
  p_output1(10)=t1550*t4336 + t4113*t8605 + t4237*t8645 + t1430*t8712 + t2523*t8729 + t2057*t8743 + t3224*t8756 + t2962*t8850 - 1.1312*(-1.*t2936*t8756 + t2757*t8850) + 0.0306*(t2757*t8756 + t2936*t8850);
  p_output1(11)=t7905*t8645 + t8605*t8954 + t1550*t8970 + t1430*t8988 + t2523*t8997 + t2057*t9010 + t3224*t9022 + t2962*t9041 - 1.1312*(-1.*t2936*t9022 + t2757*t9041) + 0.0306*(t2757*t9022 + t2936*t9041);
  p_output1(12)=t7024*t9073 + t9085*t9095 + t2523*t9098 + t2057*t9101 + t3224*t9113 + t2962*t9125 - 1.1312*(-1.*t2936*t9113 + t2757*t9125) + 0.0306*(t2757*t9113 + t2936*t9125);
  p_output1(13)=t2057*t4641 + t4336*t9073 + t4421*t9085 + t2523*t9158 + t3224*t9162 + t2962*t9168 - 1.1312*(-1.*t2936*t9162 + t2757*t9168) + 0.0306*(t2757*t9162 + t2936*t9168);
  p_output1(14)=t8970*t9073 + t9085*t9214 + t2523*t9220 + t2057*t9226 + t3224*t9240 + t2962*t9245 - 1.1312*(-1.*t2936*t9240 + t2757*t9245) + 0.0306*(t2757*t9240 + t2936*t9245);
  p_output1(15)=t9280*t9289 + t9101*t9301 + t3224*t9305 + t2962*t9311 - 1.1312*(t2757*t9311 + t9313) + 0.0306*(t2936*t9311 + t9324);
  p_output1(16)=t3224*t4716 + t4569*t9280 + t4641*t9301 + t2962*t9346 + 0.0306*(t4983 + t2936*t9346) - 1.1312*(t2757*t9346 + t9349);
  p_output1(17)=t9226*t9301 + t9280*t9372 + t3224*t9389 + t2962*t9395 - 1.1312*(t2757*t9395 + t9397) + 0.0306*(t2936*t9395 + t9403);
  p_output1(18)=t9305*t9414 + t9422*t9426 - 1.1312*(t9313 - 1.*t2757*t9426) + 0.0306*(t9324 - 1.*t2936*t9426);
  p_output1(19)=0.0306*t5025 - 1.1312*(-1.*t2757*t4776 + t9349) + t4716*t9414 + t4776*t9422;
  p_output1(20)=t9389*t9414 + t9422*t9450 - 1.1312*(t9397 - 1.*t2757*t9450) + 0.0306*(t9403 - 1.*t2936*t9450);
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
}


       
void J_VectorNav_to_LeftToeBottom(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
