/*
 * Automatically Generated from Mathematica.
 * Fri 16 Feb 2018 12:15:50 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1342;
  double t2038;
  double t2013;
  double t2014;
  double t2039;
  double t120;
  double t199;
  double t210;
  double t768;
  double t1935;
  double t2016;
  double t2045;
  double t2053;
  double t2070;
  double t2094;
  double t2307;
  double t2328;
  double t81;
  double t2770;
  double t2878;
  double t2880;
  double t2924;
  double t3066;
  double t3115;
  double t3492;
  double t3584;
  double t3848;
  double t3861;
  double t4257;
  double t4475;
  double t4721;
  double t5024;
  double t5735;
  double t5742;
  double t8622;
  double t8784;
  double t8785;
  double t8788;
  double t8853;
  double t8857;
  double t8859;
  double t8863;
  double t8884;
  double t8886;
  double t8888;
  double t8908;
  double t8925;
  double t8926;
  double t8946;
  double t8948;
  double t8970;
  double t8974;
  double t8975;
  double t8976;
  double t8981;
  double t8995;
  double t8996;
  double t9001;
  double t9021;
  double t9029;
  double t9033;
  double t705;
  double t930;
  double t1222;
  double t1977;
  double t1988;
  double t2079;
  double t2081;
  double t2083;
  double t2087;
  double t2403;
  double t2605;
  double t2657;
  double t9077;
  double t9079;
  double t9081;
  double t9091;
  double t9095;
  double t9099;
  double t3402;
  double t3529;
  double t3538;
  double t9102;
  double t9107;
  double t9110;
  double t4113;
  double t4120;
  double t4136;
  double t7054;
  double t8771;
  double t8775;
  double t9115;
  double t9116;
  double t9122;
  double t9142;
  double t9145;
  double t9146;
  double t8802;
  double t8850;
  double t8852;
  double t8887;
  double t8891;
  double t8900;
  double t9158;
  double t9160;
  double t9162;
  double t9167;
  double t9168;
  double t9170;
  double t8940;
  double t8942;
  double t8944;
  double t8977;
  double t8984;
  double t8985;
  double t9172;
  double t9174;
  double t9179;
  double t9184;
  double t9185;
  double t9186;
  double t9009;
  double t9011;
  double t9013;
  double t9191;
  double t9194;
  double t9197;
  double t9200;
  double t9201;
  double t9203;
  double t9224;
  double t9225;
  double t9226;
  double t9229;
  double t9230;
  double t9233;
  double t9242;
  double t9243;
  double t9244;
  double t9246;
  double t9247;
  double t9249;
  double t9253;
  double t9255;
  double t9256;
  double t9259;
  double t9260;
  double t9262;
  double t9264;
  double t9265;
  double t9266;
  double t9268;
  double t9269;
  double t9270;
  double t9272;
  double t9273;
  double t9274;
  double t9289;
  double t9290;
  double t9291;
  double t9294;
  double t9295;
  double t9296;
  double t9302;
  double t9303;
  double t9304;
  double t9306;
  double t9307;
  double t9308;
  double t9310;
  double t9311;
  double t9312;
  double t9314;
  double t9315;
  double t9316;
  double t9318;
  double t9319;
  double t9320;
  double t9322;
  double t9323;
  double t9324;
  double t9326;
  double t9327;
  double t9328;
  double t9342;
  double t9343;
  double t9344;
  double t9346;
  double t9347;
  double t9348;
  double t9354;
  double t9355;
  double t9356;
  double t9358;
  double t9359;
  double t9360;
  double t9362;
  double t9363;
  double t9364;
  double t9366;
  double t9367;
  double t9368;
  double t9370;
  double t9371;
  double t9372;
  double t9374;
  double t9375;
  double t9376;
  double t9378;
  double t9379;
  double t9380;
  double t9392;
  double t9393;
  double t9394;
  double t9400;
  double t9401;
  double t9396;
  double t9397;
  double t9398;
  double t9405;
  double t9406;
  double t9407;
  double t9409;
  double t9410;
  double t9411;
  double t9413;
  double t9414;
  double t9415;
  double t9417;
  double t9418;
  double t9419;
  double t9421;
  double t9422;
  double t9423;
  double t9425;
  double t9426;
  double t9427;
  double t9438;
  double t9439;
  double t9440;
  double t9446;
  double t9447;
  double t9448;
  double t9443;
  double t9444;
  double t9452;
  double t9453;
  double t9454;
  double t9456;
  double t9457;
  double t9458;
  double t9460;
  double t9461;
  double t9462;
  double t9464;
  double t9465;
  double t9466;
  double t9468;
  double t9469;
  double t9470;
  double t9472;
  double t9473;
  double t9474;
  double t9491;
  double t9492;
  double t9493;
  double t9487;
  double t9488;
  double t9489;
  double t9497;
  double t9498;
  double t9499;
  double t9501;
  double t9502;
  double t9503;
  double t9505;
  double t9506;
  double t9507;
  double t9509;
  double t9510;
  double t9511;
  double t9513;
  double t9514;
  double t9515;
  double t9517;
  double t9518;
  double t9519;
  double t9532;
  double t9533;
  double t9538;
  double t9539;
  double t9540;
  double t9542;
  double t9543;
  double t9544;
  double t9546;
  double t9547;
  double t9548;
  double t9550;
  double t9551;
  double t9552;
  double t9554;
  double t9555;
  double t9556;
  double t9558;
  double t9559;
  double t9560;
  double t9572;
  double t9573;
  double t9574;
  double t9579;
  double t9580;
  double t9576;
  double t9577;
  double t9584;
  double t9585;
  double t9586;
  double t9588;
  double t9589;
  double t9590;
  double t9592;
  double t9593;
  double t9594;
  double t9596;
  double t9597;
  double t9598;
  double t9600;
  double t9601;
  double t9602;
  double t9604;
  double t9605;
  double t9606;
  double t9490;
  double t9494;
  double t9495;
  double t9496;
  double t9500;
  double t9504;
  double t9508;
  double t9512;
  double t9516;
  double t9520;
  double t9521;
  double t9522;
  double t9523;
  double t9524;
  double t9525;
  double t9526;
  double t9527;
  double t9528;
  double t9136;
  double t9137;
  double t9139;
  double t9634;
  double t9635;
  double t9636;
  double t9638;
  double t9639;
  double t9640;
  double t9642;
  double t9643;
  double t9644;
  double t9646;
  double t9647;
  double t9648;
  double t9620;
  double t9621;
  double t9622;
  double t9624;
  double t9625;
  double t9660;
  double t9661;
  double t9662;
  double t9664;
  double t9665;
  double t9666;
  double t9673;
  double t9674;
  double t9675;
  double t9677;
  double t9678;
  double t9679;
  double t9681;
  double t9682;
  double t9683;
  double t9685;
  double t9686;
  double t9687;
  double t9699;
  double t9700;
  double t9701;
  double t9703;
  double t9704;
  double t9705;
  double t9713;
  double t9714;
  double t9715;
  double t9717;
  double t9718;
  double t9719;
  double t9721;
  double t9722;
  double t9723;
  double t9725;
  double t9726;
  double t9727;
  double t9745;
  double t9746;
  double t9747;
  double t9750;
  double t9751;
  double t9753;
  double t9754;
  double t9755;
  double t9757;
  double t9758;
  double t9759;
  double t9761;
  double t9762;
  double t9763;
  double t9738;
  double t9739;
  double t9741;
  double t9742;
  double t9743;
  double t9775;
  double t9776;
  double t9777;
  double t9779;
  double t9780;
  double t9781;
  double t9783;
  double t9784;
  double t9785;
  double t9787;
  double t9788;
  double t9789;
  double t9791;
  double t9792;
  double t9793;
  double t9795;
  double t9796;
  double t9797;
  double t9799;
  double t9800;
  double t9801;
  double t9813;
  double t9814;
  double t9815;
  double t9817;
  double t9818;
  double t9819;
  double t9821;
  double t9822;
  double t9823;
  double t9825;
  double t9826;
  double t9827;
  double t9829;
  double t9830;
  double t9831;
  double t9833;
  double t9834;
  double t9835;
  double t9837;
  double t9838;
  double t9839;
  double t9858;
  double t9859;
  double t9861;
  double t9862;
  double t9863;
  double t9865;
  double t9866;
  double t9850;
  double t9851;
  double t9852;
  double t9854;
  double t9855;
  double t9877;
  double t9878;
  double t9879;
  double t9882;
  double t9883;
  double t9885;
  double t9886;
  double t9888;
  double t9889;
  double t9890;
  double t9892;
  double t9893;
  double t9894;
  double t9905;
  double t9906;
  double t9907;
  double t9910;
  double t9911;
  double t9913;
  double t9914;
  double t9916;
  double t9917;
  double t9918;
  double t9920;
  double t9921;
  double t9922;
  double t9940;
  double t9941;
  double t9207;
  double t9933;
  double t9934;
  double t9936;
  double t9937;
  double t9938;
  double t9953;
  double t9954;
  double t9955;
  double t9957;
  double t9958;
  double t9960;
  double t9961;
  double t9973;
  double t9974;
  double t9975;
  double t9977;
  double t9978;
  double t9980;
  double t9981;
  double t9206;
  double t9208;
  double t9948;
  double t9992;
  double t9993;
  double t9994;
  double t9996;
  double t9997;
  double t10004;
  double t10005;
  double t10006;
  double t9964;
  double t9968;
  double t10016;
  double t10017;
  double t10018;
  double t9984;
  double t9988;
  t1342 = Sin(var1[3]);
  t2038 = Cos(var1[3]);
  t2013 = Cos(var1[5]);
  t2014 = Sin(var1[4]);
  t2039 = Sin(var1[5]);
  t120 = Cos(var1[14]);
  t199 = -1.*t120;
  t210 = 1. + t199;
  t768 = Sin(var1[14]);
  t1935 = Sin(var1[13]);
  t2016 = -1.*t2013*t1342*t2014;
  t2045 = t2038*t2039;
  t2053 = t2016 + t2045;
  t2070 = Cos(var1[13]);
  t2094 = -1.*t2038*t2013;
  t2307 = -1.*t1342*t2014*t2039;
  t2328 = t2094 + t2307;
  t81 = Cos(var1[4]);
  t2770 = t1935*t2053;
  t2878 = t2070*t2328;
  t2880 = t2770 + t2878;
  t2924 = Cos(var1[15]);
  t3066 = -1.*t2924;
  t3115 = 1. + t3066;
  t3492 = Sin(var1[15]);
  t3584 = t2070*t2053;
  t3848 = -1.*t1935*t2328;
  t3861 = t3584 + t3848;
  t4257 = -1.*t120*t81*t1342;
  t4475 = t768*t2880;
  t4721 = t4257 + t4475;
  t5024 = Cos(var1[16]);
  t5735 = -1.*t5024;
  t5742 = 1. + t5735;
  t8622 = Sin(var1[16]);
  t8784 = t3492*t3861;
  t8785 = t2924*t4721;
  t8788 = t8784 + t8785;
  t8853 = t2924*t3861;
  t8857 = -1.*t3492*t4721;
  t8859 = t8853 + t8857;
  t8863 = Cos(var1[17]);
  t8884 = -1.*t8863;
  t8886 = 1. + t8884;
  t8888 = Sin(var1[17]);
  t8908 = -1.*t8622*t8788;
  t8925 = t5024*t8859;
  t8926 = t8908 + t8925;
  t8946 = t5024*t8788;
  t8948 = t8622*t8859;
  t8970 = t8946 + t8948;
  t8974 = Cos(var1[18]);
  t8975 = -1.*t8974;
  t8976 = 1. + t8975;
  t8981 = Sin(var1[18]);
  t8995 = t8888*t8926;
  t8996 = t8863*t8970;
  t9001 = t8995 + t8996;
  t9021 = t8863*t8926;
  t9029 = -1.*t8888*t8970;
  t9033 = t9021 + t9029;
  t705 = -0.049*t210;
  t930 = -0.135*t768;
  t1222 = 0. + t705 + t930;
  t1977 = 0.135*t1935;
  t1988 = 0. + t1977;
  t2079 = -1.*t2070;
  t2081 = 1. + t2079;
  t2083 = -0.135*t2081;
  t2087 = 0. + t2083;
  t2403 = -0.135*t210;
  t2605 = 0.049*t768;
  t2657 = 0. + t2403 + t2605;
  t9077 = t2038*t2013*t2014;
  t9079 = t1342*t2039;
  t9081 = t9077 + t9079;
  t9091 = -1.*t2013*t1342;
  t9095 = t2038*t2014*t2039;
  t9099 = t9091 + t9095;
  t3402 = -0.09*t3115;
  t3529 = 0.049*t3492;
  t3538 = 0. + t3402 + t3529;
  t9102 = t1935*t9081;
  t9107 = t2070*t9099;
  t9110 = t9102 + t9107;
  t4113 = -0.049*t3115;
  t4120 = -0.09*t3492;
  t4136 = 0. + t4113 + t4120;
  t7054 = -0.049*t5742;
  t8771 = -0.21*t8622;
  t8775 = 0. + t7054 + t8771;
  t9115 = t2070*t9081;
  t9116 = -1.*t1935*t9099;
  t9122 = t9115 + t9116;
  t9142 = t120*t2038*t81;
  t9145 = t768*t9110;
  t9146 = t9142 + t9145;
  t8802 = -0.21*t5742;
  t8850 = 0.049*t8622;
  t8852 = 0. + t8802 + t8850;
  t8887 = -0.2707*t8886;
  t8891 = 0.0016*t8888;
  t8900 = 0. + t8887 + t8891;
  t9158 = t3492*t9122;
  t9160 = t2924*t9146;
  t9162 = t9158 + t9160;
  t9167 = t2924*t9122;
  t9168 = -1.*t3492*t9146;
  t9170 = t9167 + t9168;
  t8940 = -0.0016*t8886;
  t8942 = -0.2707*t8888;
  t8944 = 0. + t8940 + t8942;
  t8977 = 0.0184*t8976;
  t8984 = -0.7055*t8981;
  t8985 = 0. + t8977 + t8984;
  t9172 = -1.*t8622*t9162;
  t9174 = t5024*t9170;
  t9179 = t9172 + t9174;
  t9184 = t5024*t9162;
  t9185 = t8622*t9170;
  t9186 = t9184 + t9185;
  t9009 = -0.7055*t8976;
  t9011 = -0.0184*t8981;
  t9013 = 0. + t9009 + t9011;
  t9191 = t8888*t9179;
  t9194 = t8863*t9186;
  t9197 = t9191 + t9194;
  t9200 = t8863*t9179;
  t9201 = -1.*t8888*t9186;
  t9203 = t9200 + t9201;
  t9224 = t2038*t81*t2013*t1935;
  t9225 = t2070*t2038*t81*t2039;
  t9226 = t9224 + t9225;
  t9229 = t2070*t2038*t81*t2013;
  t9230 = -1.*t2038*t81*t1935*t2039;
  t9233 = t9229 + t9230;
  t9242 = -1.*t120*t2038*t2014;
  t9243 = t768*t9226;
  t9244 = t9242 + t9243;
  t9246 = t3492*t9233;
  t9247 = t2924*t9244;
  t9249 = t9246 + t9247;
  t9253 = t2924*t9233;
  t9255 = -1.*t3492*t9244;
  t9256 = t9253 + t9255;
  t9259 = -1.*t8622*t9249;
  t9260 = t5024*t9256;
  t9262 = t9259 + t9260;
  t9264 = t5024*t9249;
  t9265 = t8622*t9256;
  t9266 = t9264 + t9265;
  t9268 = t8888*t9262;
  t9269 = t8863*t9266;
  t9270 = t9268 + t9269;
  t9272 = t8863*t9262;
  t9273 = -1.*t8888*t9266;
  t9274 = t9272 + t9273;
  t9289 = t81*t2013*t1935*t1342;
  t9290 = t2070*t81*t1342*t2039;
  t9291 = t9289 + t9290;
  t9294 = t2070*t81*t2013*t1342;
  t9295 = -1.*t81*t1935*t1342*t2039;
  t9296 = t9294 + t9295;
  t9302 = -1.*t120*t1342*t2014;
  t9303 = t768*t9291;
  t9304 = t9302 + t9303;
  t9306 = t3492*t9296;
  t9307 = t2924*t9304;
  t9308 = t9306 + t9307;
  t9310 = t2924*t9296;
  t9311 = -1.*t3492*t9304;
  t9312 = t9310 + t9311;
  t9314 = -1.*t8622*t9308;
  t9315 = t5024*t9312;
  t9316 = t9314 + t9315;
  t9318 = t5024*t9308;
  t9319 = t8622*t9312;
  t9320 = t9318 + t9319;
  t9322 = t8888*t9316;
  t9323 = t8863*t9320;
  t9324 = t9322 + t9323;
  t9326 = t8863*t9316;
  t9327 = -1.*t8888*t9320;
  t9328 = t9326 + t9327;
  t9342 = -1.*t2013*t1935*t2014;
  t9343 = -1.*t2070*t2014*t2039;
  t9344 = t9342 + t9343;
  t9346 = -1.*t2070*t2013*t2014;
  t9347 = t1935*t2014*t2039;
  t9348 = t9346 + t9347;
  t9354 = -1.*t120*t81;
  t9355 = t768*t9344;
  t9356 = t9354 + t9355;
  t9358 = t3492*t9348;
  t9359 = t2924*t9356;
  t9360 = t9358 + t9359;
  t9362 = t2924*t9348;
  t9363 = -1.*t3492*t9356;
  t9364 = t9362 + t9363;
  t9366 = -1.*t8622*t9360;
  t9367 = t5024*t9364;
  t9368 = t9366 + t9367;
  t9370 = t5024*t9360;
  t9371 = t8622*t9364;
  t9372 = t9370 + t9371;
  t9374 = t8888*t9368;
  t9375 = t8863*t9372;
  t9376 = t9374 + t9375;
  t9378 = t8863*t9368;
  t9379 = -1.*t8888*t9372;
  t9380 = t9378 + t9379;
  t9392 = t2013*t1342;
  t9393 = -1.*t2038*t2014*t2039;
  t9394 = t9392 + t9393;
  t9400 = t1935*t9394;
  t9401 = t9115 + t9400;
  t9396 = -1.*t1935*t9081;
  t9397 = t2070*t9394;
  t9398 = t9396 + t9397;
  t9405 = t3492*t9398;
  t9406 = t2924*t768*t9401;
  t9407 = t9405 + t9406;
  t9409 = t2924*t9398;
  t9410 = -1.*t768*t3492*t9401;
  t9411 = t9409 + t9410;
  t9413 = -1.*t8622*t9407;
  t9414 = t5024*t9411;
  t9415 = t9413 + t9414;
  t9417 = t5024*t9407;
  t9418 = t8622*t9411;
  t9419 = t9417 + t9418;
  t9421 = t8888*t9415;
  t9422 = t8863*t9419;
  t9423 = t9421 + t9422;
  t9425 = t8863*t9415;
  t9426 = -1.*t8888*t9419;
  t9427 = t9425 + t9426;
  t9438 = t2013*t1342*t2014;
  t9439 = -1.*t2038*t2039;
  t9440 = t9438 + t9439;
  t9446 = t2070*t9440;
  t9447 = t1935*t2328;
  t9448 = t9446 + t9447;
  t9443 = -1.*t1935*t9440;
  t9444 = t9443 + t2878;
  t9452 = t3492*t9444;
  t9453 = t2924*t768*t9448;
  t9454 = t9452 + t9453;
  t9456 = t2924*t9444;
  t9457 = -1.*t768*t3492*t9448;
  t9458 = t9456 + t9457;
  t9460 = -1.*t8622*t9454;
  t9461 = t5024*t9458;
  t9462 = t9460 + t9461;
  t9464 = t5024*t9454;
  t9465 = t8622*t9458;
  t9466 = t9464 + t9465;
  t9468 = t8888*t9462;
  t9469 = t8863*t9466;
  t9470 = t9468 + t9469;
  t9472 = t8863*t9462;
  t9473 = -1.*t8888*t9466;
  t9474 = t9472 + t9473;
  t9491 = t2070*t81*t2013;
  t9492 = -1.*t81*t1935*t2039;
  t9493 = t9491 + t9492;
  t9487 = -1.*t81*t2013*t1935;
  t9488 = -1.*t2070*t81*t2039;
  t9489 = t9487 + t9488;
  t9497 = t3492*t9489;
  t9498 = t2924*t768*t9493;
  t9499 = t9497 + t9498;
  t9501 = t2924*t9489;
  t9502 = -1.*t768*t3492*t9493;
  t9503 = t9501 + t9502;
  t9505 = -1.*t8622*t9499;
  t9506 = t5024*t9503;
  t9507 = t9505 + t9506;
  t9509 = t5024*t9499;
  t9510 = t8622*t9503;
  t9511 = t9509 + t9510;
  t9513 = t8888*t9507;
  t9514 = t8863*t9511;
  t9515 = t9513 + t9514;
  t9517 = t8863*t9507;
  t9518 = -1.*t8888*t9511;
  t9519 = t9517 + t9518;
  t9532 = -1.*t2070*t9099;
  t9533 = t9396 + t9532;
  t9538 = t3492*t9533;
  t9539 = t2924*t768*t9122;
  t9540 = t9538 + t9539;
  t9542 = t2924*t9533;
  t9543 = -1.*t768*t3492*t9122;
  t9544 = t9542 + t9543;
  t9546 = -1.*t8622*t9540;
  t9547 = t5024*t9544;
  t9548 = t9546 + t9547;
  t9550 = t5024*t9540;
  t9551 = t8622*t9544;
  t9552 = t9550 + t9551;
  t9554 = t8888*t9548;
  t9555 = t8863*t9552;
  t9556 = t9554 + t9555;
  t9558 = t8863*t9548;
  t9559 = -1.*t8888*t9552;
  t9560 = t9558 + t9559;
  t9572 = t2038*t2013;
  t9573 = t1342*t2014*t2039;
  t9574 = t9572 + t9573;
  t9579 = -1.*t1935*t9574;
  t9580 = t9446 + t9579;
  t9576 = -1.*t2070*t9574;
  t9577 = t9443 + t9576;
  t9584 = t3492*t9577;
  t9585 = t2924*t768*t9580;
  t9586 = t9584 + t9585;
  t9588 = t2924*t9577;
  t9589 = -1.*t768*t3492*t9580;
  t9590 = t9588 + t9589;
  t9592 = -1.*t8622*t9586;
  t9593 = t5024*t9590;
  t9594 = t9592 + t9593;
  t9596 = t5024*t9586;
  t9597 = t8622*t9590;
  t9598 = t9596 + t9597;
  t9600 = t8888*t9594;
  t9601 = t8863*t9598;
  t9602 = t9600 + t9601;
  t9604 = t8863*t9594;
  t9605 = -1.*t8888*t9598;
  t9606 = t9604 + t9605;
  t9490 = t3538*t9489;
  t9494 = -0.1305*t120*t9493;
  t9495 = t2657*t9493;
  t9496 = t768*t4136*t9493;
  t9500 = t8775*t9499;
  t9504 = t8852*t9503;
  t9508 = t8900*t9507;
  t9512 = t8944*t9511;
  t9516 = t8985*t9515;
  t9520 = t9013*t9519;
  t9521 = -1.*t8981*t9515;
  t9522 = t8974*t9519;
  t9523 = t9521 + t9522;
  t9524 = -0.7055*t9523;
  t9525 = t8974*t9515;
  t9526 = t8981*t9519;
  t9527 = t9525 + t9526;
  t9528 = 0.0184*t9527;
  t9136 = -1.*t2038*t81*t768;
  t9137 = t120*t9110;
  t9139 = t9136 + t9137;
  t9634 = -1.*t5024*t3492*t9139;
  t9635 = -1.*t2924*t8622*t9139;
  t9636 = t9634 + t9635;
  t9638 = t2924*t5024*t9139;
  t9639 = -1.*t3492*t8622*t9139;
  t9640 = t9638 + t9639;
  t9642 = t8888*t9636;
  t9643 = t8863*t9640;
  t9644 = t9642 + t9643;
  t9646 = t8863*t9636;
  t9647 = -1.*t8888*t9640;
  t9648 = t9646 + t9647;
  t9620 = -0.135*t120;
  t9621 = -0.049*t768;
  t9622 = t9620 + t9621;
  t9624 = 0.049*t120;
  t9625 = t9624 + t930;
  t9660 = t1935*t9440;
  t9661 = t2070*t9574;
  t9662 = t9660 + t9661;
  t9664 = -1.*t81*t768*t1342;
  t9665 = t120*t9662;
  t9666 = t9664 + t9665;
  t9673 = -1.*t5024*t3492*t9666;
  t9674 = -1.*t2924*t8622*t9666;
  t9675 = t9673 + t9674;
  t9677 = t2924*t5024*t9666;
  t9678 = -1.*t3492*t8622*t9666;
  t9679 = t9677 + t9678;
  t9681 = t8888*t9675;
  t9682 = t8863*t9679;
  t9683 = t9681 + t9682;
  t9685 = t8863*t9675;
  t9686 = -1.*t8888*t9679;
  t9687 = t9685 + t9686;
  t9699 = t81*t2013*t1935;
  t9700 = t2070*t81*t2039;
  t9701 = t9699 + t9700;
  t9703 = t768*t2014;
  t9704 = t120*t9701;
  t9705 = t9703 + t9704;
  t9713 = -1.*t5024*t3492*t9705;
  t9714 = -1.*t2924*t8622*t9705;
  t9715 = t9713 + t9714;
  t9717 = t2924*t5024*t9705;
  t9718 = -1.*t3492*t8622*t9705;
  t9719 = t9717 + t9718;
  t9721 = t8888*t9715;
  t9722 = t8863*t9719;
  t9723 = t9721 + t9722;
  t9725 = t8863*t9715;
  t9726 = -1.*t8888*t9719;
  t9727 = t9725 + t9726;
  t9745 = -1.*t3492*t9122;
  t9746 = -1.*t2924*t9146;
  t9747 = t9745 + t9746;
  t9750 = t8622*t9747;
  t9751 = t9750 + t9174;
  t9753 = t5024*t9747;
  t9754 = -1.*t8622*t9170;
  t9755 = t9753 + t9754;
  t9757 = -1.*t8888*t9751;
  t9758 = t8863*t9755;
  t9759 = t9757 + t9758;
  t9761 = t8863*t9751;
  t9762 = t8888*t9755;
  t9763 = t9761 + t9762;
  t9738 = 0.049*t2924;
  t9739 = t9738 + t4120;
  t9741 = -0.09*t2924;
  t9742 = -0.049*t3492;
  t9743 = t9741 + t9742;
  t9775 = t120*t81*t1342;
  t9776 = t768*t9662;
  t9777 = t9775 + t9776;
  t9779 = -1.*t3492*t9580;
  t9780 = -1.*t2924*t9777;
  t9781 = t9779 + t9780;
  t9783 = t2924*t9580;
  t9784 = -1.*t3492*t9777;
  t9785 = t9783 + t9784;
  t9787 = t8622*t9781;
  t9788 = t5024*t9785;
  t9789 = t9787 + t9788;
  t9791 = t5024*t9781;
  t9792 = -1.*t8622*t9785;
  t9793 = t9791 + t9792;
  t9795 = -1.*t8888*t9789;
  t9796 = t8863*t9793;
  t9797 = t9795 + t9796;
  t9799 = t8863*t9789;
  t9800 = t8888*t9793;
  t9801 = t9799 + t9800;
  t9813 = -1.*t120*t2014;
  t9814 = t768*t9701;
  t9815 = t9813 + t9814;
  t9817 = -1.*t3492*t9493;
  t9818 = -1.*t2924*t9815;
  t9819 = t9817 + t9818;
  t9821 = t2924*t9493;
  t9822 = -1.*t3492*t9815;
  t9823 = t9821 + t9822;
  t9825 = t8622*t9819;
  t9826 = t5024*t9823;
  t9827 = t9825 + t9826;
  t9829 = t5024*t9819;
  t9830 = -1.*t8622*t9823;
  t9831 = t9829 + t9830;
  t9833 = -1.*t8888*t9827;
  t9834 = t8863*t9831;
  t9835 = t9833 + t9834;
  t9837 = t8863*t9827;
  t9838 = t8888*t9831;
  t9839 = t9837 + t9838;
  t9858 = -1.*t5024*t9162;
  t9859 = t9858 + t9754;
  t9861 = -1.*t8888*t9179;
  t9862 = t8863*t9859;
  t9863 = t9861 + t9862;
  t9865 = t8888*t9859;
  t9866 = t9200 + t9865;
  t9850 = -0.21*t5024;
  t9851 = -0.049*t8622;
  t9852 = t9850 + t9851;
  t9854 = 0.049*t5024;
  t9855 = t9854 + t8771;
  t9877 = t3492*t9580;
  t9878 = t2924*t9777;
  t9879 = t9877 + t9878;
  t9882 = -1.*t8622*t9879;
  t9883 = t9882 + t9788;
  t9885 = -1.*t5024*t9879;
  t9886 = t9885 + t9792;
  t9888 = -1.*t8888*t9883;
  t9889 = t8863*t9886;
  t9890 = t9888 + t9889;
  t9892 = t8863*t9883;
  t9893 = t8888*t9886;
  t9894 = t9892 + t9893;
  t9905 = t3492*t9493;
  t9906 = t2924*t9815;
  t9907 = t9905 + t9906;
  t9910 = -1.*t8622*t9907;
  t9911 = t9910 + t9826;
  t9913 = -1.*t5024*t9907;
  t9914 = t9913 + t9830;
  t9916 = -1.*t8888*t9911;
  t9917 = t8863*t9914;
  t9918 = t9916 + t9917;
  t9920 = t8863*t9911;
  t9921 = t8888*t9914;
  t9922 = t9920 + t9921;
  t9940 = -1.*t8863*t9186;
  t9941 = t9861 + t9940;
  t9207 = t8974*t9203;
  t9933 = 0.0016*t8863;
  t9934 = t9933 + t8942;
  t9936 = -0.2707*t8863;
  t9937 = -0.0016*t8888;
  t9938 = t9936 + t9937;
  t9953 = t5024*t9879;
  t9954 = t8622*t9785;
  t9955 = t9953 + t9954;
  t9957 = -1.*t8863*t9955;
  t9958 = t9888 + t9957;
  t9960 = -1.*t8888*t9955;
  t9961 = t9892 + t9960;
  t9973 = t5024*t9907;
  t9974 = t8622*t9823;
  t9975 = t9973 + t9974;
  t9977 = -1.*t8863*t9975;
  t9978 = t9916 + t9977;
  t9980 = -1.*t8888*t9975;
  t9981 = t9920 + t9980;
  t9206 = -1.*t8981*t9197;
  t9208 = t9206 + t9207;
  t9948 = -1.*t8981*t9203;
  t9992 = -0.7055*t8974;
  t9993 = 0.0184*t8981;
  t9994 = t9992 + t9993;
  t9996 = -0.0184*t8974;
  t9997 = t9996 + t8984;
  t10004 = t8888*t9883;
  t10005 = t8863*t9955;
  t10006 = t10004 + t10005;
  t9964 = t8974*t9961;
  t9968 = -1.*t8981*t9961;
  t10016 = t8888*t9911;
  t10017 = t8863*t9975;
  t10018 = t10016 + t10017;
  t9984 = t8974*t9981;
  t9988 = -1.*t8981*t9981;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=t1988*t2053 + t2087*t2328 + t2657*t2880 + t3538*t3861 + t4136*t4721 - 1.*t1222*t1342*t81 - 0.1305*(t120*t2880 + t1342*t768*t81) + t8775*t8788 + t8852*t8859 + t8900*t8926 + t8944*t8970 + t8985*t9001 + t9013*t9033 - 0.7055*(-1.*t8981*t9001 + t8974*t9033) + 0.0184*(t8974*t9001 + t8981*t9033);
  p_output1[10]=t1222*t2038*t81 + t1988*t9081 + t2087*t9099 + t2657*t9110 + t3538*t9122 - 0.1305*t9139 + t4136*t9146 + t8775*t9162 + t8852*t9170 + t8900*t9179 + t8944*t9186 + t8985*t9197 + t9013*t9203 + 0.0184*(t8974*t9197 + t8981*t9203) - 0.7055*t9208;
  p_output1[11]=0;
  p_output1[12]=-1.*t1222*t2014*t2038 + t1988*t2013*t2038*t81 + t2038*t2039*t2087*t81 + t2657*t9226 - 0.1305*(t2014*t2038*t768 + t120*t9226) + t3538*t9233 + t4136*t9244 + t8775*t9249 + t8852*t9256 + t8900*t9262 + t8944*t9266 + t8985*t9270 + t9013*t9274 - 0.7055*(-1.*t8981*t9270 + t8974*t9274) + 0.0184*(t8974*t9270 + t8981*t9274);
  p_output1[13]=-1.*t1222*t1342*t2014 + t1342*t1988*t2013*t81 + t1342*t2039*t2087*t81 + t2657*t9291 - 0.1305*(t1342*t2014*t768 + t120*t9291) + t3538*t9296 + t4136*t9304 + t8775*t9308 + t8852*t9312 + t8900*t9316 + t8944*t9320 + t8985*t9324 + t9013*t9328 - 0.7055*(-1.*t8981*t9324 + t8974*t9328) + 0.0184*(t8974*t9324 + t8981*t9328);
  p_output1[14]=-1.*t1988*t2013*t2014 - 1.*t2014*t2039*t2087 - 1.*t1222*t81 + t2657*t9344 - 0.1305*(t768*t81 + t120*t9344) + t3538*t9348 + t4136*t9356 + t8775*t9360 + t8852*t9364 + t8900*t9368 + t8944*t9372 + t8985*t9376 + t9013*t9380 - 0.7055*(-1.*t8981*t9376 + t8974*t9380) + 0.0184*(t8974*t9376 + t8981*t9380);
  p_output1[15]=t2087*t9081 + t1988*t9394 + t3538*t9398 - 0.1305*t120*t9401 + t2657*t9401 + t4136*t768*t9401 + t8775*t9407 + t8852*t9411 + t8900*t9415 + t8944*t9419 + t8985*t9423 + t9013*t9427 - 0.7055*(-1.*t8981*t9423 + t8974*t9427) + 0.0184*(t8974*t9423 + t8981*t9427);
  p_output1[16]=t1988*t2328 + t2087*t9440 + t3538*t9444 - 0.1305*t120*t9448 + t2657*t9448 + t4136*t768*t9448 + t8775*t9454 + t8852*t9458 + t8900*t9462 + t8944*t9466 + t8985*t9470 + t9013*t9474 - 0.7055*(-1.*t8981*t9470 + t8974*t9474) + 0.0184*(t8974*t9470 + t8981*t9474);
  p_output1[17]=-1.*t1988*t2039*t81 + t2013*t2087*t81 + t9490 + t9494 + t9495 + t9496 + t9500 + t9504 + t9508 + t9512 + t9516 + t9520 + t9524 + t9528;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0.135*t2070*t9081 - 0.135*t1935*t9099 - 0.1305*t120*t9122 + t2657*t9122 + t4136*t768*t9122 + t3538*t9533 + t8775*t9540 + t8852*t9544 + t8900*t9548 + t8944*t9552 + t8985*t9556 + t9013*t9560 - 0.7055*(-1.*t8981*t9556 + t8974*t9560) + 0.0184*(t8974*t9556 + t8981*t9560);
  p_output1[40]=0.135*t2070*t9440 - 0.135*t1935*t9574 + t3538*t9577 - 0.1305*t120*t9580 + t2657*t9580 + t4136*t768*t9580 + t8775*t9586 + t8852*t9590 + t8900*t9594 + t8944*t9598 + t8985*t9602 + t9013*t9606 - 0.7055*(-1.*t8981*t9602 + t8974*t9606) + 0.0184*(t8974*t9602 + t8981*t9606);
  p_output1[41]=-0.135*t1935*t2039*t81 + 0.135*t2013*t2070*t81 + t9490 + t9494 + t9495 + t9496 + t9500 + t9504 + t9508 + t9512 + t9516 + t9520 + t9524 + t9528;
  p_output1[42]=-0.1305*(-1.*t120*t2038*t81 - 1.*t768*t9110) + t4136*t9139 + t2924*t8775*t9139 - 1.*t3492*t8852*t9139 + t2038*t81*t9622 + t9110*t9625 + t8900*t9636 + t8944*t9640 + t8985*t9644 + t9013*t9648 - 0.7055*(-1.*t8981*t9644 + t8974*t9648) + 0.0184*(t8974*t9644 + t8981*t9648);
  p_output1[43]=t1342*t81*t9622 + t9625*t9662 - 0.1305*(t4257 - 1.*t768*t9662) + t4136*t9666 + t2924*t8775*t9666 - 1.*t3492*t8852*t9666 + t8900*t9675 + t8944*t9679 + t8985*t9683 + t9013*t9687 - 0.7055*(-1.*t8981*t9683 + t8974*t9687) + 0.0184*(t8974*t9683 + t8981*t9687);
  p_output1[44]=-1.*t2014*t9622 + t9625*t9701 - 0.1305*(t120*t2014 - 1.*t768*t9701) + t4136*t9705 + t2924*t8775*t9705 - 1.*t3492*t8852*t9705 + t8900*t9715 + t8944*t9719 + t8985*t9723 + t9013*t9727 - 0.7055*(-1.*t8981*t9723 + t8974*t9727) + 0.0184*(t8974*t9723 + t8981*t9727);
  p_output1[45]=t8775*t9170 + t9122*t9739 + t9146*t9743 + t8852*t9747 + t8944*t9751 + t8900*t9755 + t9013*t9759 + t8985*t9763 + 0.0184*(t8981*t9759 + t8974*t9763) - 0.7055*(t8974*t9759 - 1.*t8981*t9763);
  p_output1[46]=t9580*t9739 + t9743*t9777 + t8852*t9781 + t8775*t9785 + t8944*t9789 + t8900*t9793 + t9013*t9797 + t8985*t9801 + 0.0184*(t8981*t9797 + t8974*t9801) - 0.7055*(t8974*t9797 - 1.*t8981*t9801);
  p_output1[47]=t9493*t9739 + t9743*t9815 + t8852*t9819 + t8775*t9823 + t8944*t9827 + t8900*t9831 + t9013*t9835 + t8985*t9839 + 0.0184*(t8981*t9835 + t8974*t9839) - 0.7055*(t8974*t9835 - 1.*t8981*t9839);
  p_output1[48]=t8944*t9179 + t9162*t9852 + t9170*t9855 + t8900*t9859 + t9013*t9863 + t8985*t9866 + 0.0184*(t8981*t9863 + t8974*t9866) - 0.7055*(t8974*t9863 - 1.*t8981*t9866);
  p_output1[49]=t9785*t9855 + t9852*t9879 + t8944*t9883 + t8900*t9886 + t9013*t9890 + t8985*t9894 + 0.0184*(t8981*t9890 + t8974*t9894) - 0.7055*(t8974*t9890 - 1.*t8981*t9894);
  p_output1[50]=t9823*t9855 + t9852*t9907 + t8944*t9911 + t8900*t9914 + t9013*t9918 + t8985*t9922 + 0.0184*(t8981*t9918 + t8974*t9922) - 0.7055*(t8974*t9918 - 1.*t8981*t9922);
  p_output1[51]=t8985*t9203 + t9179*t9934 + t9186*t9938 + t9013*t9941 + 0.0184*(t9207 + t8981*t9941) - 0.7055*(t8974*t9941 + t9948);
  p_output1[52]=t9883*t9934 + t9938*t9955 + t9013*t9958 + t8985*t9961 + 0.0184*(t8981*t9958 + t9964) - 0.7055*(t8974*t9958 + t9968);
  p_output1[53]=t9911*t9934 + t9938*t9975 + t9013*t9978 + t8985*t9981 + 0.0184*(t8981*t9978 + t9984) - 0.7055*(t8974*t9978 + t9988);
  p_output1[54]=0.0184*t9208 - 0.7055*(-1.*t8974*t9197 + t9948) + t9197*t9994 + t9203*t9997;
  p_output1[55]=0.0184*(-1.*t10006*t8981 + t9964) - 0.7055*(-1.*t10006*t8974 + t9968) + t10006*t9994 + t9961*t9997;
  p_output1[56]=0.0184*(-1.*t10018*t8981 + t9984) - 0.7055*(-1.*t10018*t8974 + t9988) + t10018*t9994 + t9981*t9997;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_ankle_joint_right_mex.hh"

namespace SymExpression
{

void J_ankle_joint_right_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
