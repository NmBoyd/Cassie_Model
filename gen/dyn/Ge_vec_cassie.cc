/*
 * Automatically Generated from Mathematica.
 * Tue 17 Oct 2017 12:35:46 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3958;
  double t32479;
  double t33026;
  double t33264;
  double t33285;
  double t33317;
  double t37630;
  double t36067;
  double t36241;
  double t36491;
  double t35585;
  double t37645;
  double t37719;
  double t38035;
  double t33266;
  double t33288;
  double t33310;
  double t35564;
  double t35636;
  double t35798;
  double t37232;
  double t38201;
  double t38219;
  double t38708;
  double t39049;
  double t42866;
  double t42867;
  double t42868;
  double t42928;
  double t39577;
  double t41031;
  double t41032;
  double t42924;
  double t42932;
  double t42937;
  double t42941;
  double t42949;
  double t43134;
  double t43135;
  double t43136;
  double t43167;
  double t43168;
  double t43169;
  double t43187;
  double t43188;
  double t43189;
  double t43201;
  double t43171;
  double t43174;
  double t43180;
  double t43200;
  double t43205;
  double t43206;
  double t43207;
  double t43209;
  double t43210;
  double t43212;
  double t43213;
  double t43215;
  double t43222;
  double t43223;
  double t43272;
  double t43286;
  double t43462;
  double t43495;
  double t43225;
  double t43226;
  double t43232;
  double t43494;
  double t43498;
  double t43499;
  double t43500;
  double t43501;
  double t43504;
  double t43508;
  double t43511;
  double t43539;
  double t43568;
  double t43578;
  double t43684;
  double t43772;
  double t43596;
  double t43639;
  double t43672;
  double t43698;
  double t43709;
  double t43771;
  double t43773;
  double t43779;
  double t43782;
  double t43785;
  double t43787;
  double t43788;
  double t43790;
  double t43791;
  double t43885;
  double t43893;
  double t43897;
  double t43908;
  double t43855;
  double t43859;
  double t43863;
  double t43917;
  double t43918;
  double t43919;
  double t43899;
  double t43909;
  double t43913;
  double t43923;
  double t43931;
  double t43935;
  double t43936;
  double t43937;
  double t43938;
  double t43970;
  double t43971;
  double t43981;
  double t43982;
  double t43983;
  double t43999;
  double t43973;
  double t43974;
  double t43975;
  double t33260;
  double t44032;
  double t44040;
  double t44044;
  double t44060;
  double t44061;
  double t44062;
  double t44054;
  double t44055;
  double t44058;
  double t44065;
  double t44033;
  double t44034;
  double t44039;
  double t44041;
  double t44047;
  double t44053;
  double t44059;
  double t44069;
  double t44070;
  double t44071;
  double t44072;
  double t44074;
  double t44075;
  double t44076;
  double t44085;
  double t44086;
  double t44093;
  double t44095;
  double t44094;
  double t44096;
  double t44107;
  double t44112;
  double t44113;
  double t44115;
  double t44116;
  double t44118;
  double t44122;
  double t44127;
  double t44128;
  double t44148;
  double t44151;
  double t44152;
  double t44154;
  double t44136;
  double t44138;
  double t44139;
  double t44153;
  double t44156;
  double t44160;
  double t44164;
  double t44170;
  double t44173;
  double t44174;
  double t44175;
  double t44176;
  double t44177;
  double t44178;
  double t44194;
  double t44195;
  double t44196;
  double t44204;
  double t44181;
  double t44182;
  double t44185;
  double t44200;
  double t44208;
  double t44213;
  double t44214;
  double t44215;
  double t44219;
  double t44220;
  double t44221;
  double t44232;
  double t44233;
  double t44234;
  double t44251;
  double t44255;
  double t44241;
  double t44242;
  double t44243;
  double t44252;
  double t44253;
  double t44254;
  double t44256;
  double t44257;
  double t44258;
  double t44259;
  double t44260;
  double t44261;
  double t44262;
  double t44263;
  double t44295;
  double t44299;
  double t44300;
  double t44311;
  double t44278;
  double t44279;
  double t44280;
  double t44316;
  double t44317;
  double t44318;
  double t44310;
  double t44313;
  double t44314;
  double t44319;
  double t44320;
  double t44322;
  double t44325;
  double t44330;
  double t44331;
  double t44332;
  double t44333;
  double t44349;
  double t44353;
  double t44354;
  double t44356;
  double t44336;
  double t44337;
  double t44338;
  double t44388;
  double t44389;
  double t44390;
  double t44393;
  double t44400;
  double t44404;
  double t44411;
  double t44412;
  double t44416;
  double t44379;
  double t44380;
  double t44392;
  double t44410;
  double t44422;
  double t44423;
  double t44424;
  double t44418;
  double t44439;
  double t44440;
  double t44441;
  double t44442;
  double t44443;
  double t44445;
  double t44449;
  double t44452;
  double t44463;
  double t44464;
  double t44465;
  double t44469;
  double t44470;
  double t44474;
  double t44476;
  double t44478;
  double t44485;
  double t44493;
  double t44502;
  double t44508;
  double t44509;
  double t44524;
  double t44525;
  double t44528;
  double t44520;
  double t44530;
  double t44006;
  double t44010;
  double t44011;
  double t44532;
  double t44533;
  double t44534;
  double t43992;
  double t44003;
  double t44004;
  double t44538;
  double t44539;
  double t44540;
  double t44574;
  double t44575;
  double t44576;
  double t44578;
  double t44579;
  double t44580;
  double t44572;
  double t44573;
  double t44577;
  double t44581;
  double t44582;
  double t44583;
  double t44587;
  double t44595;
  double t44599;
  double t44603;
  double t44621;
  double t44626;
  double t44627;
  double t44628;
  double t44629;
  double t44630;
  double t44635;
  double t44639;
  double t44649;
  double t44672;
  double t44679;
  double t44686;
  double t44687;
  double t44691;
  double t44693;
  double t44697;
  double t44698;
  double t44712;
  double t44713;
  double t44721;
  double t44737;
  double t44753;
  double t44767;
  double t44771;
  double t44772;
  double t44773;
  double t44777;
  double t44355;
  double t44357;
  double t44361;
  double t44781;
  double t44782;
  double t44783;
  double t44363;
  double t44364;
  double t44365;
  double t44803;
  double t44804;
  double t44805;
  double t44591;
  double t44607;
  double t44852;
  double t44613;
  double t44617;
  double t44622;
  double t44625;
  double t44631;
  double t44653;
  double t44671;
  double t44692;
  double t44699;
  double t44702;
  double t44714;
  double t44715;
  double t44719;
  double t44720;
  double t44757;
  double t44763;
  double t44796;
  double t44809;
  double t44818;
  double t44822;
  double t44836;
  double t44838;
  double t44839;
  double t44841;
  double t44843;
  double t44844;
  double t44845;
  double t44846;
  double t44847;
  double t44903;
  double t44904;
  double t44905;
  double t44902;
  double t44909;
  double t44911;
  double t44912;
  double t44915;
  double t44920;
  double t44933;
  double t44941;
  double t44942;
  double t44943;
  double t44944;
  double t44948;
  double t44953;
  double t44957;
  double t44961;
  double t44969;
  double t44970;
  double t44971;
  double t44972;
  double t44973;
  double t44975;
  double t44976;
  double t44977;
  double t44982;
  double t44983;
  double t44988;
  double t44989;
  double t44990;
  double t44996;
  double t44997;
  double t44998;
  double t44999;
  double t45006;
  double t45007;
  double t45008;
  double t45016;
  double t45018;
  double t45019;
  double t45023;
  double t45084;
  double t45085;
  double t45090;
  double t45078;
  double t45080;
  double t45082;
  double t45083;
  double t45095;
  double t45097;
  double t45098;
  double t45099;
  double t45109;
  double t45120;
  double t45128;
  double t45129;
  double t45130;
  double t45136;
  double t45145;
  double t45152;
  double t45158;
  double t45159;
  double t45160;
  double t45168;
  double t45172;
  double t45173;
  double t45185;
  double t45192;
  double t45204;
  double t45208;
  double t45209;
  double t45220;
  double t45224;
  double t45228;
  double t45229;
  double t45233;
  double t45237;
  double t45238;
  double t45239;
  double t45241;
  double t45242;
  double t45259;
  double t45358;
  double t45359;
  double t45360;
  double t45340;
  double t45344;
  double t45348;
  double t45349;
  double t45350;
  double t45354;
  double t45361;
  double t45369;
  double t45370;
  double t45371;
  double t45374;
  double t45375;
  double t45377;
  double t45382;
  double t45383;
  double t45384;
  double t45385;
  double t45386;
  double t45397;
  double t45398;
  double t45401;
  double t45405;
  double t45407;
  double t45408;
  double t45409;
  double t45415;
  double t45436;
  double t45437;
  double t45439;
  double t45435;
  double t45440;
  double t45441;
  double t45442;
  double t45443;
  double t45447;
  double t45448;
  double t45449;
  double t45488;
  double t45489;
  double t45490;
  double t45485;
  double t45486;
  double t45487;
  double t45494;
  double t45498;
  double t45499;
  double t45500;
  double t45501;
  double t45502;
  double t45504;
  double t45505;
  double t45513;
  double t45516;
  double t45519;
  double t45520;
  double t45521;
  double t45551;
  double t45552;
  double t45553;
  double t45550;
  double t45554;
  double t45558;
  double t45560;
  double t45565;
  double t45570;
  double t45583;
  double t45584;
  double t45651;
  double t45652;
  double t45653;
  double t45523;
  double t45635;
  double t45636;
  double t45638;
  double t45639;
  double t45644;
  double t45649;
  double t45654;
  double t45660;
  double t45661;
  double t45681;
  double t45685;
  double t45669;
  double t45686;
  double t45688;
  double t45689;
  double t45694;
  double t45699;
  double t45703;
  double t45707;
  double t45775;
  double t45776;
  double t45777;
  double t45744;
  double t45745;
  double t45762;
  double t45782;
  double t45789;
  double t45790;
  double t45791;
  double t45795;
  double t45805;
  double t45807;
  double t45811;
  double t45820;
  double t45864;
  double t45865;
  double t45866;
  double t45824;
  double t44417;
  double t44419;
  double t44427;
  double t45885;
  double t44432;
  double t44433;
  double t44438;
  double t44444;
  double t44457;
  double t44461;
  double t44471;
  double t44479;
  double t44484;
  double t44510;
  double t44512;
  double t44514;
  double t44515;
  double t44516;
  double t44519;
  double t44536;
  double t44541;
  double t44547;
  double t44548;
  double t44549;
  double t44550;
  double t44551;
  double t44556;
  double t44558;
  double t44560;
  double t44564;
  double t44565;
  double t44566;
  double t45956;
  double t45957;
  double t45958;
  double t45961;
  double t45962;
  double t45959;
  double t45960;
  double t45966;
  double t45967;
  double t45964;
  double t45976;
  double t45982;
  double t45983;
  double t45994;
  double t45999;
  double t46003;
  double t46005;
  double t46006;
  double t46013;
  double t46014;
  double t46015;
  double t46016;
  double t46024;
  double t46029;
  double t46033;
  double t46038;
  double t46052;
  double t46053;
  double t46054;
  double t46055;
  double t46056;
  double t46072;
  double t46076;
  double t46080;
  double t46071;
  double t46081;
  double t46082;
  double t46086;
  double t46096;
  double t46098;
  double t46099;
  double t46100;
  double t46165;
  double t46169;
  double t46171;
  double t46176;
  double t46194;
  double t46202;
  double t46147;
  double t46148;
  double t46149;
  double t46153;
  double t46154;
  double t46158;
  double t46172;
  double t46216;
  double t46219;
  double t46222;
  double t46208;
  double t46234;
  double t46251;
  double t46253;
  double t46254;
  double t46258;
  double t46263;
  double t46264;
  double t46268;
  double t46312;
  double t46317;
  double t46331;
  double t46332;
  double t46333;
  double t46343;
  double t46348;
  double t46349;
  double t46350;
  double t46355;
  double t46359;
  double t46361;
  double t46362;
  double t46374;
  double t46383;
  double t46394;
  double t46479;
  double t46480;
  double t46481;
  double t46457;
  double t46463;
  double t46467;
  double t46468;
  double t46469;
  double t46478;
  double t46497;
  double t46498;
  double t46499;
  double t46500;
  double t46507;
  double t46512;
  double t46513;
  double t46525;
  double t46526;
  double t46527;
  double t46528;
  double t46531;
  double t46534;
  double t46538;
  double t46542;
  double t46546;
  double t46547;
  double t46548;
  double t46573;
  double t46595;
  double t46629;
  double t46633;
  double t46634;
  double t46620;
  double t46635;
  double t46636;
  double t46637;
  double t46638;
  double t46640;
  double t46641;
  double t46644;
  double t46727;
  double t46748;
  double t46750;
  double t46715;
  double t46716;
  double t46717;
  double t46751;
  double t46762;
  double t46763;
  double t46765;
  double t46766;
  double t46767;
  double t46793;
  double t46799;
  double t46808;
  double t46809;
  double t46810;
  double t46811;
  double t46812;
  double t46909;
  double t46915;
  double t46916;
  double t46905;
  double t46917;
  double t46918;
  double t46919;
  double t46940;
  double t46953;
  double t46954;
  double t46987;
  double t47138;
  double t47139;
  double t47140;
  double t46875;
  double t47095;
  double t47101;
  double t47106;
  double t47108;
  double t47109;
  double t47127;
  double t47142;
  double t47143;
  double t47147;
  double t47165;
  double t47167;
  double t47164;
  double t47172;
  double t47177;
  double t47277;
  double t47291;
  double t47296;
  double t47298;
  double t47299;
  double t47431;
  double t47432;
  double t47433;
  double t47428;
  double t47429;
  double t47430;
  double t47435;
  double t47436;
  double t47437;
  double t47438;
  double t47449;
  double t47450;
  double t47454;
  double t47455;
  double t47462;
  double t47507;
  double t47511;
  double t47515;
  double t47471;
  t3958 = Cos(var1[4]);
  t32479 = Cos(var1[5]);
  t33026 = Sin(var1[4]);
  t33264 = Sin(var1[14]);
  t33285 = Cos(var1[14]);
  t33317 = Sin(var1[5]);
  t37630 = Sin(var1[15]);
  t36067 = -1.*t32479*t33264*t33026;
  t36241 = -1.*t33285*t33026*t33317;
  t36491 = t36067 + t36241;
  t35585 = Cos(var1[15]);
  t37645 = -1.*t33285*t32479*t33026;
  t37719 = t33264*t33026*t33317;
  t38035 = t37645 + t37719;
  t33266 = -0.135*t32479*t33264*t33026;
  t33288 = -1.*t33285;
  t33310 = 1. + t33288;
  t35564 = 0.135*t33310*t33026*t33317;
  t35636 = -1.*t35585;
  t35798 = 1. + t35636;
  t37232 = -0.135*t35798*t36491;
  t38201 = 0.135*t37630*t38035;
  t38219 = -1.*t37630*t36491;
  t38708 = t35585*t38035;
  t39049 = t38219 + t38708;
  t42866 = Cos(var1[16]);
  t42867 = -1.*t42866;
  t42868 = 1. + t42867;
  t42928 = Sin(var1[16]);
  t39577 = t35585*t36491;
  t41031 = t37630*t38035;
  t41032 = t39577 + t41031;
  t42924 = -0.049*t42868;
  t42932 = -0.135*t42928;
  t42937 = t42924 + t42932;
  t42941 = -1.*t3958*t42937;
  t42949 = -0.135*t42868;
  t43134 = 0.049*t42928;
  t43135 = t42949 + t43134;
  t43136 = t43135*t41032;
  t43167 = t3958*t42928;
  t43168 = t42866*t41032;
  t43169 = t43167 + t43168;
  t43187 = Cos(var1[17]);
  t43188 = -1.*t43187;
  t43189 = 1. + t43188;
  t43201 = Sin(var1[17]);
  t43171 = -1.*t42866*t3958;
  t43174 = t42928*t41032;
  t43180 = t43171 + t43174;
  t43200 = -0.09*t43189;
  t43205 = 0.049*t43201;
  t43206 = t43200 + t43205;
  t43207 = t43206*t39049;
  t43209 = -0.049*t43189;
  t43210 = -0.09*t43201;
  t43212 = t43209 + t43210;
  t43213 = t43212*t43180;
  t43215 = t43201*t39049;
  t43222 = t43187*t43180;
  t43223 = t43215 + t43222;
  t43272 = Cos(var1[18]);
  t43286 = -1.*t43272;
  t43462 = 1. + t43286;
  t43495 = Sin(var1[18]);
  t43225 = t43187*t39049;
  t43226 = -1.*t43201*t43180;
  t43232 = t43225 + t43226;
  t43494 = -0.049*t43462;
  t43498 = -0.21*t43495;
  t43499 = t43494 + t43498;
  t43500 = t43499*t43223;
  t43501 = -0.21*t43462;
  t43504 = 0.049*t43495;
  t43508 = t43501 + t43504;
  t43511 = t43508*t43232;
  t43539 = -1.*t43495*t43223;
  t43568 = t43272*t43232;
  t43578 = t43539 + t43568;
  t43684 = Cos(var1[19]);
  t43772 = Sin(var1[19]);
  t43596 = t43272*t43223;
  t43639 = t43495*t43232;
  t43672 = t43596 + t43639;
  t43698 = -1.*t43684;
  t43709 = 1. + t43698;
  t43771 = -0.2707*t43709;
  t43773 = 0.0016*t43772;
  t43779 = t43771 + t43773;
  t43782 = t43779*t43578;
  t43785 = -1. + t43684;
  t43787 = 0.0016*t43785;
  t43788 = -0.2707*t43772;
  t43790 = t43787 + t43788;
  t43791 = t43790*t43672;
  t43885 = Cos(var1[20]);
  t43893 = -1.*t43885;
  t43897 = 1. + t43893;
  t43908 = Sin(var1[20]);
  t43855 = t43684*t43578;
  t43859 = -1.*t43772*t43672;
  t43863 = t43855 + t43859;
  t43917 = t43772*t43578;
  t43918 = t43684*t43672;
  t43919 = t43917 + t43918;
  t43899 = 0.0184*t43897;
  t43909 = -0.7055*t43908;
  t43913 = t43899 + t43909;
  t43923 = t43913*t43919;
  t43931 = -0.7055*t43897;
  t43935 = -0.0184*t43908;
  t43936 = t43931 + t43935;
  t43937 = t43936*t43863;
  t43938 = -1.*t43908*t43919;
  t43970 = t43885*t43863;
  t43971 = t43938 + t43970;
  t43981 = Cos(var1[21]);
  t43982 = -1.*t43981;
  t43983 = 1. + t43982;
  t43999 = Sin(var1[21]);
  t43973 = t43885*t43919;
  t43974 = t43908*t43863;
  t43975 = t43973 + t43974;
  t33260 = 0.0233*t3958;
  t44032 = Cos(var1[6]);
  t44040 = Sin(var1[6]);
  t44044 = Cos(var1[7]);
  t44060 = -1.*t32479*t44032*t33026;
  t44061 = t33026*t33317*t44040;
  t44062 = t44060 + t44061;
  t44054 = -1.*t44032*t33026*t33317;
  t44055 = -1.*t32479*t33026*t44040;
  t44058 = t44054 + t44055;
  t44065 = Sin(var1[7]);
  t44033 = -1.*t44032;
  t44034 = 1. + t44033;
  t44039 = -0.135*t44034*t33026*t33317;
  t44041 = 0.135*t32479*t33026*t44040;
  t44047 = -1.*t44044;
  t44053 = 1. + t44047;
  t44059 = 0.135*t44053*t44058;
  t44069 = -0.135*t44062*t44065;
  t44070 = t44044*t44062;
  t44071 = -1.*t44058*t44065;
  t44072 = t44070 + t44071;
  t44074 = t44044*t44058;
  t44075 = t44062*t44065;
  t44076 = t44074 + t44075;
  t44085 = Cos(var1[8]);
  t44086 = -1.*t44085;
  t44093 = 1. + t44086;
  t44095 = Sin(var1[8]);
  t44094 = 0.135*t44093;
  t44096 = 0.049*t44095;
  t44107 = t44094 + t44096;
  t44112 = t44076*t44107;
  t44113 = -0.049*t44093;
  t44115 = 0.135*t44095;
  t44116 = t44113 + t44115;
  t44118 = -1.*t3958*t44116;
  t44122 = t44085*t44076;
  t44127 = t3958*t44095;
  t44128 = t44122 + t44127;
  t44148 = Cos(var1[9]);
  t44151 = -1.*t44148;
  t44152 = 1. + t44151;
  t44154 = Sin(var1[9]);
  t44136 = -1.*t3958*t44085;
  t44138 = t44076*t44095;
  t44139 = t44136 + t44138;
  t44153 = -0.09*t44152;
  t44156 = 0.049*t44154;
  t44160 = t44153 + t44156;
  t44164 = t44160*t44072;
  t44170 = -0.049*t44152;
  t44173 = -0.09*t44154;
  t44174 = t44170 + t44173;
  t44175 = t44174*t44139;
  t44176 = t44154*t44072;
  t44177 = t44148*t44139;
  t44178 = t44176 + t44177;
  t44194 = Cos(var1[10]);
  t44195 = -1.*t44194;
  t44196 = 1. + t44195;
  t44204 = Sin(var1[10]);
  t44181 = t44148*t44072;
  t44182 = -1.*t44154*t44139;
  t44185 = t44181 + t44182;
  t44200 = -0.049*t44196;
  t44208 = -0.21*t44204;
  t44213 = t44200 + t44208;
  t44214 = t44213*t44178;
  t44215 = -0.21*t44196;
  t44219 = 0.049*t44204;
  t44220 = t44215 + t44219;
  t44221 = t44220*t44185;
  t44232 = -1.*t44204*t44178;
  t44233 = t44194*t44185;
  t44234 = t44232 + t44233;
  t44251 = Cos(var1[11]);
  t44255 = Sin(var1[11]);
  t44241 = t44194*t44178;
  t44242 = t44204*t44185;
  t44243 = t44241 + t44242;
  t44252 = -1.*t44251;
  t44253 = 1. + t44252;
  t44254 = -0.2707*t44253;
  t44256 = 0.0016*t44255;
  t44257 = t44254 + t44256;
  t44258 = t44257*t44234;
  t44259 = -1. + t44251;
  t44260 = 0.0016*t44259;
  t44261 = -0.2707*t44255;
  t44262 = t44260 + t44261;
  t44263 = t44262*t44243;
  t44295 = Cos(var1[12]);
  t44299 = -1.*t44295;
  t44300 = 1. + t44299;
  t44311 = Sin(var1[12]);
  t44278 = t44251*t44234;
  t44279 = -1.*t44255*t44243;
  t44280 = t44278 + t44279;
  t44316 = t44255*t44234;
  t44317 = t44251*t44243;
  t44318 = t44316 + t44317;
  t44310 = 0.0184*t44300;
  t44313 = -0.7055*t44311;
  t44314 = t44310 + t44313;
  t44319 = t44314*t44318;
  t44320 = -0.7055*t44300;
  t44322 = -0.0184*t44311;
  t44325 = t44320 + t44322;
  t44330 = t44325*t44280;
  t44331 = -1.*t44311*t44318;
  t44332 = t44295*t44280;
  t44333 = t44331 + t44332;
  t44349 = Cos(var1[13]);
  t44353 = -1.*t44349;
  t44354 = 1. + t44353;
  t44356 = Sin(var1[13]);
  t44336 = t44295*t44318;
  t44337 = t44311*t44280;
  t44338 = t44336 + t44337;
  t44388 = -1.*t3958*t32479*t33264;
  t44389 = -1.*t33285*t3958*t33317;
  t44390 = t44388 + t44389;
  t44393 = t33285*t3958*t32479;
  t44400 = -1.*t3958*t33264*t33317;
  t44404 = t44393 + t44400;
  t44411 = t37630*t44390;
  t44412 = t35585*t44404;
  t44416 = t44411 + t44412;
  t44379 = -0.135*t33310*t3958*t32479;
  t44380 = -0.135*t3958*t33264*t33317;
  t44392 = 0.135*t37630*t44390;
  t44410 = -0.135*t35798*t44404;
  t44422 = t35585*t44390;
  t44423 = -1.*t37630*t44404;
  t44424 = t44422 + t44423;
  t44418 = t43135*t44416;
  t44439 = t42928*t43212*t44416;
  t44440 = t43206*t44424;
  t44441 = -1.*t42928*t43201*t44416;
  t44442 = t43187*t44424;
  t44443 = t44441 + t44442;
  t44445 = t43187*t42928*t44416;
  t44449 = t43201*t44424;
  t44452 = t44445 + t44449;
  t44463 = t43508*t44443;
  t44464 = t43499*t44452;
  t44465 = t43495*t44443;
  t44469 = t43272*t44452;
  t44470 = t44465 + t44469;
  t44474 = t43272*t44443;
  t44476 = -1.*t43495*t44452;
  t44478 = t44474 + t44476;
  t44485 = t43790*t44470;
  t44493 = t43779*t44478;
  t44502 = -1.*t43772*t44470;
  t44508 = t43684*t44478;
  t44509 = t44502 + t44508;
  t44524 = t43684*t44470;
  t44525 = t43772*t44478;
  t44528 = t44524 + t44525;
  t44520 = t43936*t44509;
  t44530 = t43913*t44528;
  t44006 = -0.0216*t43983;
  t44010 = -1.1135*t43999;
  t44011 = t44006 + t44010;
  t44532 = t43908*t44509;
  t44533 = t43885*t44528;
  t44534 = t44532 + t44533;
  t43992 = -1.1135*t43983;
  t44003 = 0.0216*t43999;
  t44004 = t43992 + t44003;
  t44538 = t43885*t44509;
  t44539 = -1.*t43908*t44528;
  t44540 = t44538 + t44539;
  t44574 = t3958*t32479*t44032;
  t44575 = -1.*t3958*t33317*t44040;
  t44576 = t44574 + t44575;
  t44578 = -1.*t3958*t44032*t33317;
  t44579 = -1.*t3958*t32479*t44040;
  t44580 = t44578 + t44579;
  t44572 = 0.135*t3958*t32479*t44034;
  t44573 = 0.135*t3958*t33317*t44040;
  t44577 = 0.135*t44053*t44576;
  t44581 = -0.135*t44580*t44065;
  t44582 = t44044*t44576;
  t44583 = t44580*t44065;
  t44587 = t44582 + t44583;
  t44595 = t44044*t44580;
  t44599 = -1.*t44576*t44065;
  t44603 = t44595 + t44599;
  t44621 = t44587*t44107;
  t44626 = t44160*t44603;
  t44627 = t44174*t44587*t44095;
  t44628 = t44154*t44603;
  t44629 = t44148*t44587*t44095;
  t44630 = t44628 + t44629;
  t44635 = t44148*t44603;
  t44639 = -1.*t44154*t44587*t44095;
  t44649 = t44635 + t44639;
  t44672 = t44213*t44630;
  t44679 = t44220*t44649;
  t44686 = -1.*t44204*t44630;
  t44687 = t44194*t44649;
  t44691 = t44686 + t44687;
  t44693 = t44194*t44630;
  t44697 = t44204*t44649;
  t44698 = t44693 + t44697;
  t44712 = t44257*t44691;
  t44713 = t44262*t44698;
  t44721 = t44251*t44691;
  t44737 = -1.*t44255*t44698;
  t44753 = t44721 + t44737;
  t44767 = t44255*t44691;
  t44771 = t44251*t44698;
  t44772 = t44767 + t44771;
  t44773 = t44314*t44772;
  t44777 = t44325*t44753;
  t44355 = -1.1135*t44354;
  t44357 = 0.0216*t44356;
  t44361 = t44355 + t44357;
  t44781 = -1.*t44311*t44772;
  t44782 = t44295*t44753;
  t44783 = t44781 + t44782;
  t44363 = -0.0216*t44354;
  t44364 = -1.1135*t44356;
  t44365 = t44363 + t44364;
  t44803 = t44295*t44772;
  t44804 = t44311*t44753;
  t44805 = t44803 + t44804;
  t44591 = 0.1351*t44587;
  t44607 = 0.0179*t44603;
  t44852 = -0.135*t3958*t32479*t44032;
  t44613 = 0.135*t44085*t44587;
  t44617 = -0.0343*t44603;
  t44622 = -0.049*t44587*t44095;
  t44625 = 0.1708*t44085*t44587;
  t44631 = -0.0489*t44630;
  t44653 = -0.1498*t44649;
  t44671 = 0.1327*t44085*t44587;
  t44692 = -0.233*t44691;
  t44699 = -0.0169*t44698;
  t44702 = 0.1303*t44085*t44587;
  t44714 = -1.*t44255*t44691;
  t44715 = -1.*t44251*t44698;
  t44719 = t44714 + t44715;
  t44720 = 0.0004*t44719;
  t44757 = -0.4541*t44753;
  t44763 = 0.1318*t44085*t44587;
  t44796 = -0.816*t44783;
  t44809 = -0.0122*t44805;
  t44818 = 0.1306*t44085*t44587;
  t44822 = t44361*t44783;
  t44836 = t44365*t44805;
  t44838 = t44356*t44783;
  t44839 = t44349*t44805;
  t44841 = t44838 + t44839;
  t44843 = 0.0059*t44841;
  t44844 = t44349*t44783;
  t44845 = -1.*t44356*t44805;
  t44846 = t44844 + t44845;
  t44847 = -1.1182*t44846;
  t44903 = t3958*t44032*t33317;
  t44904 = t3958*t32479*t44040;
  t44905 = t44903 + t44904;
  t44902 = -0.135*t44044*t44576;
  t44909 = 0.135*t44905*t44065;
  t44911 = -1.*t44905*t44065;
  t44912 = t44582 + t44911;
  t44915 = -1.*t44044*t44905;
  t44920 = t44915 + t44599;
  t44933 = t44912*t44107;
  t44941 = t44160*t44920;
  t44942 = t44174*t44912*t44095;
  t44943 = t44154*t44920;
  t44944 = t44148*t44912*t44095;
  t44948 = t44943 + t44944;
  t44953 = t44148*t44920;
  t44957 = -1.*t44154*t44912*t44095;
  t44961 = t44953 + t44957;
  t44969 = t44213*t44948;
  t44970 = t44220*t44961;
  t44971 = -1.*t44204*t44948;
  t44972 = t44194*t44961;
  t44973 = t44971 + t44972;
  t44975 = t44194*t44948;
  t44976 = t44204*t44961;
  t44977 = t44975 + t44976;
  t44982 = t44257*t44973;
  t44983 = t44262*t44977;
  t44988 = t44251*t44973;
  t44989 = -1.*t44255*t44977;
  t44990 = t44988 + t44989;
  t44996 = t44255*t44973;
  t44997 = t44251*t44977;
  t44998 = t44996 + t44997;
  t44999 = t44314*t44998;
  t45006 = t44325*t44990;
  t45007 = -1.*t44311*t44998;
  t45008 = t44295*t44990;
  t45016 = t45007 + t45008;
  t45018 = t44295*t44998;
  t45019 = t44311*t44990;
  t45023 = t45018 + t45019;
  t45084 = t44044*t44905;
  t45085 = t44576*t44065;
  t45090 = t45084 + t45085;
  t45078 = 0.135*t44085;
  t45080 = -0.049*t44095;
  t45082 = t45078 + t45080;
  t45083 = -1.*t33026*t45082;
  t45095 = 0.049*t44085;
  t45097 = t45095 + t44115;
  t45098 = t45090*t45097;
  t45099 = t44085*t45090;
  t45109 = t33026*t44095;
  t45120 = t45099 + t45109;
  t45128 = t44085*t33026;
  t45129 = -1.*t45090*t44095;
  t45130 = t45128 + t45129;
  t45136 = t44174*t45120;
  t45145 = t44148*t44213*t45120;
  t45152 = -1.*t44154*t44220*t45120;
  t45158 = -1.*t44194*t44154*t45120;
  t45159 = -1.*t44148*t44204*t45120;
  t45160 = t45158 + t45159;
  t45168 = t44148*t44194*t45120;
  t45172 = -1.*t44154*t44204*t45120;
  t45173 = t45168 + t45172;
  t45185 = t44257*t45160;
  t45192 = t44262*t45173;
  t45204 = t44251*t45160;
  t45208 = -1.*t44255*t45173;
  t45209 = t45204 + t45208;
  t45220 = t44255*t45160;
  t45224 = t44251*t45173;
  t45228 = t45220 + t45224;
  t45229 = t44314*t45228;
  t45233 = t44325*t45209;
  t45237 = -1.*t44311*t45228;
  t45238 = t44295*t45209;
  t45239 = t45237 + t45238;
  t45241 = t44295*t45228;
  t45242 = t44311*t45209;
  t45259 = t45241 + t45242;
  t45358 = -1.*t44085*t33026;
  t45359 = t45090*t44095;
  t45360 = t45358 + t45359;
  t45340 = 0.049*t44148;
  t45344 = t45340 + t44173;
  t45348 = t45344*t44912;
  t45349 = -0.09*t44148;
  t45350 = -0.049*t44154;
  t45354 = t45349 + t45350;
  t45361 = t45354*t45360;
  t45369 = -1.*t44154*t44912;
  t45370 = -1.*t44148*t45360;
  t45371 = t45369 + t45370;
  t45374 = t44148*t44912;
  t45375 = -1.*t44154*t45360;
  t45377 = t45374 + t45375;
  t45382 = t44220*t45371;
  t45383 = t44213*t45377;
  t45384 = t44204*t45371;
  t45385 = t44194*t45377;
  t45386 = t45384 + t45385;
  t45397 = t44194*t45371;
  t45398 = -1.*t44204*t45377;
  t45401 = t45397 + t45398;
  t45405 = t44262*t45386;
  t45407 = t44257*t45401;
  t45408 = -1.*t44255*t45386;
  t45409 = t44251*t45401;
  t45415 = t45408 + t45409;
  t45436 = t44251*t45386;
  t45437 = t44255*t45401;
  t45439 = t45436 + t45437;
  t45435 = t44325*t45415;
  t45440 = t44314*t45439;
  t45441 = t44311*t45415;
  t45442 = t44295*t45439;
  t45443 = t45441 + t45442;
  t45447 = t44295*t45415;
  t45448 = -1.*t44311*t45439;
  t45449 = t45447 + t45448;
  t45488 = t44154*t44912;
  t45489 = t44148*t45360;
  t45490 = t45488 + t45489;
  t45485 = -0.21*t44194;
  t45486 = -0.049*t44204;
  t45487 = t45485 + t45486;
  t45494 = t45487*t45490;
  t45498 = 0.049*t44194;
  t45499 = t45498 + t44208;
  t45500 = t45499*t45377;
  t45501 = -1.*t44204*t45490;
  t45502 = t45501 + t45385;
  t45504 = -1.*t44194*t45490;
  t45505 = t45504 + t45398;
  t45513 = t44262*t45502;
  t45516 = t44257*t45505;
  t45519 = -1.*t44255*t45502;
  t45520 = t44251*t45505;
  t45521 = t45519 + t45520;
  t45551 = t44251*t45502;
  t45552 = t44255*t45505;
  t45553 = t45551 + t45552;
  t45550 = t44325*t45521;
  t45554 = t44314*t45553;
  t45558 = t44311*t45521;
  t45560 = t44295*t45553;
  t45565 = t45558 + t45560;
  t45570 = t44295*t45521;
  t45583 = -1.*t44311*t45553;
  t45584 = t45570 + t45583;
  t45651 = t44194*t45490;
  t45652 = t44204*t45377;
  t45653 = t45651 + t45652;
  t45523 = -1.*t44251*t45502;
  t45635 = 0.0016*t44251;
  t45636 = t45635 + t44261;
  t45638 = t45636*t45502;
  t45639 = -0.2707*t44251;
  t45644 = -0.0016*t44255;
  t45649 = t45639 + t45644;
  t45654 = t45649*t45653;
  t45660 = -1.*t44251*t45653;
  t45661 = t45519 + t45660;
  t45681 = -1.*t44255*t45653;
  t45685 = t45551 + t45681;
  t45669 = t44325*t45661;
  t45686 = t44314*t45685;
  t45688 = t44311*t45661;
  t45689 = t44295*t45685;
  t45694 = t45688 + t45689;
  t45699 = t44295*t45661;
  t45703 = -1.*t44311*t45685;
  t45707 = t45699 + t45703;
  t45775 = t44255*t45502;
  t45776 = t44251*t45653;
  t45777 = t45775 + t45776;
  t45744 = -0.7055*t44295;
  t45745 = 0.0184*t44311;
  t45762 = t45744 + t45745;
  t45782 = t45762*t45777;
  t45789 = -0.0184*t44295;
  t45790 = t45789 + t44313;
  t45791 = t45790*t45685;
  t45795 = -1.*t44311*t45777;
  t45805 = t45795 + t45689;
  t45807 = -1.*t44295*t45777;
  t45811 = t45807 + t45703;
  t45820 = -1.*t44356*t45805;
  t45864 = t44295*t45777;
  t45865 = t44311*t45685;
  t45866 = t45864 + t45865;
  t45824 = t44349*t45805;
  t44417 = -0.135*t42866*t44416;
  t44419 = -0.049*t42928*t44416;
  t44427 = -0.0343*t44424;
  t45885 = 0.135*t33285*t3958*t32479;
  t44432 = -0.1351*t44416;
  t44433 = 0.0179*t44424;
  t44438 = -0.1708*t42866*t44416;
  t44444 = -0.1498*t44443;
  t44457 = -0.0489*t44452;
  t44461 = -0.1327*t42866*t44416;
  t44471 = -0.0169*t44470;
  t44479 = -0.233*t44478;
  t44484 = -0.1303*t42866*t44416;
  t44510 = -0.4541*t44509;
  t44512 = -1.*t43684*t44470;
  t44514 = -1.*t43772*t44478;
  t44515 = t44512 + t44514;
  t44516 = 0.0004*t44515;
  t44519 = -0.1318*t42866*t44416;
  t44536 = -0.0122*t44534;
  t44541 = -0.816*t44540;
  t44547 = -0.1306*t42866*t44416;
  t44548 = t44011*t44534;
  t44549 = t44004*t44540;
  t44550 = -1.*t43999*t44534;
  t44551 = t43981*t44540;
  t44556 = t44550 + t44551;
  t44558 = -1.1182*t44556;
  t44560 = t43981*t44534;
  t44564 = t43999*t44540;
  t44565 = t44560 + t44564;
  t44566 = 0.0059*t44565;
  t45956 = t3958*t32479*t33264;
  t45957 = t33285*t3958*t33317;
  t45958 = t45956 + t45957;
  t45961 = -1.*t37630*t45958;
  t45962 = t45961 + t44412;
  t45959 = -0.135*t37630*t45958;
  t45960 = 0.135*t35585*t44404;
  t45966 = -1.*t35585*t45958;
  t45967 = t45966 + t44423;
  t45964 = t43135*t45962;
  t45976 = t42928*t43212*t45962;
  t45982 = t43206*t45967;
  t45983 = -1.*t42928*t43201*t45962;
  t45994 = t43187*t45967;
  t45999 = t45983 + t45994;
  t46003 = t43187*t42928*t45962;
  t46005 = t43201*t45967;
  t46006 = t46003 + t46005;
  t46013 = t43508*t45999;
  t46014 = t43499*t46006;
  t46015 = t43495*t45999;
  t46016 = t43272*t46006;
  t46024 = t46015 + t46016;
  t46029 = t43272*t45999;
  t46033 = -1.*t43495*t46006;
  t46038 = t46029 + t46033;
  t46052 = t43790*t46024;
  t46053 = t43779*t46038;
  t46054 = -1.*t43772*t46024;
  t46055 = t43684*t46038;
  t46056 = t46054 + t46055;
  t46072 = t43684*t46024;
  t46076 = t43772*t46038;
  t46080 = t46072 + t46076;
  t46071 = t43936*t46056;
  t46081 = t43913*t46080;
  t46082 = t43908*t46056;
  t46086 = t43885*t46080;
  t46096 = t46082 + t46086;
  t46098 = t43885*t46056;
  t46099 = -1.*t43908*t46080;
  t46100 = t46098 + t46099;
  t46165 = t35585*t45958;
  t46169 = t37630*t44404;
  t46171 = t46165 + t46169;
  t46176 = t42928*t33026;
  t46194 = t42866*t46171;
  t46202 = t46176 + t46194;
  t46147 = -0.135*t42866;
  t46148 = -0.049*t42928;
  t46149 = t46147 + t46148;
  t46153 = -1.*t46149*t33026;
  t46154 = 0.049*t42866;
  t46158 = t46154 + t42932;
  t46172 = t46158*t46171;
  t46216 = t42866*t33026;
  t46219 = -1.*t42928*t46171;
  t46222 = t46216 + t46219;
  t46208 = t43212*t46202;
  t46234 = t43187*t43499*t46202;
  t46251 = -1.*t43201*t43508*t46202;
  t46253 = -1.*t43272*t43201*t46202;
  t46254 = -1.*t43187*t43495*t46202;
  t46258 = t46253 + t46254;
  t46263 = t43187*t43272*t46202;
  t46264 = -1.*t43201*t43495*t46202;
  t46268 = t46263 + t46264;
  t46312 = t43779*t46258;
  t46317 = t43790*t46268;
  t46331 = t43684*t46258;
  t46332 = -1.*t43772*t46268;
  t46333 = t46331 + t46332;
  t46343 = t43772*t46258;
  t46348 = t43684*t46268;
  t46349 = t46343 + t46348;
  t46350 = t43913*t46349;
  t46355 = t43936*t46333;
  t46359 = -1.*t43908*t46349;
  t46361 = t43885*t46333;
  t46362 = t46359 + t46361;
  t46374 = t43885*t46349;
  t46383 = t43908*t46333;
  t46394 = t46374 + t46383;
  t46479 = -1.*t42866*t33026;
  t46480 = t42928*t46171;
  t46481 = t46479 + t46480;
  t46457 = 0.049*t43187;
  t46463 = t46457 + t43210;
  t46467 = t46463*t45962;
  t46468 = -0.09*t43187;
  t46469 = -0.049*t43201;
  t46478 = t46468 + t46469;
  t46497 = t46478*t46481;
  t46498 = -1.*t43201*t45962;
  t46499 = -1.*t43187*t46481;
  t46500 = t46498 + t46499;
  t46507 = t43187*t45962;
  t46512 = -1.*t43201*t46481;
  t46513 = t46507 + t46512;
  t46525 = t43508*t46500;
  t46526 = t43499*t46513;
  t46527 = t43495*t46500;
  t46528 = t43272*t46513;
  t46531 = t46527 + t46528;
  t46534 = t43272*t46500;
  t46538 = -1.*t43495*t46513;
  t46542 = t46534 + t46538;
  t46546 = t43790*t46531;
  t46547 = t43779*t46542;
  t46548 = -1.*t43772*t46531;
  t46573 = t43684*t46542;
  t46595 = t46548 + t46573;
  t46629 = t43684*t46531;
  t46633 = t43772*t46542;
  t46634 = t46629 + t46633;
  t46620 = t43936*t46595;
  t46635 = t43913*t46634;
  t46636 = t43908*t46595;
  t46637 = t43885*t46634;
  t46638 = t46636 + t46637;
  t46640 = t43885*t46595;
  t46641 = -1.*t43908*t46634;
  t46644 = t46640 + t46641;
  t46727 = t43201*t45962;
  t46748 = t43187*t46481;
  t46750 = t46727 + t46748;
  t46715 = -0.21*t43272;
  t46716 = -0.049*t43495;
  t46717 = t46715 + t46716;
  t46751 = t46717*t46750;
  t46762 = 0.049*t43272;
  t46763 = t46762 + t43498;
  t46765 = t46763*t46513;
  t46766 = -1.*t43495*t46750;
  t46767 = t46766 + t46528;
  t46793 = -1.*t43272*t46750;
  t46799 = t46793 + t46538;
  t46808 = t43790*t46767;
  t46809 = t43779*t46799;
  t46810 = -1.*t43772*t46767;
  t46811 = t43684*t46799;
  t46812 = t46810 + t46811;
  t46909 = t43684*t46767;
  t46915 = t43772*t46799;
  t46916 = t46909 + t46915;
  t46905 = t43936*t46812;
  t46917 = t43913*t46916;
  t46918 = t43908*t46812;
  t46919 = t43885*t46916;
  t46940 = t46918 + t46919;
  t46953 = t43885*t46812;
  t46954 = -1.*t43908*t46916;
  t46987 = t46953 + t46954;
  t47138 = t43272*t46750;
  t47139 = t43495*t46513;
  t47140 = t47138 + t47139;
  t46875 = -1.*t43684*t46767;
  t47095 = 0.0016*t43684;
  t47101 = t47095 + t43788;
  t47106 = t47101*t46767;
  t47108 = -0.2707*t43684;
  t47109 = -0.0016*t43772;
  t47127 = t47108 + t47109;
  t47142 = t47127*t47140;
  t47143 = -1.*t43684*t47140;
  t47147 = t46810 + t47143;
  t47165 = -1.*t43772*t47140;
  t47167 = t46909 + t47165;
  t47164 = t43936*t47147;
  t47172 = t43913*t47167;
  t47177 = t43908*t47147;
  t47277 = t43885*t47167;
  t47291 = t47177 + t47277;
  t47296 = t43885*t47147;
  t47298 = -1.*t43908*t47167;
  t47299 = t47296 + t47298;
  t47431 = t43772*t46767;
  t47432 = t43684*t47140;
  t47433 = t47431 + t47432;
  t47428 = -0.7055*t43885;
  t47429 = 0.0184*t43908;
  t47430 = t47428 + t47429;
  t47435 = t47430*t47433;
  t47436 = -0.0184*t43885;
  t47437 = t47436 + t43909;
  t47438 = t47437*t47167;
  t47449 = -1.*t43908*t47433;
  t47450 = t47449 + t47277;
  t47454 = -1.*t43885*t47433;
  t47455 = t47454 + t47298;
  t47462 = -1.*t43999*t47450;
  t47507 = t43885*t47433;
  t47511 = t43908*t47167;
  t47515 = t47507 + t47511;
  t47471 = t43981*t47450;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-312.78204;
  p_output1[3]=0;
  p_output1[4]=-101.3373*(-0.0284*t32479*t33026 - 0.0507*t3958) - 17.854200000000002*(t33260 + t33266 + t35564 + t37232 + t38201 + 0.0179*t39049 - 0.1351*t41032) - 11.4777*(t33266 + t35564 + t37232 + t38201 - 0.0343*t39049 + t42941 + t43136 - 0.135*t43169 - 0.049*t43180) - 54.151199999999996*(t33266 + t35564 + t37232 + t38201 + t42941 + t43136 - 0.1708*t43169 + t43207 + t43213 - 0.0489*t43223 - 0.1498*t43232) - 7.435980000000001*(t33266 + t35564 + t37232 + t38201 + t42941 + t43136 - 0.1327*t43169 + t43207 + t43213 + t43500 + t43511 - 0.233*t43578 - 0.0169*t43672) - 5.6603699999999995*(t33266 + t35564 + t37232 + t38201 + t42941 + t43136 - 0.1303*t43169 + t43207 + t43213 + t43500 + t43511 + 0.0004*(-1.*t43672*t43684 - 1.*t43578*t43772) + t43782 + t43791 - 0.4541*t43863) - 7.67142*(t33266 + t35564 + t37232 + t38201 + t42941 + t43136 - 0.1318*t43169 + t43207 + t43213 + t43500 + t43511 + t43782 + t43791 + t43923 + t43937 - 0.816*t43971 - 0.0122*t43975) - 1.4715*(t33266 + t35564 + t37232 + t38201 + t42941 + t43136 - 0.1306*t43169 + t43207 + t43213 + t43500 + t43511 + t43782 + t43791 + t43923 + t43937 + 0.0059*(t43975*t43981 + t43971*t43999) - 1.1182*(t43971*t43981 - 1.*t43975*t43999) + t43971*t44004 + t43975*t44011) - 17.854200000000002*(t33260 + t44039 + t44041 + t44059 + t44069 + 0.0179*t44072 + 0.1351*t44076) - 11.4777*(t44039 + t44041 + t44059 + t44069 - 0.0343*t44072 + t44112 + t44118 + 0.135*t44128 - 0.049*t44139) - 54.151199999999996*(t44039 + t44041 + t44059 + t44069 + t44112 + t44118 + 0.1708*t44128 + t44164 + t44175 - 0.0489*t44178 - 0.1498*t44185) - 7.435980000000001*(t44039 + t44041 + t44059 + t44069 + t44112 + t44118 + 0.1327*t44128 + t44164 + t44175 + t44214 + t44221 - 0.233*t44234 - 0.0169*t44243) - 5.6603699999999995*(t44039 + t44041 + t44059 + t44069 + t44112 + t44118 + 0.1303*t44128 + t44164 + t44175 + t44214 + t44221 + 0.0004*(-1.*t44243*t44251 - 1.*t44234*t44255) + t44258 + t44263 - 0.4541*t44280) - 7.67142*(t44039 + t44041 + t44059 + t44069 + t44112 + t44118 + 0.1318*t44128 + t44164 + t44175 + t44214 + t44221 + t44258 + t44263 + t44319 + t44330 - 0.816*t44333 - 0.0122*t44338) - 1.4715*(t44039 + t44041 + t44059 + t44069 + t44112 + t44118 + 0.1306*t44128 + t44164 + t44175 + t44214 + t44221 + t44258 + t44263 + t44319 + t44330 + 0.0059*(t44338*t44349 + t44333*t44356) - 1.1182*(t44333*t44349 - 1.*t44338*t44356) + t44333*t44361 + t44338*t44365);
  p_output1[5]=2.87797932*t33317*t3958 - 11.4777*(t44379 + t44380 + t44392 + t44410 + t44417 + t44418 + t44419 + t44427) - 17.854200000000002*(t44379 + t44380 + t44392 + t44410 + t44432 + t44433) - 54.151199999999996*(t44379 + t44380 + t44392 + t44410 + t44418 + t44438 + t44439 + t44440 + t44444 + t44457) - 7.435980000000001*(t44379 + t44380 + t44392 + t44410 + t44418 + t44439 + t44440 + t44461 + t44463 + t44464 + t44471 + t44479) - 5.6603699999999995*(t44379 + t44380 + t44392 + t44410 + t44418 + t44439 + t44440 + t44463 + t44464 + t44484 + t44485 + t44493 + t44510 + t44516) - 7.67142*(t44379 + t44380 + t44392 + t44410 + t44418 + t44439 + t44440 + t44463 + t44464 + t44485 + t44493 + t44519 + t44520 + t44530 + t44536 + t44541) - 1.4715*(t44379 + t44380 + t44392 + t44410 + t44418 + t44439 + t44440 + t44463 + t44464 + t44485 + t44493 + t44520 + t44530 + t44547 + t44548 + t44549 + t44558 + t44566) - 17.854200000000002*(t44572 + t44573 + t44577 + t44581 + t44591 + t44607) - 11.4777*(t44572 + t44573 + t44577 + t44581 + t44613 + t44617 + t44621 + t44622) - 54.151199999999996*(t44572 + t44573 + t44577 + t44581 + t44621 + t44625 + t44626 + t44627 + t44631 + t44653) - 7.435980000000001*(t44572 + t44573 + t44577 + t44581 + t44621 + t44626 + t44627 + t44671 + t44672 + t44679 + t44692 + t44699) - 5.6603699999999995*(t44572 + t44573 + t44577 + t44581 + t44621 + t44626 + t44627 + t44672 + t44679 + t44702 + t44712 + t44713 + t44720 + t44757) - 7.67142*(t44572 + t44573 + t44577 + t44581 + t44621 + t44626 + t44627 + t44672 + t44679 + t44712 + t44713 + t44763 + t44773 + t44777 + t44796 + t44809) - 1.4715*(t44572 + t44573 + t44577 + t44581 + t44621 + t44626 + t44627 + t44672 + t44679 + t44712 + t44713 + t44773 + t44777 + t44818 + t44822 + t44836 + t44843 + t44847);
  p_output1[6]=-17.854200000000002*(t44573 + t44577 + t44581 + t44591 + t44607 + t44852) - 11.4777*(t44573 + t44577 + t44581 + t44613 + t44617 + t44621 + t44622 + t44852) - 54.151199999999996*(t44573 + t44577 + t44581 + t44621 + t44625 + t44626 + t44627 + t44631 + t44653 + t44852) - 7.435980000000001*(t44573 + t44577 + t44581 + t44621 + t44626 + t44627 + t44671 + t44672 + t44679 + t44692 + t44699 + t44852) - 5.6603699999999995*(t44573 + t44577 + t44581 + t44621 + t44626 + t44627 + t44672 + t44679 + t44702 + t44712 + t44713 + t44720 + t44757 + t44852) - 7.67142*(t44573 + t44577 + t44581 + t44621 + t44626 + t44627 + t44672 + t44679 + t44712 + t44713 + t44763 + t44773 + t44777 + t44796 + t44809 + t44852) - 1.4715*(t44573 + t44577 + t44581 + t44621 + t44626 + t44627 + t44672 + t44679 + t44712 + t44713 + t44773 + t44777 + t44818 + t44822 + t44836 + t44843 + t44847 + t44852);
  p_output1[7]=-17.854200000000002*(t44902 + t44909 + 0.1351*t44912 + 0.0179*t44920) - 11.4777*(t44902 + t44909 + 0.135*t44085*t44912 - 0.049*t44095*t44912 - 0.0343*t44920 + t44933) - 54.151199999999996*(t44902 + t44909 + 0.1708*t44085*t44912 + t44933 + t44941 + t44942 - 0.0489*t44948 - 0.1498*t44961) - 7.435980000000001*(t44902 + t44909 + 0.1327*t44085*t44912 + t44933 + t44941 + t44942 + t44969 + t44970 - 0.233*t44973 - 0.0169*t44977) - 5.6603699999999995*(t44902 + t44909 + 0.1303*t44085*t44912 + t44933 + t44941 + t44942 + t44969 + t44970 + 0.0004*(-1.*t44255*t44973 - 1.*t44251*t44977) + t44982 + t44983 - 0.4541*t44990) - 7.67142*(t44902 + t44909 + 0.1318*t44085*t44912 + t44933 + t44941 + t44942 + t44969 + t44970 + t44982 + t44983 + t44999 + t45006 - 0.816*t45016 - 0.0122*t45023) - 1.4715*(t44902 + t44909 + 0.1306*t44085*t44912 + t44933 + t44941 + t44942 + t44969 + t44970 + t44982 + t44983 + t44999 + t45006 + t44361*t45016 + t44365*t45023 + 0.0059*(t44356*t45016 + t44349*t45023) - 1.1182*(t44349*t45016 - 1.*t44356*t45023));
  p_output1[8]=-11.4777*(t45083 + t45098 - 0.049*t45120 + 0.135*t45130) - 54.151199999999996*(t45083 + t45098 - 0.0489*t44148*t45120 + 0.1498*t44154*t45120 + 0.1708*t45130 + t45136) - 7.435980000000001*(t45083 + t45098 + 0.1327*t45130 + t45136 + t45145 + t45152 - 0.233*t45160 - 0.0169*t45173) - 5.6603699999999995*(t45083 + t45098 + 0.1303*t45130 + t45136 + t45145 + t45152 + 0.0004*(-1.*t44255*t45160 - 1.*t44251*t45173) + t45185 + t45192 - 0.4541*t45209) - 7.67142*(t45083 + t45098 + 0.1318*t45130 + t45136 + t45145 + t45152 + t45185 + t45192 + t45229 + t45233 - 0.816*t45239 - 0.0122*t45259) - 1.4715*(t45083 + t45098 + 0.1306*t45130 + t45136 + t45145 + t45152 + t45185 + t45192 + t45229 + t45233 + t44361*t45239 + t44365*t45259 + 0.0059*(t44356*t45239 + t44349*t45259) - 1.1182*(t44349*t45239 - 1.*t44356*t45259));
  p_output1[9]=-54.151199999999996*(t45348 + t45361 - 0.1498*t45371 - 0.0489*t45377) - 7.435980000000001*(t45348 + t45361 + t45382 + t45383 - 0.0169*t45386 - 0.233*t45401) - 5.6603699999999995*(t45348 + t45361 + t45382 + t45383 + 0.0004*(-1.*t44251*t45386 - 1.*t44255*t45401) + t45405 + t45407 - 0.4541*t45415) - 7.67142*(t45348 + t45361 + t45382 + t45383 + t45405 + t45407 + t45435 + t45440 - 0.0122*t45443 - 0.816*t45449) - 1.4715*(t45348 + t45361 + t45382 + t45383 + t45405 + t45407 + t45435 + t45440 + t44365*t45443 + t44361*t45449 - 1.1182*(-1.*t44356*t45443 + t44349*t45449) + 0.0059*(t44349*t45443 + t44356*t45449));
  p_output1[10]=-7.435980000000001*(t45494 + t45500 - 0.0169*t45502 - 0.233*t45505) - 5.6603699999999995*(t45494 + t45500 + t45513 + t45516 - 0.4541*t45521 + 0.0004*(-1.*t44255*t45505 + t45523)) - 7.67142*(t45494 + t45500 + t45513 + t45516 + t45550 + t45554 - 0.0122*t45565 - 0.816*t45584) - 1.4715*(t45494 + t45500 + t45513 + t45516 + t45550 + t45554 + t44365*t45565 + t44361*t45584 - 1.1182*(-1.*t44356*t45565 + t44349*t45584) + 0.0059*(t44349*t45565 + t44356*t45584));
  p_output1[11]=-5.6603699999999995*(t45638 + 0.0004*(t45523 + t44255*t45653) + t45654 - 0.4541*t45661) - 7.67142*(t45638 + t45654 + t45669 + t45686 - 0.0122*t45694 - 0.816*t45707) - 1.4715*(t45638 + t45654 + t45669 + t45686 + t44365*t45694 + t44361*t45707 - 1.1182*(-1.*t44356*t45694 + t44349*t45707) + 0.0059*(t44349*t45694 + t44356*t45707));
  p_output1[12]=-7.67142*(t45782 + t45791 - 0.0122*t45805 - 0.816*t45811) - 1.4715*(t45782 + t45791 + t44365*t45805 + t44361*t45811 - 1.1182*(t44349*t45811 + t45820) + 0.0059*(t44356*t45811 + t45824));
  p_output1[13]=-1.4715*((0.0216*t44349 + t44364)*t45805 + (-1.1135*t44349 - 0.0216*t44356)*t45866 - 1.1182*(t45820 - 1.*t44349*t45866) + 0.0059*(t45824 - 1.*t44356*t45866));
  p_output1[14]=-11.4777*(t44380 + t44392 + t44410 + t44417 + t44418 + t44419 + t44427 + t45885) - 17.854200000000002*(t44380 + t44392 + t44410 + t44432 + t44433 + t45885) - 54.151199999999996*(t44380 + t44392 + t44410 + t44418 + t44438 + t44439 + t44440 + t44444 + t44457 + t45885) - 7.435980000000001*(t44380 + t44392 + t44410 + t44418 + t44439 + t44440 + t44461 + t44463 + t44464 + t44471 + t44479 + t45885) - 5.6603699999999995*(t44380 + t44392 + t44410 + t44418 + t44439 + t44440 + t44463 + t44464 + t44484 + t44485 + t44493 + t44510 + t44516 + t45885) - 7.67142*(t44380 + t44392 + t44410 + t44418 + t44439 + t44440 + t44463 + t44464 + t44485 + t44493 + t44519 + t44520 + t44530 + t44536 + t44541 + t45885) - 1.4715*(t44380 + t44392 + t44410 + t44418 + t44439 + t44440 + t44463 + t44464 + t44485 + t44493 + t44520 + t44530 + t44547 + t44548 + t44549 + t44558 + t44566 + t45885);
  p_output1[15]=-11.4777*(t45959 + t45960 - 0.135*t42866*t45962 - 0.049*t42928*t45962 + t45964 - 0.0343*t45967) - 17.854200000000002*(t45959 + t45960 - 0.1351*t45962 + 0.0179*t45967) - 54.151199999999996*(t45959 + t45960 - 0.1708*t42866*t45962 + t45964 + t45976 + t45982 - 0.1498*t45999 - 0.0489*t46006) - 7.435980000000001*(t45959 + t45960 - 0.1327*t42866*t45962 + t45964 + t45976 + t45982 + t46013 + t46014 - 0.0169*t46024 - 0.233*t46038) - 5.6603699999999995*(t45959 + t45960 - 0.1303*t42866*t45962 + t45964 + t45976 + t45982 + t46013 + t46014 + 0.0004*(-1.*t43684*t46024 - 1.*t43772*t46038) + t46052 + t46053 - 0.4541*t46056) - 7.67142*(t45959 + t45960 - 0.1318*t42866*t45962 + t45964 + t45976 + t45982 + t46013 + t46014 + t46052 + t46053 + t46071 + t46081 - 0.0122*t46096 - 0.816*t46100) - 1.4715*(t45959 + t45960 - 0.1306*t42866*t45962 + t45964 + t45976 + t45982 + t46013 + t46014 + t46052 + t46053 + t46071 + t46081 + t44011*t46096 + t44004*t46100 - 1.1182*(-1.*t43999*t46096 + t43981*t46100) + 0.0059*(t43981*t46096 + t43999*t46100));
  p_output1[16]=-54.151199999999996*(t46153 + t46172 - 0.0489*t43187*t46202 + 0.1498*t43201*t46202 + t46208 - 0.1708*t46222) - 11.4777*(t46153 + t46172 - 0.049*t46202 - 0.135*t46222) - 7.435980000000001*(t46153 + t46172 + t46208 - 0.1327*t46222 + t46234 + t46251 - 0.233*t46258 - 0.0169*t46268) - 5.6603699999999995*(t46153 + t46172 + t46208 - 0.1303*t46222 + t46234 + t46251 + 0.0004*(-1.*t43772*t46258 - 1.*t43684*t46268) + t46312 + t46317 - 0.4541*t46333) - 7.67142*(t46153 + t46172 + t46208 - 0.1318*t46222 + t46234 + t46251 + t46312 + t46317 + t46350 + t46355 - 0.816*t46362 - 0.0122*t46394) - 1.4715*(t46153 + t46172 + t46208 - 0.1306*t46222 + t46234 + t46251 + t46312 + t46317 + t46350 + t46355 + t44004*t46362 + t44011*t46394 + 0.0059*(t43999*t46362 + t43981*t46394) - 1.1182*(t43981*t46362 - 1.*t43999*t46394));
  p_output1[17]=-54.151199999999996*(t46467 + t46497 - 0.1498*t46500 - 0.0489*t46513) - 7.435980000000001*(t46467 + t46497 + t46525 + t46526 - 0.0169*t46531 - 0.233*t46542) - 5.6603699999999995*(t46467 + t46497 + t46525 + t46526 + 0.0004*(-1.*t43684*t46531 - 1.*t43772*t46542) + t46546 + t46547 - 0.4541*t46595) - 7.67142*(t46467 + t46497 + t46525 + t46526 + t46546 + t46547 + t46620 + t46635 - 0.0122*t46638 - 0.816*t46644) - 1.4715*(t46467 + t46497 + t46525 + t46526 + t46546 + t46547 + t46620 + t46635 + t44011*t46638 + t44004*t46644 - 1.1182*(-1.*t43999*t46638 + t43981*t46644) + 0.0059*(t43981*t46638 + t43999*t46644));
  p_output1[18]=-7.435980000000001*(t46751 + t46765 - 0.0169*t46767 - 0.233*t46799) - 5.6603699999999995*(t46751 + t46765 + t46808 + t46809 - 0.4541*t46812 + 0.0004*(-1.*t43772*t46799 + t46875)) - 7.67142*(t46751 + t46765 + t46808 + t46809 + t46905 + t46917 - 0.0122*t46940 - 0.816*t46987) - 1.4715*(t46751 + t46765 + t46808 + t46809 + t46905 + t46917 + t44011*t46940 + t44004*t46987 - 1.1182*(-1.*t43999*t46940 + t43981*t46987) + 0.0059*(t43981*t46940 + t43999*t46987));
  p_output1[19]=-5.6603699999999995*(t47106 + 0.0004*(t46875 + t43772*t47140) + t47142 - 0.4541*t47147) - 7.67142*(t47106 + t47142 + t47164 + t47172 - 0.0122*t47291 - 0.816*t47299) - 1.4715*(t47106 + t47142 + t47164 + t47172 + t44011*t47291 + t44004*t47299 - 1.1182*(-1.*t43999*t47291 + t43981*t47299) + 0.0059*(t43981*t47291 + t43999*t47299));
  p_output1[20]=-7.67142*(t47435 + t47438 - 0.0122*t47450 - 0.816*t47455) - 1.4715*(t47435 + t47438 + t44011*t47450 + t44004*t47455 - 1.1182*(t43981*t47455 + t47462) + 0.0059*(t43999*t47455 + t47471));
  p_output1[21]=-1.4715*((0.0216*t43981 + t44010)*t47450 + (-1.1135*t43981 - 0.0216*t43999)*t47515 - 1.1182*(t47462 - 1.*t43981*t47515) + 0.0059*(t47471 - 1.*t43999*t47515));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 22, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_cassie.hh"

namespace SymFunction
{

void Ge_vec_cassie_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
