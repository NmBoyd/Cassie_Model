/*
 * Automatically Generated from Mathematica.
 * Mon 2 Jul 2018 15:37:43 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "H_LeftToeBottom_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t204;
  double t509;
  double t427;
  double t443;
  double t600;
  double t775;
  double t483;
  double t725;
  double t734;
  double t194;
  double t790;
  double t865;
  double t872;
  double t1001;
  double t752;
  double t953;
  double t960;
  double t172;
  double t1027;
  double t1044;
  double t1046;
  double t1183;
  double t964;
  double t1050;
  double t1157;
  double t160;
  double t1189;
  double t1222;
  double t1284;
  double t1515;
  double t1434;
  double t1471;
  double t1506;
  double t1528;
  double t1542;
  double t1583;
  double t1599;
  double t1674;
  double t1572;
  double t1765;
  double t1789;
  double t1903;
  double t1912;
  double t1939;
  double t1842;
  double t1961;
  double t1989;
  double t2022;
  double t2039;
  double t2047;
  double t2005;
  double t2076;
  double t2137;
  double t2221;
  double t2269;
  double t2282;
  double t1159;
  double t1285;
  double t1301;
  double t1325;
  double t1329;
  double t1363;
  double t2209;
  double t2295;
  double t2335;
  double t2344;
  double t2347;
  double t2381;
  double t2548;
  double t2622;
  double t2625;
  double t2638;
  double t2686;
  double t2732;
  double t2633;
  double t2753;
  double t2755;
  double t2858;
  double t2905;
  double t2920;
  double t2841;
  double t2926;
  double t2938;
  double t2966;
  double t2985;
  double t2994;
  double t2950;
  double t3011;
  double t3024;
  double t3026;
  double t3038;
  double t3046;
  double t2465;
  double t2468;
  double t2469;
  double t2340;
  double t2382;
  double t2397;
  double t3025;
  double t3058;
  double t3063;
  double t3094;
  double t3104;
  double t3105;
  double t1307;
  double t1402;
  double t1404;
  double t2470;
  double t2471;
  double t2501;
  double t2430;
  double t2525;
  double t16;
  double t3212;
  double t3236;
  double t3261;
  double t3079;
  double t3109;
  double t3144;
  double t3165;
  double t3166;
  double t3168;
  double t3204;
  double t3268;
  double t3278;
  double t3299;
  double t3423;
  double t3444;
  double t3450;
  double t3494;
  double t3509;
  double t80;
  double t3698;
  double t3542;
  double t4811;
  double t4859;
  double t4800;
  double t5003;
  double t5030;
  double t5035;
  double t4824;
  double t4869;
  double t4962;
  double t5037;
  double t4751;
  double t5140;
  double t5141;
  double t5320;
  double t4991;
  double t5059;
  double t5063;
  double t5363;
  double t4675;
  double t5379;
  double t5416;
  double t5477;
  double t5095;
  double t5369;
  double t5370;
  double t5523;
  double t4668;
  double t5577;
  double t5585;
  double t5594;
  double t5377;
  double t5548;
  double t5553;
  double t5620;
  double t2541;
  double t5811;
  double t5833;
  double t5837;
  double t5732;
  double t5749;
  double t5781;
  double t5866;
  double t5875;
  double t5895;
  double t5793;
  double t5840;
  double t5842;
  double t5954;
  double t5967;
  double t5978;
  double t5862;
  double t5919;
  double t5921;
  double t6035;
  double t6049;
  double t6071;
  double t5947;
  double t6001;
  double t6024;
  double t3570;
  double t3596;
  double t3626;
  double t6481;
  double t6484;
  double t6503;
  double t6379;
  double t6400;
  double t6419;
  double t6652;
  double t6655;
  double t6685;
  double t6444;
  double t6613;
  double t6634;
  double t6722;
  double t6727;
  double t6742;
  double t6642;
  double t6688;
  double t6697;
  double t3705;
  double t3750;
  double t3759;
  double t5560;
  double t5628;
  double t5644;
  double t5656;
  double t5668;
  double t5677;
  double t5686;
  double t5704;
  double t5715;
  double t3825;
  double t3839;
  double t3846;
  double t6720;
  double t6748;
  double t6750;
  double t6754;
  double t6770;
  double t6785;
  double t6809;
  double t6833;
  double t6837;
  double t3908;
  double t3909;
  double t3937;
  double t6032;
  double t6091;
  double t6114;
  double t6127;
  double t6192;
  double t6194;
  double t6199;
  double t6226;
  double t6255;
  double t3960;
  double t4007;
  double t4040;
  double t4167;
  double t4335;
  double t4376;
  double t4397;
  double t4534;
  double t4598;
  double t4623;
  double t7072;
  double t7123;
  double t7132;
  double t7189;
  double t7203;
  double t7208;
  double t7153;
  double t7154;
  double t7171;
  double t7560;
  double t7575;
  double t7734;
  double t7739;
  double t7926;
  double t7929;
  double t8100;
  double t8113;
  double t8352;
  double t8353;
  double t7493;
  double t7512;
  double t7515;
  double t7527;
  double t7533;
  double t7631;
  double t7643;
  double t7644;
  double t7685;
  double t7703;
  double t7714;
  double t7750;
  double t7752;
  double t7761;
  double t7784;
  double t7806;
  double t7821;
  double t7938;
  double t7962;
  double t7968;
  double t8018;
  double t8028;
  double t8038;
  double t8169;
  double t8197;
  double t8221;
  double t8237;
  double t8254;
  double t8257;
  double t8440;
  double t8447;
  double t8464;
  double t8479;
  double t8488;
  double t8492;
  double t9169;
  double t9177;
  double t9220;
  double t9242;
  double t9354;
  double t9359;
  double t9424;
  double t9429;
  double t9445;
  double t9446;
  double t9121;
  double t9127;
  double t9266;
  double t9280;
  double t9287;
  double t9178;
  double t9180;
  double t9188;
  double t9325;
  double t9333;
  double t9340;
  double t9390;
  double t9395;
  double t9396;
  double t9408;
  double t9413;
  double t9418;
  double t9430;
  double t9434;
  double t9435;
  double t9438;
  double t9440;
  double t9443;
  double t9449;
  double t9451;
  double t9452;
  double t9457;
  double t9458;
  double t9460;
  double t9099;
  double t9103;
  double t9104;
  double t9108;
  double t9135;
  double t9138;
  double t9153;
  double t9161;
  double t9190;
  double t9191;
  double t9195;
  double t9202;
  double t9206;
  double t9293;
  double t9352;
  double t9399;
  double t9419;
  double t9437;
  double t9444;
  double t9453;
  double t9461;
  double t9462;
  double t9463;
  double t9464;
  double t9466;
  double t9469;
  double t9470;
  double t9472;
  double t9473;
  double t9474;
  double t9475;
  double t9477;
  double t9479;
  double t9480;
  double t9481;
  double t9482;
  double t9483;
  double t9484;
  double t7458;
  double t7478;
  double t7537;
  double t7666;
  double t7723;
  double t7771;
  double t7891;
  double t7983;
  double t8040;
  double t8230;
  double t8307;
  double t8466;
  double t8496;
  double t8517;
  double t8552;
  double t8557;
  double t8815;
  double t8868;
  double t8888;
  double t8920;
  double t8972;
  double t8980;
  double t8995;
  double t9016;
  double t9029;
  double t9030;
  double t9039;
  double t9056;
  double t9082;
  double t9085;
  double t8590;
  double t8593;
  double t8596;
  double t8604;
  double t8606;
  double t8608;
  double t8683;
  double t8687;
  double t8704;
  double t8706;
  double t8709;
  double t8725;
  double t8729;
  double t8735;
  double t8774;
  double t8784;
  double t8790;
  double t8791;
  double t9497;
  double t9498;
  double t9499;
  double t9500;
  double t9501;
  double t9502;
  double t9504;
  double t9505;
  double t9506;
  double t9507;
  double t9508;
  double t9509;
  double t9510;
  double t9512;
  double t9513;
  double t9514;
  double t9465;
  double t9485;
  double t9486;
  double t9523;
  double t9524;
  double t9525;
  double t9491;
  double t9494;
  double t9495;
  t204 = Cos(var1[1]);
  t509 = Cos(var1[3]);
  t427 = Cos(var1[2]);
  t443 = Sin(var1[3]);
  t600 = Sin(var1[2]);
  t775 = Cos(var1[4]);
  t483 = -1.*t204*t427*t443;
  t725 = -1.*t509*t204*t600;
  t734 = t483 + t725;
  t194 = Sin(var1[4]);
  t790 = t509*t204*t427;
  t865 = -1.*t204*t443*t600;
  t872 = t790 + t865;
  t1001 = Cos(var1[5]);
  t752 = t194*t734;
  t953 = t775*t872;
  t960 = t752 + t953;
  t172 = Sin(var1[5]);
  t1027 = t775*t734;
  t1044 = -1.*t194*t872;
  t1046 = t1027 + t1044;
  t1183 = Cos(var1[6]);
  t964 = -1.*t172*t960;
  t1050 = t1001*t1046;
  t1157 = t964 + t1050;
  t160 = Sin(var1[6]);
  t1189 = t1001*t960;
  t1222 = t172*t1046;
  t1284 = t1189 + t1222;
  t1515 = Sin(var1[0]);
  t1434 = Cos(var1[0]);
  t1471 = Sin(var1[1]);
  t1506 = t1434*t427*t1471;
  t1528 = -1.*t1515*t600;
  t1542 = t1506 + t1528;
  t1583 = -1.*t427*t1515;
  t1599 = -1.*t1434*t1471*t600;
  t1674 = t1583 + t1599;
  t1572 = -1.*t443*t1542;
  t1765 = t509*t1674;
  t1789 = t1572 + t1765;
  t1903 = t509*t1542;
  t1912 = t443*t1674;
  t1939 = t1903 + t1912;
  t1842 = t194*t1789;
  t1961 = t775*t1939;
  t1989 = t1842 + t1961;
  t2022 = t775*t1789;
  t2039 = -1.*t194*t1939;
  t2047 = t2022 + t2039;
  t2005 = -1.*t172*t1989;
  t2076 = t1001*t2047;
  t2137 = t2005 + t2076;
  t2221 = t1001*t1989;
  t2269 = t172*t2047;
  t2282 = t2221 + t2269;
  t1159 = t160*t1157;
  t1285 = t1183*t1284;
  t1301 = t1159 + t1285;
  t1325 = t1183*t1157;
  t1329 = -1.*t160*t1284;
  t1363 = t1325 + t1329;
  t2209 = t160*t2137;
  t2295 = t1183*t2282;
  t2335 = t2209 + t2295;
  t2344 = t1183*t2137;
  t2347 = -1.*t160*t2282;
  t2381 = t2344 + t2347;
  t2548 = t427*t1515*t1471;
  t2622 = t1434*t600;
  t2625 = t2548 + t2622;
  t2638 = t1434*t427;
  t2686 = -1.*t1515*t1471*t600;
  t2732 = t2638 + t2686;
  t2633 = -1.*t443*t2625;
  t2753 = t509*t2732;
  t2755 = t2633 + t2753;
  t2858 = t509*t2625;
  t2905 = t443*t2732;
  t2920 = t2858 + t2905;
  t2841 = t194*t2755;
  t2926 = t775*t2920;
  t2938 = t2841 + t2926;
  t2966 = t775*t2755;
  t2985 = -1.*t194*t2920;
  t2994 = t2966 + t2985;
  t2950 = -1.*t172*t2938;
  t3011 = t1001*t2994;
  t3024 = t2950 + t3011;
  t3026 = t1001*t2938;
  t3038 = t172*t2994;
  t3046 = t3026 + t3038;
  t2465 = -0.766044*t1301;
  t2468 = 0.642788*t1363;
  t2469 = t2465 + t2468;
  t2340 = -0.766044*t2335;
  t2382 = 0.642788*t2381;
  t2397 = t2340 + t2382;
  t3025 = t160*t3024;
  t3058 = t1183*t3046;
  t3063 = t3025 + t3058;
  t3094 = t1183*t3024;
  t3104 = -1.*t160*t3046;
  t3105 = t3094 + t3104;
  t1307 = 0.642788*t1301;
  t1402 = 0.766044*t1363;
  t1404 = t1307 + t1402;
  t2470 = 0.642788*t2335;
  t2471 = 0.766044*t2381;
  t2501 = t2470 + t2471;
  t2430 = t1404*t2397;
  t2525 = -1.*t2469*t2501;
  t16 = Cos(var1[8]);
  t3212 = -0.766044*t3063;
  t3236 = 0.642788*t3105;
  t3261 = t3212 + t3236;
  t3079 = 0.642788*t3063;
  t3109 = 0.766044*t3105;
  t3144 = t3079 + t3109;
  t3165 = t1434*t204*t2469;
  t3166 = t1471*t2397;
  t3168 = t3165 + t3166;
  t3204 = -1.*t3144*t3168;
  t3268 = t1434*t204*t1404;
  t3278 = t1471*t2501;
  t3299 = t3268 + t3278;
  t3423 = t3261*t3299;
  t3444 = t2430 + t2525;
  t3450 = -1.*t204*t1515*t3444;
  t3494 = 0. + t3204 + t3423 + t3450;
  t3509 = 1/t3494;
  t80 = Sin(var1[7]);
  t3698 = Sin(var1[8]);
  t3542 = Cos(var1[7]);
  t4811 = Cos(var1[9]);
  t4859 = Sin(var1[9]);
  t4800 = Cos(var1[10]);
  t5003 = t3542*t4811;
  t5030 = -1.*t80*t3698*t4859;
  t5035 = t5003 + t5030;
  t4824 = t4811*t80*t3698;
  t4869 = t3542*t4859;
  t4962 = t4824 + t4869;
  t5037 = Sin(var1[10]);
  t4751 = Cos(var1[11]);
  t5140 = t4800*t5035;
  t5141 = -1.*t4962*t5037;
  t5320 = t5140 + t5141;
  t4991 = t4800*t4962;
  t5059 = t5035*t5037;
  t5063 = t4991 + t5059;
  t5363 = Sin(var1[11]);
  t4675 = Cos(var1[12]);
  t5379 = t4751*t5320;
  t5416 = -1.*t5063*t5363;
  t5477 = t5379 + t5416;
  t5095 = t4751*t5063;
  t5369 = t5320*t5363;
  t5370 = t5095 + t5369;
  t5523 = Sin(var1[12]);
  t4668 = Cos(var1[13]);
  t5577 = t4675*t5477;
  t5585 = -1.*t5370*t5523;
  t5594 = t5577 + t5585;
  t5377 = t4675*t5370;
  t5548 = t5477*t5523;
  t5553 = t5377 + t5548;
  t5620 = Sin(var1[13]);
  t2541 = 0. + t2430 + t2525;
  t5811 = -1.*t4811*t80;
  t5833 = -1.*t3542*t3698*t4859;
  t5837 = t5811 + t5833;
  t5732 = t3542*t4811*t3698;
  t5749 = -1.*t80*t4859;
  t5781 = t5732 + t5749;
  t5866 = t4800*t5837;
  t5875 = -1.*t5781*t5037;
  t5895 = t5866 + t5875;
  t5793 = t4800*t5781;
  t5840 = t5837*t5037;
  t5842 = t5793 + t5840;
  t5954 = t4751*t5895;
  t5967 = -1.*t5842*t5363;
  t5978 = t5954 + t5967;
  t5862 = t4751*t5842;
  t5919 = t5895*t5363;
  t5921 = t5862 + t5919;
  t6035 = t4675*t5978;
  t6049 = -1.*t5921*t5523;
  t6071 = t6035 + t6049;
  t5947 = t4675*t5921;
  t6001 = t5978*t5523;
  t6024 = t5947 + t6001;
  t3570 = -1.*t1404*t3261;
  t3596 = t2469*t3144;
  t3626 = 0. + t3570 + t3596;
  t6481 = -1.*t16*t4800*t4859;
  t6484 = -1.*t16*t4811*t5037;
  t6503 = t6481 + t6484;
  t6379 = t16*t4811*t4800;
  t6400 = -1.*t16*t4859*t5037;
  t6419 = t6379 + t6400;
  t6652 = t4751*t6503;
  t6655 = -1.*t6419*t5363;
  t6685 = t6652 + t6655;
  t6444 = t4751*t6419;
  t6613 = t6503*t5363;
  t6634 = t6444 + t6613;
  t6722 = t4675*t6685;
  t6727 = -1.*t6634*t5523;
  t6742 = t6722 + t6727;
  t6642 = t4675*t6634;
  t6688 = t6685*t5523;
  t6697 = t6642 + t6688;
  t3705 = t2501*t3261;
  t3750 = -1.*t2397*t3144;
  t3759 = 0. + t3705 + t3750;
  t5560 = t4668*t5553;
  t5628 = t5594*t5620;
  t5644 = t5560 + t5628;
  t5656 = 0.642788*t5644;
  t5668 = t4668*t5594;
  t5677 = -1.*t5553*t5620;
  t5686 = t5668 + t5677;
  t5704 = 0.766044*t5686;
  t5715 = t5656 + t5704;
  t3825 = -1.*t1434*t204*t2469;
  t3839 = -1.*t1471*t2397;
  t3846 = 0. + t3825 + t3839;
  t6720 = t4668*t6697;
  t6748 = t6742*t5620;
  t6750 = t6720 + t6748;
  t6754 = 0.642788*t6750;
  t6770 = t4668*t6742;
  t6785 = -1.*t6697*t5620;
  t6809 = t6770 + t6785;
  t6833 = 0.766044*t6809;
  t6837 = t6754 + t6833;
  t3908 = -1.*t204*t1515*t2397;
  t3909 = t1434*t204*t3261;
  t3937 = 0. + t3908 + t3909;
  t6032 = t4668*t6024;
  t6091 = t6071*t5620;
  t6114 = t6032 + t6091;
  t6127 = 0.642788*t6114;
  t6192 = t4668*t6071;
  t6194 = -1.*t6024*t5620;
  t6199 = t6192 + t6194;
  t6226 = 0.766044*t6199;
  t6255 = t6127 + t6226;
  t3960 = t204*t1515*t2469;
  t4007 = t1471*t3261;
  t4040 = 0. + t3960 + t4007;
  t4167 = 0. + t3268 + t3278;
  t4335 = t204*t1515*t2501;
  t4376 = -1.*t1434*t204*t3144;
  t4397 = 0. + t4335 + t4376;
  t4534 = -1.*t204*t1515*t1404;
  t4598 = -1.*t1471*t3144;
  t4623 = 0. + t4534 + t4598;
  t7072 = -0.766044*t5644;
  t7123 = 0.642788*t5686;
  t7132 = t7072 + t7123;
  t7189 = -0.766044*t6750;
  t7203 = 0.642788*t6809;
  t7208 = t7189 + t7203;
  t7153 = -0.766044*t6114;
  t7154 = 0.642788*t6199;
  t7171 = t7153 + t7154;
  t7560 = -1.*t4811;
  t7575 = 1. + t7560;
  t7734 = -1.*t4800;
  t7739 = 1. + t7734;
  t7926 = -1.*t4751;
  t7929 = 1. + t7926;
  t8100 = -1.*t4675;
  t8113 = 1. + t8100;
  t8352 = -1.*t4668;
  t8353 = 1. + t8352;
  t7493 = -1.*t16;
  t7512 = 1. + t7493;
  t7515 = -0.135*t7512;
  t7527 = 0.049*t3698;
  t7533 = 0. + t7515 + t7527;
  t7631 = -0.049*t7575;
  t7643 = -0.09*t4859;
  t7644 = 0. + t7631 + t7643;
  t7685 = -0.09*t7575;
  t7703 = 0.049*t4859;
  t7714 = 0. + t7685 + t7703;
  t7750 = -0.049*t7739;
  t7752 = -0.21*t5037;
  t7761 = 0. + t7750 + t7752;
  t7784 = -0.21*t7739;
  t7806 = 0.049*t5037;
  t7821 = 0. + t7784 + t7806;
  t7938 = -0.0016*t7929;
  t7962 = -0.2707*t5363;
  t7968 = 0. + t7938 + t7962;
  t8018 = -0.2707*t7929;
  t8028 = 0.0016*t5363;
  t8038 = 0. + t8018 + t8028;
  t8169 = 0.0184*t8113;
  t8197 = -0.7055*t5523;
  t8221 = 0. + t8169 + t8197;
  t8237 = -0.7055*t8113;
  t8254 = -0.0184*t5523;
  t8257 = 0. + t8237 + t8254;
  t8440 = -0.0216*t8353;
  t8447 = -1.1135*t5620;
  t8464 = 0. + t8440 + t8447;
  t8479 = -1.1135*t8353;
  t8488 = 0.0216*t5620;
  t8492 = 0. + t8479 + t8488;
  t9169 = -1.*t427;
  t9177 = 1. + t9169;
  t9220 = -1.*t509;
  t9242 = 1. + t9220;
  t9354 = -1.*t775;
  t9359 = 1. + t9354;
  t9424 = -1.*t1001;
  t9429 = 1. + t9424;
  t9445 = -1.*t1183;
  t9446 = 1. + t9445;
  t9121 = -1.*t204;
  t9127 = 1. + t9121;
  t9266 = -0.049*t9242;
  t9280 = -0.21*t443;
  t9287 = 0. + t9266 + t9280;
  t9178 = -0.049*t9177;
  t9180 = -0.09*t600;
  t9188 = 0. + t9178 + t9180;
  t9325 = -0.21*t9242;
  t9333 = 0.049*t443;
  t9340 = 0. + t9325 + t9333;
  t9390 = -0.2707*t9359;
  t9395 = 0.0016*t194;
  t9396 = 0. + t9390 + t9395;
  t9408 = -0.0016*t9359;
  t9413 = -0.2707*t194;
  t9418 = 0. + t9408 + t9413;
  t9430 = 0.0184*t9429;
  t9434 = -0.7055*t172;
  t9435 = 0. + t9430 + t9434;
  t9438 = -0.7055*t9429;
  t9440 = -0.0184*t172;
  t9443 = 0. + t9438 + t9440;
  t9449 = -1.1135*t9446;
  t9451 = 0.0216*t160;
  t9452 = 0. + t9449 + t9451;
  t9457 = -0.0216*t9446;
  t9458 = -1.1135*t160;
  t9460 = 0. + t9457 + t9458;
  t9099 = -1.*t1434;
  t9103 = 1. + t9099;
  t9104 = 0.135*t9103;
  t9108 = 0.1305*t1434*t204;
  t9135 = 0.135*t9127;
  t9138 = 0.049*t1471;
  t9153 = 0. + t9135 + t9138;
  t9161 = t1434*t9153;
  t9190 = t1434*t1471*t9188;
  t9191 = -0.09*t9177;
  t9195 = 0.049*t600;
  t9202 = 0. + t9191 + t9195;
  t9206 = -1.*t1515*t9202;
  t9293 = t9287*t1542;
  t9352 = t9340*t1674;
  t9399 = t9396*t1789;
  t9419 = t9418*t1939;
  t9437 = t9435*t1989;
  t9444 = t9443*t2047;
  t9453 = t9452*t2137;
  t9461 = t9460*t2282;
  t9462 = 0.0306*t2335;
  t9463 = -1.1312*t2381;
  t9464 = 0. + t9104 + t9108 + t9161 + t9190 + t9206 + t9293 + t9352 + t9399 + t9419 + t9437 + t9444 + t9453 + t9461 + t9462 + t9463;
  t9466 = -0.049*t9127;
  t9469 = t204*t427*t9287;
  t9470 = 0.004500000000000004*t1471;
  t9472 = t204*t9188;
  t9473 = -1.*t204*t9340*t600;
  t9474 = t9396*t734;
  t9475 = t9418*t872;
  t9477 = t9435*t960;
  t9479 = t9443*t1046;
  t9480 = t9452*t1157;
  t9481 = t9460*t1284;
  t9482 = 0.0306*t1301;
  t9483 = -1.1312*t1363;
  t9484 = 0. + t9466 + t9469 + t9470 + t9472 + t9473 + t9474 + t9475 + t9477 + t9479 + t9480 + t9481 + t9482 + t9483;
  t7458 = 0.135*t80;
  t7478 = -0.1305*t16*t80;
  t7537 = t80*t7533;
  t7666 = t80*t3698*t7644;
  t7723 = t3542*t7714;
  t7771 = t4962*t7761;
  t7891 = t5035*t7821;
  t7983 = t5063*t7968;
  t8040 = t5320*t8038;
  t8230 = t5370*t8221;
  t8307 = t5477*t8257;
  t8466 = t5553*t8464;
  t8496 = t5594*t8492;
  t8517 = 0.0306*t5644;
  t8552 = -1.1312*t5686;
  t8557 = 0. + t7458 + t7478 + t7537 + t7666 + t7723 + t7771 + t7891 + t7983 + t8040 + t8230 + t8307 + t8466 + t8496 + t8517 + t8552;
  t8815 = -0.049*t7512;
  t8868 = -0.004500000000000004*t3698;
  t8888 = t16*t7644;
  t8920 = t16*t4811*t7761;
  t8972 = -1.*t16*t4859*t7821;
  t8980 = t6419*t7968;
  t8995 = t6503*t8038;
  t9016 = t6634*t8221;
  t9029 = t6685*t8257;
  t9030 = t6697*t8464;
  t9039 = t6742*t8492;
  t9056 = 0.0306*t6750;
  t9082 = -1.1312*t6809;
  t9085 = 0. + t8815 + t8868 + t8888 + t8920 + t8972 + t8980 + t8995 + t9016 + t9029 + t9030 + t9039 + t9056 + t9082;
  t8590 = -1.*t3542;
  t8593 = 1. + t8590;
  t8596 = -0.135*t8593;
  t8604 = -0.1305*t3542*t16;
  t8606 = t3542*t7533;
  t8608 = t3542*t3698*t7644;
  t8683 = -1.*t80*t7714;
  t8687 = t5781*t7761;
  t8704 = t5837*t7821;
  t8706 = t5842*t7968;
  t8709 = t5895*t8038;
  t8725 = t5921*t8221;
  t8729 = t5978*t8257;
  t8735 = t6024*t8464;
  t8774 = t6071*t8492;
  t8784 = 0.0306*t6114;
  t8790 = -1.1312*t6199;
  t8791 = 0. + t8596 + t8604 + t8606 + t8608 + t8683 + t8687 + t8704 + t8706 + t8709 + t8725 + t8729 + t8735 + t8774 + t8784 + t8790;
  t9497 = -0.135*t1515;
  t9498 = 0.1305*t204*t1515;
  t9499 = t1515*t9153;
  t9500 = t1515*t1471*t9188;
  t9501 = t1434*t9202;
  t9502 = t9287*t2625;
  t9504 = t9340*t2732;
  t9505 = t9396*t2755;
  t9506 = t9418*t2920;
  t9507 = t9435*t2938;
  t9508 = t9443*t2994;
  t9509 = t9452*t3024;
  t9510 = t9460*t3046;
  t9512 = 0.0306*t3063;
  t9513 = -1.1312*t3105;
  t9514 = 0. + t9497 + t9498 + t9499 + t9500 + t9501 + t9502 + t9504 + t9505 + t9506 + t9507 + t9508 + t9509 + t9510 + t9512 + t9513;
  t9465 = t2469*t9464;
  t9485 = -1.*t9484*t2397;
  t9486 = t9465 + t9485;
  t9523 = t1434*t204*t9484;
  t9524 = t1471*t9464;
  t9525 = t9523 + t9524;
  t9491 = t1404*t9464;
  t9494 = -1.*t9484*t2501;
  t9495 = t9491 + t9494;

  p_output1(0)=0. - 1.*t16*t3509*t3542*t3626 + t3509*t3698*t3759 - 1.*t16*t2541*t3509*t80;
  p_output1(1)=0. + t3509*t3698*t3937 - 1.*t16*t3509*t3542*t4040 - 1.*t16*t3509*t3846*t80;
  p_output1(2)=0. + t3509*t3698*t4397 - 1.*t16*t3509*t3542*t4623 - 1.*t16*t3509*t4167*t80;
  p_output1(3)=0.;
  p_output1(4)=0. + t2541*t3509*t5715 + t3509*t3626*t6255 + t3509*t3759*t6837;
  p_output1(5)=0. + t3509*t3846*t5715 + t3509*t4040*t6255 + t3509*t3937*t6837;
  p_output1(6)=0. + t3509*t4167*t5715 + t3509*t4623*t6255 + t3509*t4397*t6837;
  p_output1(7)=0.;
  p_output1(8)=0. + t2541*t3509*t7132 + t3509*t3626*t7171 + t3509*t3759*t7208;
  p_output1(9)=0. + t3509*t3846*t7132 + t3509*t4040*t7171 + t3509*t3937*t7208;
  p_output1(10)=0. + t3509*t4167*t7132 + t3509*t4623*t7171 + t3509*t4397*t7208;
  p_output1(11)=0.;
  p_output1(12)=t2541*t3509*t8557 + t3509*t3626*t8791 + t3509*t3759*t9085 + t3509*(-1.*t3144*t9486 + t3261*t9495 - 1.*t3444*t9514);
  p_output1(13)=t3509*t3846*t8557 + t3509*t4040*t8791 + t3509*t3937*t9085 + t3509*(-1.*t1515*t204*t9486 + t3168*t9514 - 1.*t3261*t9525);
  p_output1(14)=t3509*t4167*t8557 + t3509*t4623*t8791 + t3509*t4397*t9085 + t3509*(t1515*t204*t9495 - 1.*t3299*t9514 + t3144*t9525);
  p_output1(15)=0. + (t3204 + t3423 + t3450)*t3509;
}


       
void H_LeftToeBottom_to_RightToeBottom(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
