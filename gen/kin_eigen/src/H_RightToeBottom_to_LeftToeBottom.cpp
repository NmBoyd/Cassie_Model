/*
 * Automatically Generated from Mathematica.
 * Mon 2 Jul 2018 15:37:41 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "H_RightToeBottom_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t766;
  double t857;
  double t1045;
  double t769;
  double t1088;
  double t591;
  double t1317;
  double t1323;
  double t1404;
  double t929;
  double t1108;
  double t1119;
  double t1512;
  double t428;
  double t1651;
  double t1715;
  double t1718;
  double t1138;
  double t1548;
  double t1551;
  double t1719;
  double t364;
  double t2040;
  double t2093;
  double t2149;
  double t1633;
  double t1907;
  double t1991;
  double t2153;
  double t2781;
  double t2497;
  double t2632;
  double t2888;
  double t3018;
  double t3036;
  double t2658;
  double t2801;
  double t2803;
  double t3199;
  double t3229;
  double t3351;
  double t2819;
  double t3080;
  double t3110;
  double t3509;
  double t3528;
  double t3535;
  double t3114;
  double t3377;
  double t3389;
  double t3692;
  double t3752;
  double t3759;
  double t3429;
  double t3562;
  double t3599;
  double t1999;
  double t2224;
  double t2228;
  double t2256;
  double t2383;
  double t2424;
  double t3626;
  double t3819;
  double t3825;
  double t3862;
  double t3883;
  double t3897;
  double t4019;
  double t4020;
  double t4061;
  double t3981;
  double t3997;
  double t4008;
  double t4317;
  double t4389;
  double t4420;
  double t4157;
  double t4260;
  double t4306;
  double t4493;
  double t4523;
  double t4534;
  double t4307;
  double t4426;
  double t4473;
  double t4711;
  double t4737;
  double t4763;
  double t4486;
  double t4545;
  double t4703;
  double t4888;
  double t4890;
  double t4892;
  double t4706;
  double t4765;
  double t4787;
  double t3826;
  double t3905;
  double t3929;
  double t2241;
  double t2428;
  double t2475;
  double t4866;
  double t4940;
  double t5032;
  double t5108;
  double t5133;
  double t5147;
  double t5085;
  double t5157;
  double t5186;
  double t5373;
  double t5458;
  double t5544;
  double t135;
  double t5677;
  double t5814;
  double t4151;
  double t5188;
  double t5227;
  double t5329;
  double t5369;
  double t5565;
  double t5595;
  double t5616;
  double t5818;
  double t5889;
  double t5907;
  double t5917;
  double t102;
  double t5959;
  double t6079;
  double t5999;
  double t6021;
  double t6047;
  double t6968;
  double t6886;
  double t6902;
  double t6995;
  double t7063;
  double t6955;
  double t7002;
  double t7014;
  double t6815;
  double t7067;
  double t7075;
  double t7076;
  double t7156;
  double t7025;
  double t7092;
  double t7112;
  double t6798;
  double t7178;
  double t7192;
  double t7194;
  double t7240;
  double t7118;
  double t7211;
  double t7217;
  double t6777;
  double t7244;
  double t7262;
  double t7271;
  double t3936;
  double t4114;
  double t4129;
  double t7533;
  double t7546;
  double t7564;
  double t7601;
  double t7617;
  double t7634;
  double t7574;
  double t7643;
  double t7674;
  double t7696;
  double t7707;
  double t7718;
  double t7691;
  double t7723;
  double t7727;
  double t7734;
  double t7743;
  double t7744;
  double t7733;
  double t7747;
  double t7750;
  double t7785;
  double t7790;
  double t7796;
  double t5928;
  double t7904;
  double t7925;
  double t7947;
  double t7976;
  double t7978;
  double t7991;
  double t7963;
  double t7992;
  double t8006;
  double t8017;
  double t8018;
  double t8036;
  double t8013;
  double t8040;
  double t8097;
  double t8113;
  double t8117;
  double t8129;
  double t8110;
  double t8130;
  double t8146;
  double t8197;
  double t8218;
  double t8228;
  double t6466;
  double t6468;
  double t6479;
  double t7238;
  double t7282;
  double t7309;
  double t7314;
  double t7336;
  double t7378;
  double t7407;
  double t7438;
  double t7458;
  double t6206;
  double t6271;
  double t6321;
  double t7756;
  double t7803;
  double t7805;
  double t7816;
  double t7832;
  double t7838;
  double t7839;
  double t7861;
  double t7870;
  double t6401;
  double t6409;
  double t6436;
  double t8186;
  double t8230;
  double t8248;
  double t8254;
  double t8283;
  double t8297;
  double t8316;
  double t8323;
  double t8331;
  double t6642;
  double t6662;
  double t6664;
  double t6513;
  double t6517;
  double t6549;
  double t6614;
  double t8463;
  double t8469;
  double t8492;
  double t8500;
  double t8505;
  double t8514;
  double t8534;
  double t8537;
  double t8548;
  double t8712;
  double t8715;
  double t8872;
  double t8875;
  double t8940;
  double t8942;
  double t9015;
  double t9018;
  double t9057;
  double t9059;
  double t8669;
  double t8686;
  double t8719;
  double t8723;
  double t8729;
  double t8879;
  double t8883;
  double t8888;
  double t8917;
  double t8920;
  double t8929;
  double t8972;
  double t8984;
  double t8987;
  double t8989;
  double t8992;
  double t8997;
  double t9029;
  double t9030;
  double t9039;
  double t9043;
  double t9048;
  double t9054;
  double t9066;
  double t9067;
  double t9069;
  double t9081;
  double t9082;
  double t9085;
  double t8648;
  double t8651;
  double t8663;
  double t8666;
  double t8687;
  double t8701;
  double t8704;
  double t8706;
  double t8735;
  double t8736;
  double t8744;
  double t8802;
  double t8809;
  double t8902;
  double t8931;
  double t8988;
  double t9003;
  double t9042;
  double t9056;
  double t9073;
  double t9086;
  double t9096;
  double t9098;
  double t9099;
  double t9104;
  double t9105;
  double t9108;
  double t9112;
  double t9117;
  double t9121;
  double t9122;
  double t9127;
  double t9128;
  double t9130;
  double t9135;
  double t9138;
  double t9142;
  double t9145;
  double t9243;
  double t9247;
  double t9312;
  double t9314;
  double t9346;
  double t9347;
  double t9371;
  double t9373;
  double t9234;
  double t9239;
  double t9268;
  double t9270;
  double t9280;
  double t9281;
  double t9285;
  double t9248;
  double t9258;
  double t9264;
  double t9293;
  double t9295;
  double t9301;
  double t9315;
  double t9317;
  double t9320;
  double t9326;
  double t9333;
  double t9334;
  double t9350;
  double t9352;
  double t9354;
  double t9359;
  double t9364;
  double t9365;
  double t9378;
  double t9379;
  double t9382;
  double t9395;
  double t9396;
  double t9399;
  double t9420;
  double t9422;
  double t9424;
  double t9429;
  double t9430;
  double t9431;
  double t9169;
  double t9172;
  double t9176;
  double t9177;
  double t9178;
  double t9180;
  double t9188;
  double t9190;
  double t9191;
  double t9195;
  double t9202;
  double t9203;
  double t9204;
  double t9206;
  double t9207;
  double t9209;
  double t9103;
  double t9146;
  double t9147;
  double t9242;
  double t9266;
  double t9267;
  double t9287;
  double t9302;
  double t9325;
  double t9340;
  double t9358;
  double t9367;
  double t9390;
  double t9400;
  double t9407;
  double t9408;
  double t9411;
  double t9414;
  double t9416;
  double t9417;
  double t9418;
  double t9427;
  double t9428;
  double t9433;
  double t9434;
  double t9435;
  double t9437;
  double t9440;
  double t9441;
  double t9442;
  double t9443;
  double t9444;
  double t9445;
  double t9446;
  double t9448;
  double t9452;
  double t9453;
  double t9455;
  double t9456;
  double t9457;
  double t9458;
  double t9460;
  double t9461;
  double t9462;
  double t9463;
  double t9464;
  double t9465;
  double t9466;
  double t9469;
  double t9470;
  double t9471;
  double t9474;
  double t9475;
  double t9476;
  double t9154;
  double t9155;
  double t9160;
  t766 = Cos(var1[8]);
  t857 = Cos(var1[10]);
  t1045 = Sin(var1[9]);
  t769 = Cos(var1[9]);
  t1088 = Sin(var1[10]);
  t591 = Cos(var1[11]);
  t1317 = -1.*t766*t857*t1045;
  t1323 = -1.*t766*t769*t1088;
  t1404 = t1317 + t1323;
  t929 = t766*t769*t857;
  t1108 = -1.*t766*t1045*t1088;
  t1119 = t929 + t1108;
  t1512 = Sin(var1[11]);
  t428 = Cos(var1[12]);
  t1651 = t591*t1404;
  t1715 = -1.*t1119*t1512;
  t1718 = t1651 + t1715;
  t1138 = t591*t1119;
  t1548 = t1404*t1512;
  t1551 = t1138 + t1548;
  t1719 = Sin(var1[12]);
  t364 = Cos(var1[13]);
  t2040 = t428*t1718;
  t2093 = -1.*t1551*t1719;
  t2149 = t2040 + t2093;
  t1633 = t428*t1551;
  t1907 = t1718*t1719;
  t1991 = t1633 + t1907;
  t2153 = Sin(var1[13]);
  t2781 = Cos(var1[7]);
  t2497 = Sin(var1[7]);
  t2632 = Sin(var1[8]);
  t2888 = t2781*t769;
  t3018 = -1.*t2497*t2632*t1045;
  t3036 = t2888 + t3018;
  t2658 = t769*t2497*t2632;
  t2801 = t2781*t1045;
  t2803 = t2658 + t2801;
  t3199 = t857*t3036;
  t3229 = -1.*t2803*t1088;
  t3351 = t3199 + t3229;
  t2819 = t857*t2803;
  t3080 = t3036*t1088;
  t3110 = t2819 + t3080;
  t3509 = t591*t3351;
  t3528 = -1.*t3110*t1512;
  t3535 = t3509 + t3528;
  t3114 = t591*t3110;
  t3377 = t3351*t1512;
  t3389 = t3114 + t3377;
  t3692 = t428*t3535;
  t3752 = -1.*t3389*t1719;
  t3759 = t3692 + t3752;
  t3429 = t428*t3389;
  t3562 = t3535*t1719;
  t3599 = t3429 + t3562;
  t1999 = t364*t1991;
  t2224 = t2149*t2153;
  t2228 = t1999 + t2224;
  t2256 = t364*t2149;
  t2383 = -1.*t1991*t2153;
  t2424 = t2256 + t2383;
  t3626 = t364*t3599;
  t3819 = t3759*t2153;
  t3825 = t3626 + t3819;
  t3862 = t364*t3759;
  t3883 = -1.*t3599*t2153;
  t3897 = t3862 + t3883;
  t4019 = 0.642788*t3825;
  t4020 = 0.766044*t3897;
  t4061 = t4019 + t4020;
  t3981 = -0.766044*t2228;
  t3997 = 0.642788*t2424;
  t4008 = t3981 + t3997;
  t4317 = -1.*t769*t2497;
  t4389 = -1.*t2781*t2632*t1045;
  t4420 = t4317 + t4389;
  t4157 = t2781*t769*t2632;
  t4260 = -1.*t2497*t1045;
  t4306 = t4157 + t4260;
  t4493 = t857*t4420;
  t4523 = -1.*t4306*t1088;
  t4534 = t4493 + t4523;
  t4307 = t857*t4306;
  t4426 = t4420*t1088;
  t4473 = t4307 + t4426;
  t4711 = t591*t4534;
  t4737 = -1.*t4473*t1512;
  t4763 = t4711 + t4737;
  t4486 = t591*t4473;
  t4545 = t4534*t1512;
  t4703 = t4486 + t4545;
  t4888 = t428*t4763;
  t4890 = -1.*t4703*t1719;
  t4892 = t4888 + t4890;
  t4706 = t428*t4703;
  t4765 = t4763*t1719;
  t4787 = t4706 + t4765;
  t3826 = -0.766044*t3825;
  t3905 = 0.642788*t3897;
  t3929 = t3826 + t3905;
  t2241 = 0.642788*t2228;
  t2428 = 0.766044*t2424;
  t2475 = t2241 + t2428;
  t4866 = t364*t4787;
  t4940 = t4892*t2153;
  t5032 = t4866 + t4940;
  t5108 = t364*t4892;
  t5133 = -1.*t4787*t2153;
  t5147 = t5108 + t5133;
  t5085 = -0.766044*t5032;
  t5157 = 0.642788*t5147;
  t5186 = t5085 + t5157;
  t5373 = 0.642788*t5032;
  t5458 = 0.766044*t5147;
  t5544 = t5373 + t5458;
  t135 = Cos(var1[1]);
  t5677 = t2475*t5186;
  t5814 = -1.*t4008*t5544;
  t4151 = t2781*t766*t4008;
  t5188 = t2632*t5186;
  t5227 = t4151 + t5188;
  t5329 = -1.*t4061*t5227;
  t5369 = t2781*t766*t2475;
  t5565 = t2632*t5544;
  t5595 = t5369 + t5565;
  t5616 = t3929*t5595;
  t5818 = t5677 + t5814;
  t5889 = -1.*t766*t2497*t5818;
  t5907 = 0. + t5329 + t5616 + t5889;
  t5917 = 1/t5907;
  t102 = Cos(var1[0]);
  t5959 = Sin(var1[0]);
  t6079 = Sin(var1[1]);
  t5999 = t5544*t3929;
  t6021 = -1.*t5186*t4061;
  t6047 = 0. + t5999 + t6021;
  t6968 = Cos(var1[3]);
  t6886 = Cos(var1[2]);
  t6902 = Sin(var1[3]);
  t6995 = Sin(var1[2]);
  t7063 = Cos(var1[4]);
  t6955 = -1.*t135*t6886*t6902;
  t7002 = -1.*t6968*t135*t6995;
  t7014 = t6955 + t7002;
  t6815 = Sin(var1[4]);
  t7067 = t6968*t135*t6886;
  t7075 = -1.*t135*t6902*t6995;
  t7076 = t7067 + t7075;
  t7156 = Cos(var1[5]);
  t7025 = t6815*t7014;
  t7092 = t7063*t7076;
  t7112 = t7025 + t7092;
  t6798 = Sin(var1[5]);
  t7178 = t7063*t7014;
  t7192 = -1.*t6815*t7076;
  t7194 = t7178 + t7192;
  t7240 = Cos(var1[6]);
  t7118 = -1.*t6798*t7112;
  t7211 = t7156*t7194;
  t7217 = t7118 + t7211;
  t6777 = Sin(var1[6]);
  t7244 = t7156*t7112;
  t7262 = t6798*t7194;
  t7271 = t7244 + t7262;
  t3936 = -1.*t2475*t3929;
  t4114 = t4008*t4061;
  t4129 = 0. + t3936 + t4114;
  t7533 = t102*t6886*t6079;
  t7546 = -1.*t5959*t6995;
  t7564 = t7533 + t7546;
  t7601 = -1.*t6886*t5959;
  t7617 = -1.*t102*t6079*t6995;
  t7634 = t7601 + t7617;
  t7574 = -1.*t6902*t7564;
  t7643 = t6968*t7634;
  t7674 = t7574 + t7643;
  t7696 = t6968*t7564;
  t7707 = t6902*t7634;
  t7718 = t7696 + t7707;
  t7691 = t6815*t7674;
  t7723 = t7063*t7718;
  t7727 = t7691 + t7723;
  t7734 = t7063*t7674;
  t7743 = -1.*t6815*t7718;
  t7744 = t7734 + t7743;
  t7733 = -1.*t6798*t7727;
  t7747 = t7156*t7744;
  t7750 = t7733 + t7747;
  t7785 = t7156*t7727;
  t7790 = t6798*t7744;
  t7796 = t7785 + t7790;
  t5928 = 0. + t5677 + t5814;
  t7904 = t6886*t5959*t6079;
  t7925 = t102*t6995;
  t7947 = t7904 + t7925;
  t7976 = t102*t6886;
  t7978 = -1.*t5959*t6079*t6995;
  t7991 = t7976 + t7978;
  t7963 = -1.*t6902*t7947;
  t7992 = t6968*t7991;
  t8006 = t7963 + t7992;
  t8017 = t6968*t7947;
  t8018 = t6902*t7991;
  t8036 = t8017 + t8018;
  t8013 = t6815*t8006;
  t8040 = t7063*t8036;
  t8097 = t8013 + t8040;
  t8113 = t7063*t8006;
  t8117 = -1.*t6815*t8036;
  t8129 = t8113 + t8117;
  t8110 = -1.*t6798*t8097;
  t8130 = t7156*t8129;
  t8146 = t8110 + t8130;
  t8197 = t7156*t8097;
  t8218 = t6798*t8129;
  t8228 = t8197 + t8218;
  t6466 = -1.*t766*t2497*t5186;
  t6468 = t2781*t766*t3929;
  t6479 = 0. + t6466 + t6468;
  t7238 = t6777*t7217;
  t7282 = t7240*t7271;
  t7309 = t7238 + t7282;
  t7314 = 0.642788*t7309;
  t7336 = t7240*t7217;
  t7378 = -1.*t6777*t7271;
  t7407 = t7336 + t7378;
  t7438 = 0.766044*t7407;
  t7458 = t7314 + t7438;
  t6206 = t766*t2497*t4008;
  t6271 = t2632*t3929;
  t6321 = 0. + t6206 + t6271;
  t7756 = t6777*t7750;
  t7803 = t7240*t7796;
  t7805 = t7756 + t7803;
  t7816 = 0.642788*t7805;
  t7832 = t7240*t7750;
  t7838 = -1.*t6777*t7796;
  t7839 = t7832 + t7838;
  t7861 = 0.766044*t7839;
  t7870 = t7816 + t7861;
  t6401 = -1.*t2781*t766*t4008;
  t6409 = -1.*t2632*t5186;
  t6436 = 0. + t6401 + t6409;
  t8186 = t6777*t8146;
  t8230 = t7240*t8228;
  t8248 = t8186 + t8230;
  t8254 = 0.642788*t8248;
  t8283 = t7240*t8146;
  t8297 = -1.*t6777*t8228;
  t8316 = t8283 + t8297;
  t8323 = 0.766044*t8316;
  t8331 = t8254 + t8323;
  t6642 = t766*t2497*t5544;
  t6662 = -1.*t2781*t766*t4061;
  t6664 = 0. + t6642 + t6662;
  t6513 = -1.*t766*t2497*t2475;
  t6517 = -1.*t2632*t4061;
  t6549 = 0. + t6513 + t6517;
  t6614 = 0. + t5369 + t5565;
  t8463 = -0.766044*t7309;
  t8469 = 0.642788*t7407;
  t8492 = t8463 + t8469;
  t8500 = -0.766044*t7805;
  t8505 = 0.642788*t7839;
  t8514 = t8500 + t8505;
  t8534 = -0.766044*t8248;
  t8537 = 0.642788*t8316;
  t8548 = t8534 + t8537;
  t8712 = -1.*t769;
  t8715 = 1. + t8712;
  t8872 = -1.*t857;
  t8875 = 1. + t8872;
  t8940 = -1.*t591;
  t8942 = 1. + t8940;
  t9015 = -1.*t428;
  t9018 = 1. + t9015;
  t9057 = -1.*t364;
  t9059 = 1. + t9057;
  t8669 = -1.*t766;
  t8686 = 1. + t8669;
  t8719 = -0.049*t8715;
  t8723 = -0.09*t1045;
  t8729 = 0. + t8719 + t8723;
  t8879 = -0.049*t8875;
  t8883 = -0.21*t1088;
  t8888 = 0. + t8879 + t8883;
  t8917 = -0.21*t8875;
  t8920 = 0.049*t1088;
  t8929 = 0. + t8917 + t8920;
  t8972 = -0.0016*t8942;
  t8984 = -0.2707*t1512;
  t8987 = 0. + t8972 + t8984;
  t8989 = -0.2707*t8942;
  t8992 = 0.0016*t1512;
  t8997 = 0. + t8989 + t8992;
  t9029 = 0.0184*t9018;
  t9030 = -0.7055*t1719;
  t9039 = 0. + t9029 + t9030;
  t9043 = -0.7055*t9018;
  t9048 = -0.0184*t1719;
  t9054 = 0. + t9043 + t9048;
  t9066 = -0.0216*t9059;
  t9067 = -1.1135*t2153;
  t9069 = 0. + t9066 + t9067;
  t9081 = -1.1135*t9059;
  t9082 = 0.0216*t2153;
  t9085 = 0. + t9081 + t9082;
  t8648 = -1.*t2781;
  t8651 = 1. + t8648;
  t8663 = -0.135*t8651;
  t8666 = -0.1305*t2781*t766;
  t8687 = -0.135*t8686;
  t8701 = 0.049*t2632;
  t8704 = 0. + t8687 + t8701;
  t8706 = t2781*t8704;
  t8735 = t2781*t2632*t8729;
  t8736 = -0.09*t8715;
  t8744 = 0.049*t1045;
  t8802 = 0. + t8736 + t8744;
  t8809 = -1.*t2497*t8802;
  t8902 = t4306*t8888;
  t8931 = t4420*t8929;
  t8988 = t4473*t8987;
  t9003 = t4534*t8997;
  t9042 = t4703*t9039;
  t9056 = t4763*t9054;
  t9073 = t4787*t9069;
  t9086 = t4892*t9085;
  t9096 = 0.0306*t5032;
  t9098 = -1.1312*t5147;
  t9099 = 0. + t8663 + t8666 + t8706 + t8735 + t8809 + t8902 + t8931 + t8988 + t9003 + t9042 + t9056 + t9073 + t9086 + t9096 + t9098;
  t9104 = -0.049*t8686;
  t9105 = -0.004500000000000004*t2632;
  t9108 = t766*t8729;
  t9112 = t766*t769*t8888;
  t9117 = -1.*t766*t1045*t8929;
  t9121 = t1119*t8987;
  t9122 = t1404*t8997;
  t9127 = t1551*t9039;
  t9128 = t1718*t9054;
  t9130 = t1991*t9069;
  t9135 = t2149*t9085;
  t9138 = 0.0306*t2228;
  t9142 = -1.1312*t2424;
  t9145 = 0. + t9104 + t9105 + t9108 + t9112 + t9117 + t9121 + t9122 + t9127 + t9128 + t9130 + t9135 + t9138 + t9142;
  t9243 = -1.*t6968;
  t9247 = 1. + t9243;
  t9312 = -1.*t7063;
  t9314 = 1. + t9312;
  t9346 = -1.*t7156;
  t9347 = 1. + t9346;
  t9371 = -1.*t7240;
  t9373 = 1. + t9371;
  t9234 = -1.*t135;
  t9239 = 1. + t9234;
  t9268 = -1.*t6886;
  t9270 = 1. + t9268;
  t9280 = -0.049*t9270;
  t9281 = -0.09*t6995;
  t9285 = 0. + t9280 + t9281;
  t9248 = -0.049*t9247;
  t9258 = -0.21*t6902;
  t9264 = 0. + t9248 + t9258;
  t9293 = -0.21*t9247;
  t9295 = 0.049*t6902;
  t9301 = 0. + t9293 + t9295;
  t9315 = -0.2707*t9314;
  t9317 = 0.0016*t6815;
  t9320 = 0. + t9315 + t9317;
  t9326 = -0.0016*t9314;
  t9333 = -0.2707*t6815;
  t9334 = 0. + t9326 + t9333;
  t9350 = 0.0184*t9347;
  t9352 = -0.7055*t6798;
  t9354 = 0. + t9350 + t9352;
  t9359 = -0.7055*t9347;
  t9364 = -0.0184*t6798;
  t9365 = 0. + t9359 + t9364;
  t9378 = -1.1135*t9373;
  t9379 = 0.0216*t6777;
  t9382 = 0. + t9378 + t9379;
  t9395 = -0.0216*t9373;
  t9396 = -1.1135*t6777;
  t9399 = 0. + t9395 + t9396;
  t9420 = 0.135*t9239;
  t9422 = 0.049*t6079;
  t9424 = 0. + t9420 + t9422;
  t9429 = -0.09*t9270;
  t9430 = 0.049*t6995;
  t9431 = 0. + t9429 + t9430;
  t9169 = 0.135*t2497;
  t9172 = -0.1305*t766*t2497;
  t9176 = t2497*t8704;
  t9177 = t2497*t2632*t8729;
  t9178 = t2781*t8802;
  t9180 = t2803*t8888;
  t9188 = t3036*t8929;
  t9190 = t3110*t8987;
  t9191 = t3351*t8997;
  t9195 = t3389*t9039;
  t9202 = t3535*t9054;
  t9203 = t3599*t9069;
  t9204 = t3759*t9085;
  t9206 = 0.0306*t3825;
  t9207 = -1.1312*t3897;
  t9209 = 0. + t9169 + t9172 + t9176 + t9177 + t9178 + t9180 + t9188 + t9190 + t9191 + t9195 + t9202 + t9203 + t9204 + t9206 + t9207;
  t9103 = t4008*t9099;
  t9146 = -1.*t9145*t5186;
  t9147 = t9103 + t9146;
  t9242 = -0.049*t9239;
  t9266 = t135*t6886*t9264;
  t9267 = 0.004500000000000004*t6079;
  t9287 = t135*t9285;
  t9302 = -1.*t135*t9301*t6995;
  t9325 = t9320*t7014;
  t9340 = t9334*t7076;
  t9358 = t9354*t7112;
  t9367 = t9365*t7194;
  t9390 = t9382*t7217;
  t9400 = t9399*t7271;
  t9407 = 0.0306*t7309;
  t9408 = -1.1312*t7407;
  t9411 = 0. + t9242 + t9266 + t9267 + t9287 + t9302 + t9325 + t9340 + t9358 + t9367 + t9390 + t9400 + t9407 + t9408;
  t9414 = -1.*t102;
  t9416 = 1. + t9414;
  t9417 = 0.135*t9416;
  t9418 = 0.1305*t102*t135;
  t9427 = t102*t9424;
  t9428 = t102*t6079*t9285;
  t9433 = -1.*t5959*t9431;
  t9434 = t9264*t7564;
  t9435 = t9301*t7634;
  t9437 = t9320*t7674;
  t9440 = t9334*t7718;
  t9441 = t9354*t7727;
  t9442 = t9365*t7744;
  t9443 = t9382*t7750;
  t9444 = t9399*t7796;
  t9445 = 0.0306*t7805;
  t9446 = -1.1312*t7839;
  t9448 = 0. + t9417 + t9418 + t9427 + t9428 + t9433 + t9434 + t9435 + t9437 + t9440 + t9441 + t9442 + t9443 + t9444 + t9445 + t9446;
  t9452 = -0.135*t5959;
  t9453 = 0.1305*t135*t5959;
  t9455 = t5959*t9424;
  t9456 = t5959*t6079*t9285;
  t9457 = t102*t9431;
  t9458 = t9264*t7947;
  t9460 = t9301*t7991;
  t9461 = t9320*t8006;
  t9462 = t9334*t8036;
  t9463 = t9354*t8097;
  t9464 = t9365*t8129;
  t9465 = t9382*t8146;
  t9466 = t9399*t8228;
  t9469 = 0.0306*t8248;
  t9470 = -1.1312*t8316;
  t9471 = 0. + t9452 + t9453 + t9455 + t9456 + t9457 + t9458 + t9460 + t9461 + t9462 + t9463 + t9464 + t9465 + t9466 + t9469 + t9470;
  t9474 = t2781*t766*t9145;
  t9475 = t2632*t9099;
  t9476 = t9474 + t9475;
  t9154 = t2475*t9099;
  t9155 = -1.*t9145*t5544;
  t9160 = t9154 + t9155;

  p_output1(0)=0. - 1.*t102*t135*t4129*t5917 - 1.*t135*t5917*t5928*t5959 + t5917*t6047*t6079;
  p_output1(1)=0. - 1.*t102*t135*t5917*t6321 - 1.*t135*t5917*t5959*t6436 + t5917*t6079*t6479;
  p_output1(2)=0. - 1.*t102*t135*t5917*t6549 - 1.*t135*t5917*t5959*t6614 + t5917*t6079*t6664;
  p_output1(3)=0.;
  p_output1(4)=0. + t5917*t6047*t7458 + t4129*t5917*t7870 + t5917*t5928*t8331;
  p_output1(5)=0. + t5917*t6479*t7458 + t5917*t6321*t7870 + t5917*t6436*t8331;
  p_output1(6)=0. + t5917*t6664*t7458 + t5917*t6549*t7870 + t5917*t6614*t8331;
  p_output1(7)=0.;
  p_output1(8)=0. + t5917*t6047*t8492 + t4129*t5917*t8514 + t5917*t5928*t8548;
  p_output1(9)=0. + t5917*t6479*t8492 + t5917*t6321*t8514 + t5917*t6436*t8548;
  p_output1(10)=0. + t5917*t6664*t8492 + t5917*t6549*t8514 + t5917*t6614*t8548;
  p_output1(11)=0.;
  p_output1(12)=t5917*(-1.*t4061*t9147 + t3929*t9160 - 1.*t5818*t9209) + t5917*t6047*t9411 + t4129*t5917*t9448 + t5917*t5928*t9471;
  p_output1(13)=t5917*t6479*t9411 + t5917*t6321*t9448 + t5917*t6436*t9471 + t5917*(-1.*t2497*t766*t9147 + t5227*t9209 - 1.*t3929*t9476);
  p_output1(14)=t5917*t6664*t9411 + t5917*t6549*t9448 + t5917*t6614*t9471 + t5917*(t2497*t766*t9160 - 1.*t5595*t9209 + t4061*t9476);
  p_output1(15)=0. + (t5329 + t5616 + t5889)*t5917;
}


       
void H_RightToeBottom_to_LeftToeBottom(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
