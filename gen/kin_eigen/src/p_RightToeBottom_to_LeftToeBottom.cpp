/*
 * Automatically Generated from Mathematica.
 * Mon 2 Jul 2018 15:37:42 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_RightToeBottom_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t308;
  double t251;
  double t253;
  double t265;
  double t348;
  double t93;
  double t453;
  double t539;
  double t545;
  double t270;
  double t363;
  double t399;
  double t560;
  double t88;
  double t798;
  double t804;
  double t820;
  double t437;
  double t564;
  double t585;
  double t851;
  double t64;
  double t985;
  double t994;
  double t1050;
  double t790;
  double t872;
  double t886;
  double t1138;
  double t24;
  double t1363;
  double t1364;
  double t1404;
  double t919;
  double t1175;
  double t1255;
  double t1491;
  double t1718;
  double t1899;
  double t1907;
  double t1939;
  double t1813;
  double t1819;
  double t1850;
  double t2018;
  double t2106;
  double t2198;
  double t1860;
  double t1961;
  double t1971;
  double t2347;
  double t2348;
  double t2397;
  double t2005;
  double t2278;
  double t2333;
  double t2795;
  double t2819;
  double t2825;
  double t2686;
  double t2688;
  double t2693;
  double t2859;
  double t2886;
  double t2905;
  double t2732;
  double t2832;
  double t2838;
  double t3024;
  double t3066;
  double t3108;
  double t2858;
  double t2920;
  double t2943;
  double t3144;
  double t3153;
  double t3162;
  double t2966;
  double t3109;
  double t3113;
  double t1301;
  double t1515;
  double t1542;
  double t1586;
  double t1601;
  double t1622;
  double t2344;
  double t2438;
  double t2471;
  double t2530;
  double t2544;
  double t2548;
  double t3118;
  double t3165;
  double t3168;
  double t3268;
  double t3272;
  double t3278;
  double t3759;
  double t3788;
  double t3807;
  double t3204;
  double t3299;
  double t3308;
  double t2501;
  double t2599;
  double t2601;
  double t3897;
  double t3947;
  double t3949;
  double t1583;
  double t1674;
  double t1692;
  double t4503;
  double t4530;
  double t4908;
  double t4921;
  double t5254;
  double t5255;
  double t5605;
  double t5651;
  double t5796;
  double t5809;
  double t4233;
  double t4243;
  double t4534;
  double t4675;
  double t4780;
  double t4928;
  double t5087;
  double t5140;
  double t5185;
  double t5188;
  double t5191;
  double t5286;
  double t5320;
  double t5369;
  double t5420;
  double t5477;
  double t5505;
  double t5661;
  double t5668;
  double t5677;
  double t5699;
  double t5704;
  double t5733;
  double t5837;
  double t5840;
  double t5842;
  double t5862;
  double t5895;
  double t5919;
  double t3509;
  double t3626;
  double t3712;
  double t4169;
  double t4172;
  double t4209;
  double t4221;
  double t4273;
  double t4376;
  double t4450;
  double t4467;
  double t4811;
  double t4859;
  double t4869;
  double t4877;
  double t4894;
  double t5141;
  double t5249;
  double t5416;
  double t5577;
  double t5685;
  double t5792;
  double t5861;
  double t5947;
  double t5993;
  double t5997;
  double t6024;
  double t6053;
  double t6071;
  double t6096;
  double t6114;
  double t6129;
  double t6146;
  double t6245;
  double t6335;
  double t6397;
  double t6400;
  double t6468;
  double t6481;
  double t6503;
  double t6537;
  double t4040;
  double t4045;
  double t4074;
  double t2625;
  double t3319;
  double t3377;
  double t3434;
  double t3825;
  double t3999;
  double t4017;
  double t4019;
  double t4123;
  double t4134;
  double t4151;
  double t7173;
  double t7222;
  double t7228;
  double t7230;
  double t7236;
  double t7254;
  double t7418;
  double t7606;
  double t7628;
  double t7630;
  double t7642;
  double t7662;
  double t7663;
  double t7666;
  double t7752;
  double t7765;
  double t7790;
  double t7839;
  double t7849;
  double t7863;
  double t7903;
  double t8038;
  double t8040;
  double t8089;
  double t8230;
  double t8248;
  double t8254;
  double t8309;
  double t8316;
  double t8336;
  double t8431;
  double t8469;
  double t8488;
  double t8492;
  double t8548;
  double t8583;
  double t8584;
  double t8719;
  double t7211;
  double t7217;
  double t7345;
  double t7387;
  double t7394;
  double t7395;
  double t7458;
  double t7478;
  double t7238;
  double t7270;
  double t7311;
  double t8803;
  double t7533;
  double t7537;
  double t7550;
  double t7631;
  double t7643;
  double t7644;
  double t8888;
  double t8902;
  double t8917;
  double t8931;
  double t8939;
  double t8972;
  double t7723;
  double t7734;
  double t7750;
  double t7891;
  double t8006;
  double t8018;
  double t8984;
  double t8992;
  double t8995;
  double t9003;
  double t9016;
  double t9017;
  double t8113;
  double t8169;
  double t8197;
  double t8397;
  double t8440;
  double t8464;
  double t9030;
  double t9039;
  double t9043;
  double t9056;
  double t9069;
  double t9082;
  double t8500;
  double t8517;
  double t8543;
  double t9096;
  double t9098;
  double t9099;
  double t9104;
  double t9108;
  double t9112;
  double t8744;
  double t8774;
  double t8784;
  double t8815;
  double t8868;
  double t8879;
  double t9202;
  double t9203;
  double t9204;
  double t9207;
  double t9215;
  double t9216;
  double t9228;
  double t9242;
  double t9248;
  double t9266;
  double t9280;
  double t9281;
  double t9293;
  double t9295;
  double t9315;
  double t9325;
  double t9326;
  double t9333;
  double t9344;
  double t9352;
  double t9354;
  double t9364;
  double t9365;
  double t9367;
  double t6748;
  double t6750;
  double t6754;
  double t6770;
  double t6781;
  double t6806;
  double t6837;
  double t6945;
  double t6950;
  double t6973;
  double t7011;
  double t7017;
  double t7022;
  double t7044;
  double t7072;
  double t7116;
  double t6049;
  double t6615;
  double t6623;
  double t7220;
  double t7337;
  double t7383;
  double t7515;
  double t7576;
  double t7714;
  double t7806;
  double t8111;
  double t8257;
  double t8496;
  double t8590;
  double t8593;
  double t8596;
  double t8604;
  double t8606;
  double t8608;
  double t8622;
  double t8624;
  double t8666;
  double t8683;
  double t8722;
  double t8723;
  double t8729;
  double t8735;
  double t8790;
  double t8801;
  double t8883;
  double t8920;
  double t8980;
  double t8997;
  double t9029;
  double t9048;
  double t9085;
  double t9103;
  double t9121;
  double t9127;
  double t9128;
  double t9135;
  double t9138;
  double t9153;
  double t9154;
  double t9161;
  double t9169;
  double t9172;
  double t9180;
  double t9188;
  double t9190;
  double t9191;
  double t9195;
  double t9206;
  double t9220;
  double t9264;
  double t9287;
  double t9317;
  double t9340;
  double t9359;
  double t9378;
  double t9382;
  double t9390;
  double t9395;
  double t9396;
  double t9399;
  double t9400;
  double t9408;
  double t9413;
  double t9417;
  double t9422;
  double t9424;
  double t9428;
  double t6642;
  double t6674;
  double t6717;
  t308 = Cos(var1[7]);
  t251 = Cos(var1[9]);
  t253 = Sin(var1[7]);
  t265 = Sin(var1[8]);
  t348 = Sin(var1[9]);
  t93 = Cos(var1[10]);
  t453 = t308*t251;
  t539 = -1.*t253*t265*t348;
  t545 = t453 + t539;
  t270 = t251*t253*t265;
  t363 = t308*t348;
  t399 = t270 + t363;
  t560 = Sin(var1[10]);
  t88 = Cos(var1[11]);
  t798 = t93*t545;
  t804 = -1.*t399*t560;
  t820 = t798 + t804;
  t437 = t93*t399;
  t564 = t545*t560;
  t585 = t437 + t564;
  t851 = Sin(var1[11]);
  t64 = Cos(var1[12]);
  t985 = t88*t820;
  t994 = -1.*t585*t851;
  t1050 = t985 + t994;
  t790 = t88*t585;
  t872 = t820*t851;
  t886 = t790 + t872;
  t1138 = Sin(var1[12]);
  t24 = Cos(var1[13]);
  t1363 = t64*t1050;
  t1364 = -1.*t886*t1138;
  t1404 = t1363 + t1364;
  t919 = t64*t886;
  t1175 = t1050*t1138;
  t1255 = t919 + t1175;
  t1491 = Sin(var1[13]);
  t1718 = Cos(var1[8]);
  t1899 = -1.*t1718*t93*t348;
  t1907 = -1.*t1718*t251*t560;
  t1939 = t1899 + t1907;
  t1813 = t1718*t251*t93;
  t1819 = -1.*t1718*t348*t560;
  t1850 = t1813 + t1819;
  t2018 = t88*t1939;
  t2106 = -1.*t1850*t851;
  t2198 = t2018 + t2106;
  t1860 = t88*t1850;
  t1961 = t1939*t851;
  t1971 = t1860 + t1961;
  t2347 = t64*t2198;
  t2348 = -1.*t1971*t1138;
  t2397 = t2347 + t2348;
  t2005 = t64*t1971;
  t2278 = t2198*t1138;
  t2333 = t2005 + t2278;
  t2795 = -1.*t251*t253;
  t2819 = -1.*t308*t265*t348;
  t2825 = t2795 + t2819;
  t2686 = t308*t251*t265;
  t2688 = -1.*t253*t348;
  t2693 = t2686 + t2688;
  t2859 = t93*t2825;
  t2886 = -1.*t2693*t560;
  t2905 = t2859 + t2886;
  t2732 = t93*t2693;
  t2832 = t2825*t560;
  t2838 = t2732 + t2832;
  t3024 = t88*t2905;
  t3066 = -1.*t2838*t851;
  t3108 = t3024 + t3066;
  t2858 = t88*t2838;
  t2920 = t2905*t851;
  t2943 = t2858 + t2920;
  t3144 = t64*t3108;
  t3153 = -1.*t2943*t1138;
  t3162 = t3144 + t3153;
  t2966 = t64*t2943;
  t3109 = t3108*t1138;
  t3113 = t2966 + t3109;
  t1301 = t24*t1255;
  t1515 = t1404*t1491;
  t1542 = t1301 + t1515;
  t1586 = t24*t1404;
  t1601 = -1.*t1255*t1491;
  t1622 = t1586 + t1601;
  t2344 = t24*t2333;
  t2438 = t2397*t1491;
  t2471 = t2344 + t2438;
  t2530 = t24*t2397;
  t2544 = -1.*t2333*t1491;
  t2548 = t2530 + t2544;
  t3118 = t24*t3113;
  t3165 = t3162*t1491;
  t3168 = t3118 + t3165;
  t3268 = t24*t3162;
  t3272 = -1.*t3113*t1491;
  t3278 = t3268 + t3272;
  t3759 = 0.642788*t2471;
  t3788 = 0.766044*t2548;
  t3807 = t3759 + t3788;
  t3204 = -0.766044*t3168;
  t3299 = 0.642788*t3278;
  t3308 = t3204 + t3299;
  t2501 = -0.766044*t2471;
  t2599 = 0.642788*t2548;
  t2601 = t2501 + t2599;
  t3897 = 0.642788*t3168;
  t3947 = 0.766044*t3278;
  t3949 = t3897 + t3947;
  t1583 = 0.642788*t1542;
  t1674 = 0.766044*t1622;
  t1692 = t1583 + t1674;
  t4503 = -1.*t251;
  t4530 = 1. + t4503;
  t4908 = -1.*t93;
  t4921 = 1. + t4908;
  t5254 = -1.*t88;
  t5255 = 1. + t5254;
  t5605 = -1.*t64;
  t5651 = 1. + t5605;
  t5796 = -1.*t24;
  t5809 = 1. + t5796;
  t4233 = -1.*t1718;
  t4243 = 1. + t4233;
  t4534 = -0.049*t4530;
  t4675 = -0.09*t348;
  t4780 = 0. + t4534 + t4675;
  t4928 = -0.049*t4921;
  t5087 = -0.21*t560;
  t5140 = 0. + t4928 + t5087;
  t5185 = -0.21*t4921;
  t5188 = 0.049*t560;
  t5191 = 0. + t5185 + t5188;
  t5286 = -0.0016*t5255;
  t5320 = -0.2707*t851;
  t5369 = 0. + t5286 + t5320;
  t5420 = -0.2707*t5255;
  t5477 = 0.0016*t851;
  t5505 = 0. + t5420 + t5477;
  t5661 = 0.0184*t5651;
  t5668 = -0.7055*t1138;
  t5677 = 0. + t5661 + t5668;
  t5699 = -0.7055*t5651;
  t5704 = -0.0184*t1138;
  t5733 = 0. + t5699 + t5704;
  t5837 = -0.0216*t5809;
  t5840 = -1.1135*t1491;
  t5842 = 0. + t5837 + t5840;
  t5862 = -1.1135*t5809;
  t5895 = 0.0216*t1491;
  t5919 = 0. + t5862 + t5895;
  t3509 = -0.766044*t1542;
  t3626 = 0.642788*t1622;
  t3712 = t3509 + t3626;
  t4169 = -1.*t308;
  t4172 = 1. + t4169;
  t4209 = -0.135*t4172;
  t4221 = -0.1305*t308*t1718;
  t4273 = -0.135*t4243;
  t4376 = 0.049*t265;
  t4450 = 0. + t4273 + t4376;
  t4467 = t308*t4450;
  t4811 = t308*t265*t4780;
  t4859 = -0.09*t4530;
  t4869 = 0.049*t348;
  t4877 = 0. + t4859 + t4869;
  t4894 = -1.*t253*t4877;
  t5141 = t2693*t5140;
  t5249 = t2825*t5191;
  t5416 = t2838*t5369;
  t5577 = t2905*t5505;
  t5685 = t2943*t5677;
  t5792 = t3108*t5733;
  t5861 = t3113*t5842;
  t5947 = t3162*t5919;
  t5993 = 0.0306*t3168;
  t5997 = -1.1312*t3278;
  t6024 = 0. + t4209 + t4221 + t4467 + t4811 + t4894 + t5141 + t5249 + t5416 + t5577 + t5685 + t5792 + t5861 + t5947 + t5993 + t5997;
  t6053 = -0.049*t4243;
  t6071 = -0.004500000000000004*t265;
  t6096 = t1718*t4780;
  t6114 = t1718*t251*t5140;
  t6129 = -1.*t1718*t348*t5191;
  t6146 = t1850*t5369;
  t6245 = t1939*t5505;
  t6335 = t1971*t5677;
  t6397 = t2198*t5733;
  t6400 = t2333*t5842;
  t6468 = t2397*t5919;
  t6481 = 0.0306*t2471;
  t6503 = -1.1312*t2548;
  t6537 = 0. + t6053 + t6071 + t6096 + t6114 + t6129 + t6146 + t6245 + t6335 + t6397 + t6400 + t6468 + t6481 + t6503;
  t4040 = t3807*t3308;
  t4045 = -1.*t2601*t3949;
  t4074 = t4040 + t4045;
  t2625 = t308*t1718*t2601;
  t3319 = t265*t3308;
  t3377 = t2625 + t3319;
  t3434 = -1.*t1692*t3377;
  t3825 = t308*t1718*t3807;
  t3999 = t265*t3949;
  t4017 = t3825 + t3999;
  t4019 = t3712*t4017;
  t4123 = -1.*t1718*t253*t4074;
  t4134 = 0. + t3434 + t4019 + t4123;
  t4151 = 1/t4134;
  t7173 = Cos(var1[1]);
  t7222 = Cos(var1[2]);
  t7228 = Cos(var1[3]);
  t7230 = -1.*t7228;
  t7236 = 1. + t7230;
  t7254 = Sin(var1[3]);
  t7418 = Sin(var1[2]);
  t7606 = Cos(var1[4]);
  t7628 = -1.*t7606;
  t7630 = 1. + t7628;
  t7642 = Sin(var1[4]);
  t7662 = -1.*t7173*t7222*t7254;
  t7663 = -1.*t7228*t7173*t7418;
  t7666 = t7662 + t7663;
  t7752 = t7228*t7173*t7222;
  t7765 = -1.*t7173*t7254*t7418;
  t7790 = t7752 + t7765;
  t7839 = Cos(var1[5]);
  t7849 = -1.*t7839;
  t7863 = 1. + t7849;
  t7903 = Sin(var1[5]);
  t8038 = t7642*t7666;
  t8040 = t7606*t7790;
  t8089 = t8038 + t8040;
  t8230 = t7606*t7666;
  t8248 = -1.*t7642*t7790;
  t8254 = t8230 + t8248;
  t8309 = Cos(var1[6]);
  t8316 = -1.*t8309;
  t8336 = 1. + t8316;
  t8431 = Sin(var1[6]);
  t8469 = -1.*t7903*t8089;
  t8488 = t7839*t8254;
  t8492 = t8469 + t8488;
  t8548 = t7839*t8089;
  t8583 = t7903*t8254;
  t8584 = t8548 + t8583;
  t8719 = Cos(var1[0]);
  t7211 = -1.*t7173;
  t7217 = 1. + t7211;
  t7345 = Sin(var1[1]);
  t7387 = -1.*t7222;
  t7394 = 1. + t7387;
  t7395 = -0.049*t7394;
  t7458 = -0.09*t7418;
  t7478 = 0. + t7395 + t7458;
  t7238 = -0.049*t7236;
  t7270 = -0.21*t7254;
  t7311 = 0. + t7238 + t7270;
  t8803 = Sin(var1[0]);
  t7533 = -0.21*t7236;
  t7537 = 0.049*t7254;
  t7550 = 0. + t7533 + t7537;
  t7631 = -0.2707*t7630;
  t7643 = 0.0016*t7642;
  t7644 = 0. + t7631 + t7643;
  t8888 = t8719*t7222*t7345;
  t8902 = -1.*t8803*t7418;
  t8917 = t8888 + t8902;
  t8931 = -1.*t7222*t8803;
  t8939 = -1.*t8719*t7345*t7418;
  t8972 = t8931 + t8939;
  t7723 = -0.0016*t7630;
  t7734 = -0.2707*t7642;
  t7750 = 0. + t7723 + t7734;
  t7891 = 0.0184*t7863;
  t8006 = -0.7055*t7903;
  t8018 = 0. + t7891 + t8006;
  t8984 = -1.*t7254*t8917;
  t8992 = t7228*t8972;
  t8995 = t8984 + t8992;
  t9003 = t7228*t8917;
  t9016 = t7254*t8972;
  t9017 = t9003 + t9016;
  t8113 = -0.7055*t7863;
  t8169 = -0.0184*t7903;
  t8197 = 0. + t8113 + t8169;
  t8397 = -1.1135*t8336;
  t8440 = 0.0216*t8431;
  t8464 = 0. + t8397 + t8440;
  t9030 = t7642*t8995;
  t9039 = t7606*t9017;
  t9043 = t9030 + t9039;
  t9056 = t7606*t8995;
  t9069 = -1.*t7642*t9017;
  t9082 = t9056 + t9069;
  t8500 = -0.0216*t8336;
  t8517 = -1.1135*t8431;
  t8543 = 0. + t8500 + t8517;
  t9096 = -1.*t7903*t9043;
  t9098 = t7839*t9082;
  t9099 = t9096 + t9098;
  t9104 = t7839*t9043;
  t9108 = t7903*t9082;
  t9112 = t9104 + t9108;
  t8744 = 0.135*t7217;
  t8774 = 0.049*t7345;
  t8784 = 0. + t8744 + t8774;
  t8815 = -0.09*t7394;
  t8868 = 0.049*t7418;
  t8879 = 0. + t8815 + t8868;
  t9202 = t7222*t8803*t7345;
  t9203 = t8719*t7418;
  t9204 = t9202 + t9203;
  t9207 = t8719*t7222;
  t9215 = -1.*t8803*t7345*t7418;
  t9216 = t9207 + t9215;
  t9228 = -1.*t7254*t9204;
  t9242 = t7228*t9216;
  t9248 = t9228 + t9242;
  t9266 = t7228*t9204;
  t9280 = t7254*t9216;
  t9281 = t9266 + t9280;
  t9293 = t7642*t9248;
  t9295 = t7606*t9281;
  t9315 = t9293 + t9295;
  t9325 = t7606*t9248;
  t9326 = -1.*t7642*t9281;
  t9333 = t9325 + t9326;
  t9344 = -1.*t7903*t9315;
  t9352 = t7839*t9333;
  t9354 = t9344 + t9352;
  t9364 = t7839*t9315;
  t9365 = t7903*t9333;
  t9367 = t9364 + t9365;
  t6748 = 0.135*t253;
  t6750 = -0.1305*t1718*t253;
  t6754 = t253*t4450;
  t6770 = t253*t265*t4780;
  t6781 = t308*t4877;
  t6806 = t399*t5140;
  t6837 = t545*t5191;
  t6945 = t585*t5369;
  t6950 = t820*t5505;
  t6973 = t886*t5677;
  t7011 = t1050*t5733;
  t7017 = t1255*t5842;
  t7022 = t1404*t5919;
  t7044 = 0.0306*t1542;
  t7072 = -1.1312*t1622;
  t7116 = 0. + t6748 + t6750 + t6754 + t6770 + t6781 + t6806 + t6837 + t6945 + t6950 + t6973 + t7011 + t7017 + t7022 + t7044 + t7072;
  t6049 = t2601*t6024;
  t6615 = -1.*t6537*t3308;
  t6623 = t6049 + t6615;
  t7220 = -0.049*t7217;
  t7337 = t7173*t7222*t7311;
  t7383 = 0.004500000000000004*t7345;
  t7515 = t7173*t7478;
  t7576 = -1.*t7173*t7550*t7418;
  t7714 = t7644*t7666;
  t7806 = t7750*t7790;
  t8111 = t8018*t8089;
  t8257 = t8197*t8254;
  t8496 = t8464*t8492;
  t8590 = t8543*t8584;
  t8593 = t8431*t8492;
  t8596 = t8309*t8584;
  t8604 = t8593 + t8596;
  t8606 = 0.0306*t8604;
  t8608 = t8309*t8492;
  t8622 = -1.*t8431*t8584;
  t8624 = t8608 + t8622;
  t8666 = -1.1312*t8624;
  t8683 = 0. + t7220 + t7337 + t7383 + t7515 + t7576 + t7714 + t7806 + t8111 + t8257 + t8496 + t8590 + t8606 + t8666;
  t8722 = -1.*t8719;
  t8723 = 1. + t8722;
  t8729 = 0.135*t8723;
  t8735 = 0.1305*t8719*t7173;
  t8790 = t8719*t8784;
  t8801 = t8719*t7345*t7478;
  t8883 = -1.*t8803*t8879;
  t8920 = t7311*t8917;
  t8980 = t7550*t8972;
  t8997 = t7644*t8995;
  t9029 = t7750*t9017;
  t9048 = t8018*t9043;
  t9085 = t8197*t9082;
  t9103 = t8464*t9099;
  t9121 = t8543*t9112;
  t9127 = t8431*t9099;
  t9128 = t8309*t9112;
  t9135 = t9127 + t9128;
  t9138 = 0.0306*t9135;
  t9153 = t8309*t9099;
  t9154 = -1.*t8431*t9112;
  t9161 = t9153 + t9154;
  t9169 = -1.1312*t9161;
  t9172 = 0. + t8729 + t8735 + t8790 + t8801 + t8883 + t8920 + t8980 + t8997 + t9029 + t9048 + t9085 + t9103 + t9121 + t9138 + t9169;
  t9180 = -0.135*t8803;
  t9188 = 0.1305*t7173*t8803;
  t9190 = t8803*t8784;
  t9191 = t8803*t7345*t7478;
  t9195 = t8719*t8879;
  t9206 = t7311*t9204;
  t9220 = t7550*t9216;
  t9264 = t7644*t9248;
  t9287 = t7750*t9281;
  t9317 = t8018*t9315;
  t9340 = t8197*t9333;
  t9359 = t8464*t9354;
  t9378 = t8543*t9367;
  t9382 = t8431*t9354;
  t9390 = t8309*t9367;
  t9395 = t9382 + t9390;
  t9396 = 0.0306*t9395;
  t9399 = t8309*t9354;
  t9400 = -1.*t8431*t9367;
  t9408 = t9399 + t9400;
  t9413 = -1.1312*t9408;
  t9417 = 0. + t9180 + t9188 + t9190 + t9191 + t9195 + t9206 + t9220 + t9264 + t9287 + t9317 + t9340 + t9359 + t9378 + t9396 + t9413;
  t9422 = t308*t1718*t6537;
  t9424 = t265*t6024;
  t9428 = t9422 + t9424;
  t6642 = t3807*t6024;
  t6674 = -1.*t6537*t3949;
  t6717 = t6642 + t6674;

  p_output1(0)=t4151*(-1.*t1692*t6623 + t3712*t6717 - 1.*t4074*t7116) + (0. - 1.*t1692*t3308 + t3712*t3949)*t4151*t8683 + (0. + t1692*t2601 - 1.*t3712*t3807)*t4151*t9172 + (0. + t4040 + t4045)*t4151*t9417;
  p_output1(1)=(0. - 1.*t1718*t253*t3308 + t1718*t308*t3712)*t4151*t8683 + (0. + t1718*t253*t2601 + t265*t3712)*t4151*t9172 + (0. - 1.*t1718*t2601*t308 - 1.*t265*t3308)*t4151*t9417 + t4151*(-1.*t1718*t253*t6623 + t3377*t7116 - 1.*t3712*t9428);
  p_output1(2)=(0. - 1.*t1692*t1718*t308 + t1718*t253*t3949)*t4151*t8683 + (0. - 1.*t1692*t265 - 1.*t1718*t253*t3807)*t4151*t9172 + (0. + t3825 + t3999)*t4151*t9417 + t4151*(t1718*t253*t6717 - 1.*t4017*t7116 + t1692*t9428);
}


       
void p_RightToeBottom_to_LeftToeBottom(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
