/*
 * Automatically Generated from Mathematica.
 * Fri 16 Mar 2018 12:16:46 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "H_LeftToeBottom_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t315;
  double t489;
  double t337;
  double t461;
  double t535;
  double t934;
  double t470;
  double t740;
  double t890;
  double t293;
  double t950;
  double t982;
  double t1024;
  double t1126;
  double t931;
  double t1034;
  double t1094;
  double t142;
  double t1170;
  double t1176;
  double t1214;
  double t1330;
  double t1102;
  double t1274;
  double t1284;
  double t113;
  double t1372;
  double t1416;
  double t1438;
  double t1922;
  double t1893;
  double t1895;
  double t1917;
  double t1992;
  double t2020;
  double t2039;
  double t2040;
  double t2067;
  double t2036;
  double t2101;
  double t2150;
  double t2170;
  double t2173;
  double t2181;
  double t2166;
  double t2207;
  double t2225;
  double t2233;
  double t2244;
  double t2248;
  double t2226;
  double t2256;
  double t2274;
  double t2294;
  double t2300;
  double t2319;
  double t1306;
  double t1505;
  double t1540;
  double t1560;
  double t1630;
  double t1677;
  double t2291;
  double t2327;
  double t2336;
  double t2365;
  double t2372;
  double t2438;
  double t2866;
  double t2903;
  double t2907;
  double t2943;
  double t2947;
  double t2948;
  double t2942;
  double t2958;
  double t2993;
  double t3040;
  double t3066;
  double t3121;
  double t2996;
  double t3127;
  double t3130;
  double t3154;
  double t3230;
  double t3279;
  double t3149;
  double t3310;
  double t3322;
  double t3337;
  double t3381;
  double t3423;
  double t2633;
  double t2637;
  double t2639;
  double t2361;
  double t2479;
  double t2482;
  double t3325;
  double t3446;
  double t3465;
  double t3493;
  double t3505;
  double t3509;
  double t1558;
  double t1806;
  double t1820;
  double t2642;
  double t2646;
  double t2698;
  double t2526;
  double t2715;
  double t6;
  double t3607;
  double t3662;
  double t3667;
  double t3475;
  double t3536;
  double t3538;
  double t3553;
  double t3560;
  double t3566;
  double t3593;
  double t3671;
  double t3718;
  double t3766;
  double t3778;
  double t3788;
  double t3938;
  double t3983;
  double t3992;
  double t81;
  double t4296;
  double t4111;
  double t5840;
  double t6171;
  double t5613;
  double t7541;
  double t7554;
  double t7610;
  double t5872;
  double t6294;
  double t6773;
  double t7648;
  double t5602;
  double t7735;
  double t7747;
  double t7767;
  double t7450;
  double t7698;
  double t7702;
  double t7771;
  double t5346;
  double t7807;
  double t7809;
  double t7815;
  double t7704;
  double t7782;
  double t7793;
  double t7827;
  double t5305;
  double t7833;
  double t7834;
  double t7838;
  double t7806;
  double t7828;
  double t7829;
  double t7839;
  double t2838;
  double t7902;
  double t7903;
  double t7904;
  double t7892;
  double t7897;
  double t7899;
  double t7912;
  double t7913;
  double t7919;
  double t7900;
  double t7908;
  double t7909;
  double t7958;
  double t7961;
  double t7962;
  double t7911;
  double t7926;
  double t7933;
  double t7981;
  double t7994;
  double t7996;
  double t7944;
  double t7975;
  double t7978;
  double t4128;
  double t4169;
  double t4260;
  double t8025;
  double t8026;
  double t8028;
  double t8020;
  double t8021;
  double t8022;
  double t8043;
  double t8045;
  double t8047;
  double t8024;
  double t8029;
  double t8035;
  double t8054;
  double t8055;
  double t8057;
  double t8038;
  double t8049;
  double t8051;
  double t4339;
  double t4370;
  double t4446;
  double t7832;
  double t7842;
  double t7854;
  double t7856;
  double t7860;
  double t7862;
  double t7867;
  double t7868;
  double t7877;
  double t4557;
  double t4569;
  double t4623;
  double t8052;
  double t8058;
  double t8059;
  double t8061;
  double t8063;
  double t8064;
  double t8065;
  double t8066;
  double t8067;
  double t4701;
  double t4732;
  double t4813;
  double t7980;
  double t7997;
  double t8000;
  double t8001;
  double t8004;
  double t8005;
  double t8006;
  double t8010;
  double t8014;
  double t4920;
  double t5048;
  double t5089;
  double t5124;
  double t5132;
  double t5171;
  double t5184;
  double t5252;
  double t5259;
  double t5265;
  double t8091;
  double t8092;
  double t8096;
  double t8115;
  double t8116;
  double t8120;
  double t8109;
  double t8111;
  double t8112;
  double t8150;
  double t8151;
  double t8167;
  double t8169;
  double t8182;
  double t8183;
  double t8196;
  double t8197;
  double t8211;
  double t8212;
  double t8142;
  double t8143;
  double t8144;
  double t8145;
  double t8148;
  double t8153;
  double t8154;
  double t8156;
  double t8159;
  double t8160;
  double t8162;
  double t8170;
  double t8173;
  double t8175;
  double t8177;
  double t8178;
  double t8179;
  double t8184;
  double t8186;
  double t8188;
  double t8190;
  double t8191;
  double t8193;
  double t8198;
  double t8199;
  double t8200;
  double t8203;
  double t8206;
  double t8207;
  double t8213;
  double t8216;
  double t8217;
  double t8219;
  double t8220;
  double t8221;
  double t8288;
  double t8289;
  double t8298;
  double t8299;
  double t8309;
  double t8310;
  double t8320;
  double t8321;
  double t8330;
  double t8331;
  double t8277;
  double t8278;
  double t8300;
  double t8301;
  double t8302;
  double t8290;
  double t8291;
  double t8292;
  double t8305;
  double t8306;
  double t8307;
  double t8311;
  double t8312;
  double t8313;
  double t8316;
  double t8317;
  double t8318;
  double t8322;
  double t8323;
  double t8324;
  double t8326;
  double t8327;
  double t8328;
  double t8332;
  double t8333;
  double t8334;
  double t8336;
  double t8337;
  double t8338;
  double t8273;
  double t8274;
  double t8275;
  double t8276;
  double t8279;
  double t8280;
  double t8284;
  double t8285;
  double t8293;
  double t8294;
  double t8295;
  double t8296;
  double t8297;
  double t8303;
  double t8308;
  double t8315;
  double t8319;
  double t8325;
  double t8329;
  double t8335;
  double t8339;
  double t8340;
  double t8341;
  double t8342;
  double t8344;
  double t8345;
  double t8346;
  double t8347;
  double t8348;
  double t8349;
  double t8350;
  double t8351;
  double t8352;
  double t8353;
  double t8354;
  double t8355;
  double t8356;
  double t8357;
  double t8140;
  double t8141;
  double t8149;
  double t8157;
  double t8166;
  double t8176;
  double t8181;
  double t8189;
  double t8194;
  double t8201;
  double t8210;
  double t8218;
  double t8226;
  double t8227;
  double t8228;
  double t8229;
  double t8257;
  double t8258;
  double t8259;
  double t8260;
  double t8261;
  double t8262;
  double t8263;
  double t8264;
  double t8265;
  double t8266;
  double t8267;
  double t8268;
  double t8269;
  double t8270;
  double t8231;
  double t8233;
  double t8236;
  double t8237;
  double t8238;
  double t8239;
  double t8240;
  double t8241;
  double t8242;
  double t8243;
  double t8246;
  double t8247;
  double t8248;
  double t8249;
  double t8250;
  double t8251;
  double t8252;
  double t8253;
  double t8365;
  double t8366;
  double t8367;
  double t8368;
  double t8369;
  double t8370;
  double t8371;
  double t8372;
  double t8373;
  double t8374;
  double t8375;
  double t8376;
  double t8377;
  double t8378;
  double t8379;
  double t8380;
  double t8343;
  double t8358;
  double t8359;
  double t8388;
  double t8389;
  double t8390;
  double t8361;
  double t8362;
  double t8363;
  t315 = Cos(var1[1]);
  t489 = Cos(var1[3]);
  t337 = Cos(var1[2]);
  t461 = Sin(var1[3]);
  t535 = Sin(var1[2]);
  t934 = Cos(var1[4]);
  t470 = -1.*t315*t337*t461;
  t740 = -1.*t489*t315*t535;
  t890 = t470 + t740;
  t293 = Sin(var1[4]);
  t950 = t489*t315*t337;
  t982 = -1.*t315*t461*t535;
  t1024 = t950 + t982;
  t1126 = Cos(var1[5]);
  t931 = t293*t890;
  t1034 = t934*t1024;
  t1094 = t931 + t1034;
  t142 = Sin(var1[5]);
  t1170 = t934*t890;
  t1176 = -1.*t293*t1024;
  t1214 = t1170 + t1176;
  t1330 = Cos(var1[6]);
  t1102 = -1.*t142*t1094;
  t1274 = t1126*t1214;
  t1284 = t1102 + t1274;
  t113 = Sin(var1[6]);
  t1372 = t1126*t1094;
  t1416 = t142*t1214;
  t1438 = t1372 + t1416;
  t1922 = Sin(var1[0]);
  t1893 = Cos(var1[0]);
  t1895 = Sin(var1[1]);
  t1917 = t1893*t337*t1895;
  t1992 = -1.*t1922*t535;
  t2020 = t1917 + t1992;
  t2039 = -1.*t337*t1922;
  t2040 = -1.*t1893*t1895*t535;
  t2067 = t2039 + t2040;
  t2036 = -1.*t461*t2020;
  t2101 = t489*t2067;
  t2150 = t2036 + t2101;
  t2170 = t489*t2020;
  t2173 = t461*t2067;
  t2181 = t2170 + t2173;
  t2166 = t293*t2150;
  t2207 = t934*t2181;
  t2225 = t2166 + t2207;
  t2233 = t934*t2150;
  t2244 = -1.*t293*t2181;
  t2248 = t2233 + t2244;
  t2226 = -1.*t142*t2225;
  t2256 = t1126*t2248;
  t2274 = t2226 + t2256;
  t2294 = t1126*t2225;
  t2300 = t142*t2248;
  t2319 = t2294 + t2300;
  t1306 = t113*t1284;
  t1505 = t1330*t1438;
  t1540 = t1306 + t1505;
  t1560 = t1330*t1284;
  t1630 = -1.*t113*t1438;
  t1677 = t1560 + t1630;
  t2291 = t113*t2274;
  t2327 = t1330*t2319;
  t2336 = t2291 + t2327;
  t2365 = t1330*t2274;
  t2372 = -1.*t113*t2319;
  t2438 = t2365 + t2372;
  t2866 = t337*t1922*t1895;
  t2903 = t1893*t535;
  t2907 = t2866 + t2903;
  t2943 = t1893*t337;
  t2947 = -1.*t1922*t1895*t535;
  t2948 = t2943 + t2947;
  t2942 = -1.*t461*t2907;
  t2958 = t489*t2948;
  t2993 = t2942 + t2958;
  t3040 = t489*t2907;
  t3066 = t461*t2948;
  t3121 = t3040 + t3066;
  t2996 = t293*t2993;
  t3127 = t934*t3121;
  t3130 = t2996 + t3127;
  t3154 = t934*t2993;
  t3230 = -1.*t293*t3121;
  t3279 = t3154 + t3230;
  t3149 = -1.*t142*t3130;
  t3310 = t1126*t3279;
  t3322 = t3149 + t3310;
  t3337 = t1126*t3130;
  t3381 = t142*t3279;
  t3423 = t3337 + t3381;
  t2633 = -0.766044*t1540;
  t2637 = 0.642788*t1677;
  t2639 = t2633 + t2637;
  t2361 = -0.766044*t2336;
  t2479 = 0.642788*t2438;
  t2482 = t2361 + t2479;
  t3325 = t113*t3322;
  t3446 = t1330*t3423;
  t3465 = t3325 + t3446;
  t3493 = t1330*t3322;
  t3505 = -1.*t113*t3423;
  t3509 = t3493 + t3505;
  t1558 = 0.642788*t1540;
  t1806 = 0.766044*t1677;
  t1820 = t1558 + t1806;
  t2642 = 0.642788*t2336;
  t2646 = 0.766044*t2438;
  t2698 = t2642 + t2646;
  t2526 = t1820*t2482;
  t2715 = -1.*t2639*t2698;
  t6 = Cos(var1[8]);
  t3607 = -0.766044*t3465;
  t3662 = 0.642788*t3509;
  t3667 = t3607 + t3662;
  t3475 = 0.642788*t3465;
  t3536 = 0.766044*t3509;
  t3538 = t3475 + t3536;
  t3553 = t1893*t315*t2639;
  t3560 = t1895*t2482;
  t3566 = t3553 + t3560;
  t3593 = -1.*t3538*t3566;
  t3671 = t1893*t315*t1820;
  t3718 = t1895*t2698;
  t3766 = t3671 + t3718;
  t3778 = t3667*t3766;
  t3788 = t2526 + t2715;
  t3938 = -1.*t315*t1922*t3788;
  t3983 = 0. + t3593 + t3778 + t3938;
  t3992 = 1/t3983;
  t81 = Sin(var1[7]);
  t4296 = Sin(var1[8]);
  t4111 = Cos(var1[7]);
  t5840 = Cos(var1[9]);
  t6171 = Sin(var1[9]);
  t5613 = Cos(var1[10]);
  t7541 = t4111*t5840;
  t7554 = -1.*t81*t4296*t6171;
  t7610 = t7541 + t7554;
  t5872 = t5840*t81*t4296;
  t6294 = t4111*t6171;
  t6773 = t5872 + t6294;
  t7648 = Sin(var1[10]);
  t5602 = Cos(var1[11]);
  t7735 = t5613*t7610;
  t7747 = -1.*t6773*t7648;
  t7767 = t7735 + t7747;
  t7450 = t5613*t6773;
  t7698 = t7610*t7648;
  t7702 = t7450 + t7698;
  t7771 = Sin(var1[11]);
  t5346 = Cos(var1[12]);
  t7807 = t5602*t7767;
  t7809 = -1.*t7702*t7771;
  t7815 = t7807 + t7809;
  t7704 = t5602*t7702;
  t7782 = t7767*t7771;
  t7793 = t7704 + t7782;
  t7827 = Sin(var1[12]);
  t5305 = Cos(var1[13]);
  t7833 = t5346*t7815;
  t7834 = -1.*t7793*t7827;
  t7838 = t7833 + t7834;
  t7806 = t5346*t7793;
  t7828 = t7815*t7827;
  t7829 = t7806 + t7828;
  t7839 = Sin(var1[13]);
  t2838 = 0. + t2526 + t2715;
  t7902 = -1.*t5840*t81;
  t7903 = -1.*t4111*t4296*t6171;
  t7904 = t7902 + t7903;
  t7892 = t4111*t5840*t4296;
  t7897 = -1.*t81*t6171;
  t7899 = t7892 + t7897;
  t7912 = t5613*t7904;
  t7913 = -1.*t7899*t7648;
  t7919 = t7912 + t7913;
  t7900 = t5613*t7899;
  t7908 = t7904*t7648;
  t7909 = t7900 + t7908;
  t7958 = t5602*t7919;
  t7961 = -1.*t7909*t7771;
  t7962 = t7958 + t7961;
  t7911 = t5602*t7909;
  t7926 = t7919*t7771;
  t7933 = t7911 + t7926;
  t7981 = t5346*t7962;
  t7994 = -1.*t7933*t7827;
  t7996 = t7981 + t7994;
  t7944 = t5346*t7933;
  t7975 = t7962*t7827;
  t7978 = t7944 + t7975;
  t4128 = -1.*t1820*t3667;
  t4169 = t2639*t3538;
  t4260 = 0. + t4128 + t4169;
  t8025 = -1.*t6*t5613*t6171;
  t8026 = -1.*t6*t5840*t7648;
  t8028 = t8025 + t8026;
  t8020 = t6*t5840*t5613;
  t8021 = -1.*t6*t6171*t7648;
  t8022 = t8020 + t8021;
  t8043 = t5602*t8028;
  t8045 = -1.*t8022*t7771;
  t8047 = t8043 + t8045;
  t8024 = t5602*t8022;
  t8029 = t8028*t7771;
  t8035 = t8024 + t8029;
  t8054 = t5346*t8047;
  t8055 = -1.*t8035*t7827;
  t8057 = t8054 + t8055;
  t8038 = t5346*t8035;
  t8049 = t8047*t7827;
  t8051 = t8038 + t8049;
  t4339 = t2698*t3667;
  t4370 = -1.*t2482*t3538;
  t4446 = 0. + t4339 + t4370;
  t7832 = t5305*t7829;
  t7842 = t7838*t7839;
  t7854 = t7832 + t7842;
  t7856 = 0.642788*t7854;
  t7860 = t5305*t7838;
  t7862 = -1.*t7829*t7839;
  t7867 = t7860 + t7862;
  t7868 = 0.766044*t7867;
  t7877 = t7856 + t7868;
  t4557 = -1.*t1893*t315*t2639;
  t4569 = -1.*t1895*t2482;
  t4623 = 0. + t4557 + t4569;
  t8052 = t5305*t8051;
  t8058 = t8057*t7839;
  t8059 = t8052 + t8058;
  t8061 = 0.642788*t8059;
  t8063 = t5305*t8057;
  t8064 = -1.*t8051*t7839;
  t8065 = t8063 + t8064;
  t8066 = 0.766044*t8065;
  t8067 = t8061 + t8066;
  t4701 = -1.*t315*t1922*t2482;
  t4732 = t1893*t315*t3667;
  t4813 = 0. + t4701 + t4732;
  t7980 = t5305*t7978;
  t7997 = t7996*t7839;
  t8000 = t7980 + t7997;
  t8001 = 0.642788*t8000;
  t8004 = t5305*t7996;
  t8005 = -1.*t7978*t7839;
  t8006 = t8004 + t8005;
  t8010 = 0.766044*t8006;
  t8014 = t8001 + t8010;
  t4920 = t315*t1922*t2639;
  t5048 = t1895*t3667;
  t5089 = 0. + t4920 + t5048;
  t5124 = 0. + t3671 + t3718;
  t5132 = t315*t1922*t2698;
  t5171 = -1.*t1893*t315*t3538;
  t5184 = 0. + t5132 + t5171;
  t5252 = -1.*t315*t1922*t1820;
  t5259 = -1.*t1895*t3538;
  t5265 = 0. + t5252 + t5259;
  t8091 = -0.766044*t7854;
  t8092 = 0.642788*t7867;
  t8096 = t8091 + t8092;
  t8115 = -0.766044*t8059;
  t8116 = 0.642788*t8065;
  t8120 = t8115 + t8116;
  t8109 = -0.766044*t8000;
  t8111 = 0.642788*t8006;
  t8112 = t8109 + t8111;
  t8150 = -1.*t5840;
  t8151 = 1. + t8150;
  t8167 = -1.*t5613;
  t8169 = 1. + t8167;
  t8182 = -1.*t5602;
  t8183 = 1. + t8182;
  t8196 = -1.*t5346;
  t8197 = 1. + t8196;
  t8211 = -1.*t5305;
  t8212 = 1. + t8211;
  t8142 = -1.*t6;
  t8143 = 1. + t8142;
  t8144 = -0.135*t8143;
  t8145 = 0.049*t4296;
  t8148 = 0. + t8144 + t8145;
  t8153 = -0.049*t8151;
  t8154 = -0.09*t6171;
  t8156 = 0. + t8153 + t8154;
  t8159 = -0.09*t8151;
  t8160 = 0.049*t6171;
  t8162 = 0. + t8159 + t8160;
  t8170 = -0.049*t8169;
  t8173 = -0.21*t7648;
  t8175 = 0. + t8170 + t8173;
  t8177 = -0.21*t8169;
  t8178 = 0.049*t7648;
  t8179 = 0. + t8177 + t8178;
  t8184 = -0.0016*t8183;
  t8186 = -0.2707*t7771;
  t8188 = 0. + t8184 + t8186;
  t8190 = -0.2707*t8183;
  t8191 = 0.0016*t7771;
  t8193 = 0. + t8190 + t8191;
  t8198 = 0.0184*t8197;
  t8199 = -0.7055*t7827;
  t8200 = 0. + t8198 + t8199;
  t8203 = -0.7055*t8197;
  t8206 = -0.0184*t7827;
  t8207 = 0. + t8203 + t8206;
  t8213 = -0.0216*t8212;
  t8216 = -1.1135*t7839;
  t8217 = 0. + t8213 + t8216;
  t8219 = -1.1135*t8212;
  t8220 = 0.0216*t7839;
  t8221 = 0. + t8219 + t8220;
  t8288 = -1.*t337;
  t8289 = 1. + t8288;
  t8298 = -1.*t489;
  t8299 = 1. + t8298;
  t8309 = -1.*t934;
  t8310 = 1. + t8309;
  t8320 = -1.*t1126;
  t8321 = 1. + t8320;
  t8330 = -1.*t1330;
  t8331 = 1. + t8330;
  t8277 = -1.*t315;
  t8278 = 1. + t8277;
  t8300 = -0.049*t8299;
  t8301 = -0.21*t461;
  t8302 = 0. + t8300 + t8301;
  t8290 = -0.049*t8289;
  t8291 = -0.09*t535;
  t8292 = 0. + t8290 + t8291;
  t8305 = -0.21*t8299;
  t8306 = 0.049*t461;
  t8307 = 0. + t8305 + t8306;
  t8311 = -0.2707*t8310;
  t8312 = 0.0016*t293;
  t8313 = 0. + t8311 + t8312;
  t8316 = -0.0016*t8310;
  t8317 = -0.2707*t293;
  t8318 = 0. + t8316 + t8317;
  t8322 = 0.0184*t8321;
  t8323 = -0.7055*t142;
  t8324 = 0. + t8322 + t8323;
  t8326 = -0.7055*t8321;
  t8327 = -0.0184*t142;
  t8328 = 0. + t8326 + t8327;
  t8332 = -1.1135*t8331;
  t8333 = 0.0216*t113;
  t8334 = 0. + t8332 + t8333;
  t8336 = -0.0216*t8331;
  t8337 = -1.1135*t113;
  t8338 = 0. + t8336 + t8337;
  t8273 = -1.*t1893;
  t8274 = 1. + t8273;
  t8275 = 0.135*t8274;
  t8276 = 0.1305*t1893*t315;
  t8279 = 0.135*t8278;
  t8280 = 0.049*t1895;
  t8284 = 0. + t8279 + t8280;
  t8285 = t1893*t8284;
  t8293 = t1893*t1895*t8292;
  t8294 = -0.09*t8289;
  t8295 = 0.049*t535;
  t8296 = 0. + t8294 + t8295;
  t8297 = -1.*t1922*t8296;
  t8303 = t8302*t2020;
  t8308 = t8307*t2067;
  t8315 = t8313*t2150;
  t8319 = t8318*t2181;
  t8325 = t8324*t2225;
  t8329 = t8328*t2248;
  t8335 = t8334*t2274;
  t8339 = t8338*t2319;
  t8340 = 0.0306*t2336;
  t8341 = -1.1312*t2438;
  t8342 = 0. + t8275 + t8276 + t8285 + t8293 + t8297 + t8303 + t8308 + t8315 + t8319 + t8325 + t8329 + t8335 + t8339 + t8340 + t8341;
  t8344 = -0.049*t8278;
  t8345 = t315*t337*t8302;
  t8346 = 0.004500000000000004*t1895;
  t8347 = t315*t8292;
  t8348 = -1.*t315*t8307*t535;
  t8349 = t8313*t890;
  t8350 = t8318*t1024;
  t8351 = t8324*t1094;
  t8352 = t8328*t1214;
  t8353 = t8334*t1284;
  t8354 = t8338*t1438;
  t8355 = 0.0306*t1540;
  t8356 = -1.1312*t1677;
  t8357 = 0. + t8344 + t8345 + t8346 + t8347 + t8348 + t8349 + t8350 + t8351 + t8352 + t8353 + t8354 + t8355 + t8356;
  t8140 = 0.135*t81;
  t8141 = -0.1305*t6*t81;
  t8149 = t81*t8148;
  t8157 = t81*t4296*t8156;
  t8166 = t4111*t8162;
  t8176 = t6773*t8175;
  t8181 = t7610*t8179;
  t8189 = t7702*t8188;
  t8194 = t7767*t8193;
  t8201 = t7793*t8200;
  t8210 = t7815*t8207;
  t8218 = t7829*t8217;
  t8226 = t7838*t8221;
  t8227 = 0.0306*t7854;
  t8228 = -1.1312*t7867;
  t8229 = 0. + t8140 + t8141 + t8149 + t8157 + t8166 + t8176 + t8181 + t8189 + t8194 + t8201 + t8210 + t8218 + t8226 + t8227 + t8228;
  t8257 = -0.049*t8143;
  t8258 = -0.004500000000000004*t4296;
  t8259 = t6*t8156;
  t8260 = t6*t5840*t8175;
  t8261 = -1.*t6*t6171*t8179;
  t8262 = t8022*t8188;
  t8263 = t8028*t8193;
  t8264 = t8035*t8200;
  t8265 = t8047*t8207;
  t8266 = t8051*t8217;
  t8267 = t8057*t8221;
  t8268 = 0.0306*t8059;
  t8269 = -1.1312*t8065;
  t8270 = 0. + t8257 + t8258 + t8259 + t8260 + t8261 + t8262 + t8263 + t8264 + t8265 + t8266 + t8267 + t8268 + t8269;
  t8231 = -1.*t4111;
  t8233 = 1. + t8231;
  t8236 = -0.135*t8233;
  t8237 = -0.1305*t4111*t6;
  t8238 = t4111*t8148;
  t8239 = t4111*t4296*t8156;
  t8240 = -1.*t81*t8162;
  t8241 = t7899*t8175;
  t8242 = t7904*t8179;
  t8243 = t7909*t8188;
  t8246 = t7919*t8193;
  t8247 = t7933*t8200;
  t8248 = t7962*t8207;
  t8249 = t7978*t8217;
  t8250 = t7996*t8221;
  t8251 = 0.0306*t8000;
  t8252 = -1.1312*t8006;
  t8253 = 0. + t8236 + t8237 + t8238 + t8239 + t8240 + t8241 + t8242 + t8243 + t8246 + t8247 + t8248 + t8249 + t8250 + t8251 + t8252;
  t8365 = -0.135*t1922;
  t8366 = 0.1305*t315*t1922;
  t8367 = t1922*t8284;
  t8368 = t1922*t1895*t8292;
  t8369 = t1893*t8296;
  t8370 = t8302*t2907;
  t8371 = t8307*t2948;
  t8372 = t8313*t2993;
  t8373 = t8318*t3121;
  t8374 = t8324*t3130;
  t8375 = t8328*t3279;
  t8376 = t8334*t3322;
  t8377 = t8338*t3423;
  t8378 = 0.0306*t3465;
  t8379 = -1.1312*t3509;
  t8380 = 0. + t8365 + t8366 + t8367 + t8368 + t8369 + t8370 + t8371 + t8372 + t8373 + t8374 + t8375 + t8376 + t8377 + t8378 + t8379;
  t8343 = t2639*t8342;
  t8358 = -1.*t8357*t2482;
  t8359 = t8343 + t8358;
  t8388 = t1893*t315*t8357;
  t8389 = t1895*t8342;
  t8390 = t8388 + t8389;
  t8361 = t1820*t8342;
  t8362 = -1.*t8357*t2698;
  t8363 = t8361 + t8362;

  p_output1(0)=0. + t3992*t4296*t4446 - 1.*t3992*t4111*t4260*t6 - 1.*t2838*t3992*t6*t81;
  p_output1(1)=0. + t3992*t4296*t4813 - 1.*t3992*t4111*t5089*t6 - 1.*t3992*t4623*t6*t81;
  p_output1(2)=0. + t3992*t4296*t5184 - 1.*t3992*t4111*t5265*t6 - 1.*t3992*t5124*t6*t81;
  p_output1(3)=0.;
  p_output1(4)=0. + t2838*t3992*t7877 + t3992*t4260*t8014 + t3992*t4446*t8067;
  p_output1(5)=0. + t3992*t4623*t7877 + t3992*t5089*t8014 + t3992*t4813*t8067;
  p_output1(6)=0. + t3992*t5124*t7877 + t3992*t5265*t8014 + t3992*t5184*t8067;
  p_output1(7)=0.;
  p_output1(8)=0. + t2838*t3992*t8096 + t3992*t4260*t8112 + t3992*t4446*t8120;
  p_output1(9)=0. + t3992*t4623*t8096 + t3992*t5089*t8112 + t3992*t4813*t8120;
  p_output1(10)=0. + t3992*t5124*t8096 + t3992*t5265*t8112 + t3992*t5184*t8120;
  p_output1(11)=0.;
  p_output1(12)=t2838*t3992*t8229 + t3992*t4260*t8253 + t3992*t4446*t8270 + t3992*(-1.*t3538*t8359 + t3667*t8363 - 1.*t3788*t8380);
  p_output1(13)=t3992*t4623*t8229 + t3992*t5089*t8253 + t3992*t4813*t8270 + t3992*(-1.*t1922*t315*t8359 + t3566*t8380 - 1.*t3667*t8390);
  p_output1(14)=t3992*t5124*t8229 + t3992*t5265*t8253 + t3992*t5184*t8270 + t3992*(t1922*t315*t8363 - 1.*t3766*t8380 + t3538*t8390);
  p_output1(15)=0. + (t3593 + t3778 + t3938)*t3992;
}


       
void H_LeftToeBottom_to_RightToeBottom(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
