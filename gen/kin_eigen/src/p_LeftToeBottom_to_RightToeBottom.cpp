/*
 * Automatically Generated from Mathematica.
 * Mon 26 Feb 2018 15:43:11 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_LeftToeBottom_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t11;
  double t104;
  double t230;
  double t355;
  double t432;
  double t504;
  double t639;
  double t848;
  double t1075;
  double t1086;
  double t1092;
  double t1149;
  double t1024;
  double t1037;
  double t1042;
  double t1243;
  double t1273;
  double t1293;
  double t1429;
  double t1458;
  double t1548;
  double t1654;
  double t1369;
  double t1391;
  double t1392;
  double t1846;
  double t1877;
  double t1895;
  double t2139;
  double t2147;
  double t2162;
  double t2191;
  double t2108;
  double t2123;
  double t2124;
  double t2276;
  double t2304;
  double t2316;
  double t2467;
  double t2475;
  double t2481;
  double t2544;
  double t2361;
  double t2434;
  double t2445;
  double t2610;
  double t2615;
  double t2633;
  double t3161;
  double t3293;
  double t3272;
  double t3283;
  double t3312;
  double t3386;
  double t3284;
  double t3318;
  double t3353;
  double t3133;
  double t3429;
  double t3438;
  double t3450;
  double t3641;
  double t3381;
  double t3467;
  double t3535;
  double t3006;
  double t3672;
  double t3715;
  double t3716;
  double t3953;
  double t3628;
  double t3738;
  double t3741;
  double t2871;
  double t4042;
  double t4046;
  double t4137;
  double t4804;
  double t4755;
  double t4769;
  double t4779;
  double t4814;
  double t4848;
  double t5059;
  double t5066;
  double t5133;
  double t4909;
  double t5186;
  double t5191;
  double t5253;
  double t5279;
  double t5324;
  double t5204;
  double t5405;
  double t5461;
  double t5545;
  double t5560;
  double t5660;
  double t5482;
  double t5696;
  double t5697;
  double t5708;
  double t5720;
  double t5808;
  double t3768;
  double t4195;
  double t4361;
  double t4423;
  double t4462;
  double t4548;
  double t5700;
  double t5843;
  double t5874;
  double t5951;
  double t5989;
  double t5998;
  double t6382;
  double t6401;
  double t6441;
  double t6563;
  double t6688;
  double t6701;
  double t6531;
  double t6729;
  double t6780;
  double t6863;
  double t6885;
  double t6947;
  double t6831;
  double t7072;
  double t7180;
  double t7249;
  double t7303;
  double t7408;
  double t7232;
  double t7432;
  double t7546;
  double t7592;
  double t7597;
  double t7632;
  double t6166;
  double t6215;
  double t6236;
  double t5927;
  double t6062;
  double t6084;
  double t7575;
  double t7719;
  double t7785;
  double t8584;
  double t8741;
  double t8794;
  double t4405;
  double t4673;
  double t4753;
  double t6253;
  double t6289;
  double t6323;
  double t6132;
  double t6347;
  double t131;
  double t176;
  double t177;
  double t252;
  double t253;
  double t576;
  double t640;
  double t653;
  double t849;
  double t867;
  double t999;
  double t1097;
  double t1175;
  double t1197;
  double t1302;
  double t1314;
  double t1319;
  double t9153;
  double t9156;
  double t9162;
  double t9169;
  double t9181;
  double t9182;
  double t1559;
  double t1730;
  double t1803;
  double t1920;
  double t1935;
  double t1936;
  double t9187;
  double t9188;
  double t9197;
  double t9199;
  double t9200;
  double t9205;
  double t2187;
  double t2198;
  double t2242;
  double t2319;
  double t2325;
  double t2355;
  double t9212;
  double t9214;
  double t9215;
  double t9217;
  double t9220;
  double t9224;
  double t2537;
  double t2575;
  double t2596;
  double t2638;
  double t2659;
  double t2660;
  double t9232;
  double t9233;
  double t9234;
  double t9237;
  double t9238;
  double t9239;
  double t9000;
  double t9012;
  double t9019;
  double t8272;
  double t8839;
  double t8855;
  double t8867;
  double t8896;
  double t8909;
  double t8948;
  double t9031;
  double t9056;
  double t9057;
  double t9062;
  double t9063;
  double t9079;
  double t9092;
  double t9095;
  double t9290;
  double t9293;
  double t9295;
  double t9299;
  double t9305;
  double t9306;
  double t9310;
  double t9313;
  double t9314;
  double t9322;
  double t9323;
  double t9326;
  double t9330;
  double t9333;
  double t9336;
  double t9341;
  double t9342;
  double t9345;
  double t9393;
  double t9394;
  double t9403;
  double t9404;
  double t9415;
  double t9416;
  double t9431;
  double t9432;
  double t9441;
  double t9442;
  double t9380;
  double t9381;
  double t9405;
  double t9406;
  double t9407;
  double t9395;
  double t9396;
  double t9397;
  double t9411;
  double t9412;
  double t9413;
  double t9417;
  double t9419;
  double t9423;
  double t9427;
  double t9428;
  double t9429;
  double t9433;
  double t9434;
  double t9435;
  double t9437;
  double t9438;
  double t9439;
  double t9444;
  double t9445;
  double t9446;
  double t9448;
  double t9449;
  double t9450;
  double t9373;
  double t9374;
  double t9378;
  double t9379;
  double t9382;
  double t9383;
  double t9384;
  double t9388;
  double t9398;
  double t9399;
  double t9400;
  double t9401;
  double t9402;
  double t9409;
  double t9414;
  double t9424;
  double t9430;
  double t9436;
  double t9440;
  double t9447;
  double t9451;
  double t9452;
  double t9453;
  double t9454;
  double t9456;
  double t9457;
  double t9458;
  double t9459;
  double t9460;
  double t9461;
  double t9463;
  double t9464;
  double t9465;
  double t9466;
  double t9467;
  double t9468;
  double t9469;
  double t9470;
  double t16;
  double t122;
  double t266;
  double t678;
  double t1002;
  double t1204;
  double t1365;
  double t1842;
  double t2018;
  double t2244;
  double t2358;
  double t2605;
  double t2663;
  double t2678;
  double t2722;
  double t2730;
  double t2775;
  double t2795;
  double t2796;
  double t2797;
  double t2799;
  double t2836;
  double t9277;
  double t9284;
  double t9285;
  double t9287;
  double t9288;
  double t9298;
  double t9307;
  double t9315;
  double t9327;
  double t9337;
  double t9348;
  double t9353;
  double t9354;
  double t9355;
  double t9358;
  double t9359;
  double t9360;
  double t9363;
  double t9366;
  double t9367;
  double t9112;
  double t9113;
  double t9115;
  double t9119;
  double t9133;
  double t9142;
  double t9143;
  double t9165;
  double t9183;
  double t9198;
  double t9206;
  double t9216;
  double t9231;
  double t9236;
  double t9240;
  double t9241;
  double t9245;
  double t9251;
  double t9255;
  double t9258;
  double t9260;
  double t9263;
  double t9264;
  double t9268;
  double t9478;
  double t9479;
  double t9480;
  double t9481;
  double t9482;
  double t9483;
  double t9484;
  double t9485;
  double t9486;
  double t9487;
  double t9488;
  double t9489;
  double t9490;
  double t9491;
  double t9492;
  double t9493;
  double t9455;
  double t9471;
  double t9472;
  double t9510;
  double t9511;
  double t9512;
  double t9474;
  double t9475;
  double t9476;
  t11 = Sin(var1[7]);
  t104 = Cos(var1[8]);
  t230 = Sin(var1[8]);
  t355 = Cos(var1[9]);
  t432 = -1.*t355;
  t504 = 1. + t432;
  t639 = Sin(var1[9]);
  t848 = Cos(var1[7]);
  t1075 = Cos(var1[10]);
  t1086 = -1.*t1075;
  t1092 = 1. + t1086;
  t1149 = Sin(var1[10]);
  t1024 = t355*t11*t230;
  t1037 = t848*t639;
  t1042 = t1024 + t1037;
  t1243 = t848*t355;
  t1273 = -1.*t11*t230*t639;
  t1293 = t1243 + t1273;
  t1429 = Cos(var1[11]);
  t1458 = -1.*t1429;
  t1548 = 1. + t1458;
  t1654 = Sin(var1[11]);
  t1369 = t1075*t1042;
  t1391 = t1293*t1149;
  t1392 = t1369 + t1391;
  t1846 = t1075*t1293;
  t1877 = -1.*t1042*t1149;
  t1895 = t1846 + t1877;
  t2139 = Cos(var1[12]);
  t2147 = -1.*t2139;
  t2162 = 1. + t2147;
  t2191 = Sin(var1[12]);
  t2108 = t1429*t1392;
  t2123 = t1895*t1654;
  t2124 = t2108 + t2123;
  t2276 = t1429*t1895;
  t2304 = -1.*t1392*t1654;
  t2316 = t2276 + t2304;
  t2467 = Cos(var1[13]);
  t2475 = -1.*t2467;
  t2481 = 1. + t2475;
  t2544 = Sin(var1[13]);
  t2361 = t2139*t2124;
  t2434 = t2316*t2191;
  t2445 = t2361 + t2434;
  t2610 = t2139*t2316;
  t2615 = -1.*t2124*t2191;
  t2633 = t2610 + t2615;
  t3161 = Cos(var1[1]);
  t3293 = Cos(var1[3]);
  t3272 = Cos(var1[2]);
  t3283 = Sin(var1[3]);
  t3312 = Sin(var1[2]);
  t3386 = Cos(var1[4]);
  t3284 = -1.*t3161*t3272*t3283;
  t3318 = -1.*t3293*t3161*t3312;
  t3353 = t3284 + t3318;
  t3133 = Sin(var1[4]);
  t3429 = t3293*t3161*t3272;
  t3438 = -1.*t3161*t3283*t3312;
  t3450 = t3429 + t3438;
  t3641 = Cos(var1[5]);
  t3381 = t3133*t3353;
  t3467 = t3386*t3450;
  t3535 = t3381 + t3467;
  t3006 = Sin(var1[5]);
  t3672 = t3386*t3353;
  t3715 = -1.*t3133*t3450;
  t3716 = t3672 + t3715;
  t3953 = Cos(var1[6]);
  t3628 = -1.*t3006*t3535;
  t3738 = t3641*t3716;
  t3741 = t3628 + t3738;
  t2871 = Sin(var1[6]);
  t4042 = t3641*t3535;
  t4046 = t3006*t3716;
  t4137 = t4042 + t4046;
  t4804 = Sin(var1[0]);
  t4755 = Cos(var1[0]);
  t4769 = Sin(var1[1]);
  t4779 = t4755*t3272*t4769;
  t4814 = -1.*t4804*t3312;
  t4848 = t4779 + t4814;
  t5059 = -1.*t3272*t4804;
  t5066 = -1.*t4755*t4769*t3312;
  t5133 = t5059 + t5066;
  t4909 = -1.*t3283*t4848;
  t5186 = t3293*t5133;
  t5191 = t4909 + t5186;
  t5253 = t3293*t4848;
  t5279 = t3283*t5133;
  t5324 = t5253 + t5279;
  t5204 = t3133*t5191;
  t5405 = t3386*t5324;
  t5461 = t5204 + t5405;
  t5545 = t3386*t5191;
  t5560 = -1.*t3133*t5324;
  t5660 = t5545 + t5560;
  t5482 = -1.*t3006*t5461;
  t5696 = t3641*t5660;
  t5697 = t5482 + t5696;
  t5708 = t3641*t5461;
  t5720 = t3006*t5660;
  t5808 = t5708 + t5720;
  t3768 = t2871*t3741;
  t4195 = t3953*t4137;
  t4361 = t3768 + t4195;
  t4423 = t3953*t3741;
  t4462 = -1.*t2871*t4137;
  t4548 = t4423 + t4462;
  t5700 = t2871*t5697;
  t5843 = t3953*t5808;
  t5874 = t5700 + t5843;
  t5951 = t3953*t5697;
  t5989 = -1.*t2871*t5808;
  t5998 = t5951 + t5989;
  t6382 = t3272*t4804*t4769;
  t6401 = t4755*t3312;
  t6441 = t6382 + t6401;
  t6563 = t4755*t3272;
  t6688 = -1.*t4804*t4769*t3312;
  t6701 = t6563 + t6688;
  t6531 = -1.*t3283*t6441;
  t6729 = t3293*t6701;
  t6780 = t6531 + t6729;
  t6863 = t3293*t6441;
  t6885 = t3283*t6701;
  t6947 = t6863 + t6885;
  t6831 = t3133*t6780;
  t7072 = t3386*t6947;
  t7180 = t6831 + t7072;
  t7249 = t3386*t6780;
  t7303 = -1.*t3133*t6947;
  t7408 = t7249 + t7303;
  t7232 = -1.*t3006*t7180;
  t7432 = t3641*t7408;
  t7546 = t7232 + t7432;
  t7592 = t3641*t7180;
  t7597 = t3006*t7408;
  t7632 = t7592 + t7597;
  t6166 = -0.766044*t4361;
  t6215 = 0.642788*t4548;
  t6236 = t6166 + t6215;
  t5927 = -0.766044*t5874;
  t6062 = 0.642788*t5998;
  t6084 = t5927 + t6062;
  t7575 = t2871*t7546;
  t7719 = t3953*t7632;
  t7785 = t7575 + t7719;
  t8584 = t3953*t7546;
  t8741 = -1.*t2871*t7632;
  t8794 = t8584 + t8741;
  t4405 = 0.642788*t4361;
  t4673 = 0.766044*t4548;
  t4753 = t4405 + t4673;
  t6253 = 0.642788*t5874;
  t6289 = 0.766044*t5998;
  t6323 = t6253 + t6289;
  t6132 = t4753*t6084;
  t6347 = -1.*t6236*t6323;
  t131 = -1.*t104;
  t176 = 1. + t131;
  t177 = -0.135*t176;
  t252 = 0.049*t230;
  t253 = 0. + t177 + t252;
  t576 = -0.049*t504;
  t640 = -0.09*t639;
  t653 = 0. + t576 + t640;
  t849 = -0.09*t504;
  t867 = 0.049*t639;
  t999 = 0. + t849 + t867;
  t1097 = -0.049*t1092;
  t1175 = -0.21*t1149;
  t1197 = 0. + t1097 + t1175;
  t1302 = -0.21*t1092;
  t1314 = 0.049*t1149;
  t1319 = 0. + t1302 + t1314;
  t9153 = t848*t355*t230;
  t9156 = -1.*t11*t639;
  t9162 = t9153 + t9156;
  t9169 = -1.*t355*t11;
  t9181 = -1.*t848*t230*t639;
  t9182 = t9169 + t9181;
  t1559 = -0.0016*t1548;
  t1730 = -0.2707*t1654;
  t1803 = 0. + t1559 + t1730;
  t1920 = -0.2707*t1548;
  t1935 = 0.0016*t1654;
  t1936 = 0. + t1920 + t1935;
  t9187 = t1075*t9162;
  t9188 = t9182*t1149;
  t9197 = t9187 + t9188;
  t9199 = t1075*t9182;
  t9200 = -1.*t9162*t1149;
  t9205 = t9199 + t9200;
  t2187 = 0.0184*t2162;
  t2198 = -0.7055*t2191;
  t2242 = 0. + t2187 + t2198;
  t2319 = -0.7055*t2162;
  t2325 = -0.0184*t2191;
  t2355 = 0. + t2319 + t2325;
  t9212 = t1429*t9197;
  t9214 = t9205*t1654;
  t9215 = t9212 + t9214;
  t9217 = t1429*t9205;
  t9220 = -1.*t9197*t1654;
  t9224 = t9217 + t9220;
  t2537 = -0.0216*t2481;
  t2575 = -1.1135*t2544;
  t2596 = 0. + t2537 + t2575;
  t2638 = -1.1135*t2481;
  t2659 = 0.0216*t2544;
  t2660 = 0. + t2638 + t2659;
  t9232 = t2139*t9215;
  t9233 = t9224*t2191;
  t9234 = t9232 + t9233;
  t9237 = t2139*t9224;
  t9238 = -1.*t9215*t2191;
  t9239 = t9237 + t9238;
  t9000 = -0.766044*t7785;
  t9012 = 0.642788*t8794;
  t9019 = t9000 + t9012;
  t8272 = 0.642788*t7785;
  t8839 = 0.766044*t8794;
  t8855 = t8272 + t8839;
  t8867 = t4755*t3161*t6236;
  t8896 = t4769*t6084;
  t8909 = t8867 + t8896;
  t8948 = -1.*t8855*t8909;
  t9031 = t4755*t3161*t4753;
  t9056 = t4769*t6323;
  t9057 = t9031 + t9056;
  t9062 = t9019*t9057;
  t9063 = t6132 + t6347;
  t9079 = -1.*t3161*t4804*t9063;
  t9092 = 0. + t8948 + t9062 + t9079;
  t9095 = 1/t9092;
  t9290 = t104*t355*t1075;
  t9293 = -1.*t104*t639*t1149;
  t9295 = t9290 + t9293;
  t9299 = -1.*t104*t1075*t639;
  t9305 = -1.*t104*t355*t1149;
  t9306 = t9299 + t9305;
  t9310 = t1429*t9295;
  t9313 = t9306*t1654;
  t9314 = t9310 + t9313;
  t9322 = t1429*t9306;
  t9323 = -1.*t9295*t1654;
  t9326 = t9322 + t9323;
  t9330 = t2139*t9314;
  t9333 = t9326*t2191;
  t9336 = t9330 + t9333;
  t9341 = t2139*t9326;
  t9342 = -1.*t9314*t2191;
  t9345 = t9341 + t9342;
  t9393 = -1.*t3272;
  t9394 = 1. + t9393;
  t9403 = -1.*t3293;
  t9404 = 1. + t9403;
  t9415 = -1.*t3386;
  t9416 = 1. + t9415;
  t9431 = -1.*t3641;
  t9432 = 1. + t9431;
  t9441 = -1.*t3953;
  t9442 = 1. + t9441;
  t9380 = -1.*t3161;
  t9381 = 1. + t9380;
  t9405 = -0.049*t9404;
  t9406 = -0.21*t3283;
  t9407 = 0. + t9405 + t9406;
  t9395 = -0.049*t9394;
  t9396 = -0.09*t3312;
  t9397 = 0. + t9395 + t9396;
  t9411 = -0.21*t9404;
  t9412 = 0.049*t3283;
  t9413 = 0. + t9411 + t9412;
  t9417 = -0.2707*t9416;
  t9419 = 0.0016*t3133;
  t9423 = 0. + t9417 + t9419;
  t9427 = -0.0016*t9416;
  t9428 = -0.2707*t3133;
  t9429 = 0. + t9427 + t9428;
  t9433 = 0.0184*t9432;
  t9434 = -0.7055*t3006;
  t9435 = 0. + t9433 + t9434;
  t9437 = -0.7055*t9432;
  t9438 = -0.0184*t3006;
  t9439 = 0. + t9437 + t9438;
  t9444 = -1.1135*t9442;
  t9445 = 0.0216*t2871;
  t9446 = 0. + t9444 + t9445;
  t9448 = -0.0216*t9442;
  t9449 = -1.1135*t2871;
  t9450 = 0. + t9448 + t9449;
  t9373 = -1.*t4755;
  t9374 = 1. + t9373;
  t9378 = 0.135*t9374;
  t9379 = 0.1305*t4755*t3161;
  t9382 = 0.135*t9381;
  t9383 = 0.049*t4769;
  t9384 = 0. + t9382 + t9383;
  t9388 = t4755*t9384;
  t9398 = t4755*t4769*t9397;
  t9399 = -0.09*t9394;
  t9400 = 0.049*t3312;
  t9401 = 0. + t9399 + t9400;
  t9402 = -1.*t4804*t9401;
  t9409 = t9407*t4848;
  t9414 = t9413*t5133;
  t9424 = t9423*t5191;
  t9430 = t9429*t5324;
  t9436 = t9435*t5461;
  t9440 = t9439*t5660;
  t9447 = t9446*t5697;
  t9451 = t9450*t5808;
  t9452 = 0.0306*t5874;
  t9453 = -1.1312*t5998;
  t9454 = 0. + t9378 + t9379 + t9388 + t9398 + t9402 + t9409 + t9414 + t9424 + t9430 + t9436 + t9440 + t9447 + t9451 + t9452 + t9453;
  t9456 = -0.049*t9381;
  t9457 = t3161*t3272*t9407;
  t9458 = 0.004500000000000004*t4769;
  t9459 = t3161*t9397;
  t9460 = -1.*t3161*t9413*t3312;
  t9461 = t9423*t3353;
  t9463 = t9429*t3450;
  t9464 = t9435*t3535;
  t9465 = t9439*t3716;
  t9466 = t9446*t3741;
  t9467 = t9450*t4137;
  t9468 = 0.0306*t4361;
  t9469 = -1.1312*t4548;
  t9470 = 0. + t9456 + t9457 + t9458 + t9459 + t9460 + t9461 + t9463 + t9464 + t9465 + t9466 + t9467 + t9468 + t9469;
  t16 = 0.135*t11;
  t122 = -0.1305*t104*t11;
  t266 = t11*t253;
  t678 = t11*t230*t653;
  t1002 = t848*t999;
  t1204 = t1042*t1197;
  t1365 = t1293*t1319;
  t1842 = t1392*t1803;
  t2018 = t1895*t1936;
  t2244 = t2124*t2242;
  t2358 = t2316*t2355;
  t2605 = t2445*t2596;
  t2663 = t2633*t2660;
  t2678 = t2467*t2445;
  t2722 = t2633*t2544;
  t2730 = t2678 + t2722;
  t2775 = 0.0306*t2730;
  t2795 = t2467*t2633;
  t2796 = -1.*t2445*t2544;
  t2797 = t2795 + t2796;
  t2799 = -1.1312*t2797;
  t2836 = 0. + t16 + t122 + t266 + t678 + t1002 + t1204 + t1365 + t1842 + t2018 + t2244 + t2358 + t2605 + t2663 + t2775 + t2799;
  t9277 = -0.049*t176;
  t9284 = -0.004500000000000004*t230;
  t9285 = t104*t653;
  t9287 = t104*t355*t1197;
  t9288 = -1.*t104*t639*t1319;
  t9298 = t9295*t1803;
  t9307 = t9306*t1936;
  t9315 = t9314*t2242;
  t9327 = t9326*t2355;
  t9337 = t9336*t2596;
  t9348 = t9345*t2660;
  t9353 = t2467*t9336;
  t9354 = t9345*t2544;
  t9355 = t9353 + t9354;
  t9358 = 0.0306*t9355;
  t9359 = t2467*t9345;
  t9360 = -1.*t9336*t2544;
  t9363 = t9359 + t9360;
  t9366 = -1.1312*t9363;
  t9367 = 0. + t9277 + t9284 + t9285 + t9287 + t9288 + t9298 + t9307 + t9315 + t9327 + t9337 + t9348 + t9358 + t9366;
  t9112 = -1.*t848;
  t9113 = 1. + t9112;
  t9115 = -0.135*t9113;
  t9119 = -0.1305*t848*t104;
  t9133 = t848*t253;
  t9142 = t848*t230*t653;
  t9143 = -1.*t11*t999;
  t9165 = t9162*t1197;
  t9183 = t9182*t1319;
  t9198 = t9197*t1803;
  t9206 = t9205*t1936;
  t9216 = t9215*t2242;
  t9231 = t9224*t2355;
  t9236 = t9234*t2596;
  t9240 = t9239*t2660;
  t9241 = t2467*t9234;
  t9245 = t9239*t2544;
  t9251 = t9241 + t9245;
  t9255 = 0.0306*t9251;
  t9258 = t2467*t9239;
  t9260 = -1.*t9234*t2544;
  t9263 = t9258 + t9260;
  t9264 = -1.1312*t9263;
  t9268 = 0. + t9115 + t9119 + t9133 + t9142 + t9143 + t9165 + t9183 + t9198 + t9206 + t9216 + t9231 + t9236 + t9240 + t9255 + t9264;
  t9478 = -0.135*t4804;
  t9479 = 0.1305*t3161*t4804;
  t9480 = t4804*t9384;
  t9481 = t4804*t4769*t9397;
  t9482 = t4755*t9401;
  t9483 = t9407*t6441;
  t9484 = t9413*t6701;
  t9485 = t9423*t6780;
  t9486 = t9429*t6947;
  t9487 = t9435*t7180;
  t9488 = t9439*t7408;
  t9489 = t9446*t7546;
  t9490 = t9450*t7632;
  t9491 = 0.0306*t7785;
  t9492 = -1.1312*t8794;
  t9493 = 0. + t9478 + t9479 + t9480 + t9481 + t9482 + t9483 + t9484 + t9485 + t9486 + t9487 + t9488 + t9489 + t9490 + t9491 + t9492;
  t9455 = t6236*t9454;
  t9471 = -1.*t9470*t6084;
  t9472 = t9455 + t9471;
  t9510 = t4755*t3161*t9470;
  t9511 = t4769*t9454;
  t9512 = t9510 + t9511;
  t9474 = t4753*t9454;
  t9475 = -1.*t9470*t6323;
  t9476 = t9474 + t9475;

  p_output1(0)=t2836*(0. + t6132 + t6347)*t9095 + (0. + t6236*t8855 - 1.*t4753*t9019)*t9095*t9268 + (0. - 1.*t6084*t8855 + t6323*t9019)*t9095*t9367 + t9095*(-1.*t8855*t9472 + t9019*t9476 - 1.*t9063*t9493);
  p_output1(1)=t2836*(0. - 1.*t4769*t6084 - 1.*t3161*t4755*t6236)*t9095 + (0. + t3161*t4804*t6236 + t4769*t9019)*t9095*t9268 + (0. - 1.*t3161*t4804*t6084 + t3161*t4755*t9019)*t9095*t9367 + t9095*(-1.*t3161*t4804*t9472 + t8909*t9493 - 1.*t9019*t9512);
  p_output1(2)=t2836*(0. + t9031 + t9056)*t9095 + (0. - 1.*t3161*t4753*t4804 - 1.*t4769*t8855)*t9095*t9268 + (0. + t3161*t4804*t6323 - 1.*t3161*t4755*t8855)*t9095*t9367 + t9095*(t3161*t4804*t9476 - 1.*t9057*t9493 + t8855*t9512);
}


       
void p_LeftToeBottom_to_RightToeBottom(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
