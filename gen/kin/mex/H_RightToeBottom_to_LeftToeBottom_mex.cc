/*
 * Automatically Generated from Mathematica.
 * Mon 26 Feb 2018 15:42:43 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1353;
  double t1409;
  double t1758;
  double t1408;
  double t1791;
  double t1264;
  double t2932;
  double t3293;
  double t3526;
  double t1488;
  double t2057;
  double t2178;
  double t4065;
  double t980;
  double t6143;
  double t6150;
  double t6154;
  double t2799;
  double t5970;
  double t6032;
  double t6176;
  double t921;
  double t6201;
  double t6213;
  double t6216;
  double t6116;
  double t6180;
  double t6185;
  double t6220;
  double t6263;
  double t6259;
  double t6260;
  double t6284;
  double t6288;
  double t6293;
  double t6262;
  double t6264;
  double t6266;
  double t6301;
  double t6303;
  double t6306;
  double t6271;
  double t6295;
  double t6297;
  double t6311;
  double t6312;
  double t6313;
  double t6298;
  double t6307;
  double t6309;
  double t6317;
  double t6318;
  double t6319;
  double t6310;
  double t6314;
  double t6315;
  double t6194;
  double t6232;
  double t6234;
  double t6242;
  double t6243;
  double t6248;
  double t6316;
  double t6320;
  double t6321;
  double t6323;
  double t6326;
  double t6331;
  double t6345;
  double t6348;
  double t6349;
  double t6341;
  double t6343;
  double t6344;
  double t6361;
  double t6362;
  double t6364;
  double t6355;
  double t6356;
  double t6358;
  double t6368;
  double t6369;
  double t6370;
  double t6360;
  double t6365;
  double t6366;
  double t6374;
  double t6375;
  double t6376;
  double t6367;
  double t6371;
  double t6372;
  double t6382;
  double t6383;
  double t6386;
  double t6373;
  double t6377;
  double t6378;
  double t6322;
  double t6335;
  double t6336;
  double t6238;
  double t6255;
  double t6257;
  double t6381;
  double t6387;
  double t6388;
  double t6391;
  double t6393;
  double t6394;
  double t6390;
  double t6396;
  double t6398;
  double t6404;
  double t6405;
  double t6406;
  double t601;
  double t6410;
  double t6411;
  double t6353;
  double t6399;
  double t6400;
  double t6402;
  double t6403;
  double t6407;
  double t6408;
  double t6409;
  double t6412;
  double t6413;
  double t6414;
  double t6415;
  double t485;
  double t6418;
  double t6423;
  double t6420;
  double t6421;
  double t6422;
  double t6456;
  double t6453;
  double t6454;
  double t6457;
  double t6461;
  double t6455;
  double t6458;
  double t6459;
  double t6452;
  double t6462;
  double t6463;
  double t6464;
  double t6468;
  double t6460;
  double t6465;
  double t6466;
  double t6451;
  double t6469;
  double t6470;
  double t6471;
  double t6475;
  double t6467;
  double t6472;
  double t6473;
  double t6450;
  double t6476;
  double t6477;
  double t6478;
  double t6339;
  double t6350;
  double t6352;
  double t6488;
  double t6489;
  double t6490;
  double t6492;
  double t6493;
  double t6494;
  double t6491;
  double t6495;
  double t6496;
  double t6498;
  double t6499;
  double t6500;
  double t6497;
  double t6501;
  double t6502;
  double t6504;
  double t6505;
  double t6506;
  double t6503;
  double t6507;
  double t6508;
  double t6510;
  double t6511;
  double t6512;
  double t6417;
  double t6522;
  double t6523;
  double t6524;
  double t6526;
  double t6527;
  double t6528;
  double t6525;
  double t6529;
  double t6530;
  double t6532;
  double t6533;
  double t6534;
  double t6531;
  double t6535;
  double t6536;
  double t6538;
  double t6539;
  double t6540;
  double t6537;
  double t6541;
  double t6542;
  double t6544;
  double t6545;
  double t6546;
  double t6434;
  double t6435;
  double t6436;
  double t6474;
  double t6479;
  double t6480;
  double t6481;
  double t6482;
  double t6483;
  double t6484;
  double t6485;
  double t6486;
  double t6426;
  double t6427;
  double t6428;
  double t6509;
  double t6513;
  double t6514;
  double t6515;
  double t6516;
  double t6517;
  double t6518;
  double t6519;
  double t6520;
  double t6430;
  double t6431;
  double t6432;
  double t6543;
  double t6547;
  double t6548;
  double t6549;
  double t6550;
  double t6551;
  double t6552;
  double t6553;
  double t6554;
  double t6445;
  double t6446;
  double t6447;
  double t6439;
  double t6440;
  double t6441;
  double t6443;
  double t6565;
  double t6566;
  double t6567;
  double t6569;
  double t6570;
  double t6571;
  double t6573;
  double t6574;
  double t6575;
  double t6596;
  double t6597;
  double t6606;
  double t6607;
  double t6616;
  double t6617;
  double t6626;
  double t6627;
  double t6636;
  double t6637;
  double t6590;
  double t6591;
  double t6598;
  double t6599;
  double t6600;
  double t6608;
  double t6609;
  double t6610;
  double t6612;
  double t6613;
  double t6614;
  double t6618;
  double t6619;
  double t6620;
  double t6622;
  double t6623;
  double t6624;
  double t6628;
  double t6629;
  double t6630;
  double t6632;
  double t6633;
  double t6634;
  double t6638;
  double t6639;
  double t6640;
  double t6642;
  double t6643;
  double t6644;
  double t6586;
  double t6587;
  double t6588;
  double t6589;
  double t6592;
  double t6593;
  double t6594;
  double t6595;
  double t6601;
  double t6602;
  double t6603;
  double t6604;
  double t6605;
  double t6611;
  double t6615;
  double t6621;
  double t6625;
  double t6631;
  double t6635;
  double t6641;
  double t6645;
  double t6646;
  double t6647;
  double t6648;
  double t6650;
  double t6651;
  double t6652;
  double t6653;
  double t6654;
  double t6655;
  double t6656;
  double t6657;
  double t6658;
  double t6659;
  double t6660;
  double t6661;
  double t6662;
  double t6663;
  double t6693;
  double t6694;
  double t6710;
  double t6711;
  double t6720;
  double t6721;
  double t6730;
  double t6731;
  double t6690;
  double t6691;
  double t6700;
  double t6701;
  double t6702;
  double t6703;
  double t6704;
  double t6695;
  double t6696;
  double t6697;
  double t6706;
  double t6707;
  double t6708;
  double t6712;
  double t6713;
  double t6714;
  double t6716;
  double t6717;
  double t6718;
  double t6722;
  double t6723;
  double t6724;
  double t6726;
  double t6727;
  double t6728;
  double t6732;
  double t6733;
  double t6734;
  double t6736;
  double t6737;
  double t6738;
  double t6748;
  double t6749;
  double t6750;
  double t6753;
  double t6754;
  double t6755;
  double t6671;
  double t6672;
  double t6673;
  double t6674;
  double t6675;
  double t6676;
  double t6677;
  double t6678;
  double t6679;
  double t6680;
  double t6681;
  double t6682;
  double t6683;
  double t6684;
  double t6685;
  double t6686;
  double t6649;
  double t6664;
  double t6665;
  double t6692;
  double t6698;
  double t6699;
  double t6705;
  double t6709;
  double t6715;
  double t6719;
  double t6725;
  double t6729;
  double t6735;
  double t6739;
  double t6740;
  double t6741;
  double t6742;
  double t6744;
  double t6745;
  double t6746;
  double t6747;
  double t6751;
  double t6752;
  double t6756;
  double t6757;
  double t6758;
  double t6759;
  double t6760;
  double t6761;
  double t6762;
  double t6763;
  double t6764;
  double t6765;
  double t6766;
  double t6767;
  double t6769;
  double t6770;
  double t6771;
  double t6772;
  double t6773;
  double t6774;
  double t6775;
  double t6776;
  double t6777;
  double t6778;
  double t6779;
  double t6780;
  double t6781;
  double t6782;
  double t6783;
  double t6784;
  double t6787;
  double t6788;
  double t6789;
  double t6667;
  double t6668;
  double t6669;
  t1353 = Cos(var1[8]);
  t1409 = Cos(var1[10]);
  t1758 = Sin(var1[9]);
  t1408 = Cos(var1[9]);
  t1791 = Sin(var1[10]);
  t1264 = Cos(var1[11]);
  t2932 = -1.*t1353*t1409*t1758;
  t3293 = -1.*t1353*t1408*t1791;
  t3526 = t2932 + t3293;
  t1488 = t1353*t1408*t1409;
  t2057 = -1.*t1353*t1758*t1791;
  t2178 = t1488 + t2057;
  t4065 = Sin(var1[11]);
  t980 = Cos(var1[12]);
  t6143 = t1264*t3526;
  t6150 = -1.*t2178*t4065;
  t6154 = t6143 + t6150;
  t2799 = t1264*t2178;
  t5970 = t3526*t4065;
  t6032 = t2799 + t5970;
  t6176 = Sin(var1[12]);
  t921 = Cos(var1[13]);
  t6201 = t980*t6154;
  t6213 = -1.*t6032*t6176;
  t6216 = t6201 + t6213;
  t6116 = t980*t6032;
  t6180 = t6154*t6176;
  t6185 = t6116 + t6180;
  t6220 = Sin(var1[13]);
  t6263 = Cos(var1[7]);
  t6259 = Sin(var1[7]);
  t6260 = Sin(var1[8]);
  t6284 = t6263*t1408;
  t6288 = -1.*t6259*t6260*t1758;
  t6293 = t6284 + t6288;
  t6262 = t1408*t6259*t6260;
  t6264 = t6263*t1758;
  t6266 = t6262 + t6264;
  t6301 = t1409*t6293;
  t6303 = -1.*t6266*t1791;
  t6306 = t6301 + t6303;
  t6271 = t1409*t6266;
  t6295 = t6293*t1791;
  t6297 = t6271 + t6295;
  t6311 = t1264*t6306;
  t6312 = -1.*t6297*t4065;
  t6313 = t6311 + t6312;
  t6298 = t1264*t6297;
  t6307 = t6306*t4065;
  t6309 = t6298 + t6307;
  t6317 = t980*t6313;
  t6318 = -1.*t6309*t6176;
  t6319 = t6317 + t6318;
  t6310 = t980*t6309;
  t6314 = t6313*t6176;
  t6315 = t6310 + t6314;
  t6194 = t921*t6185;
  t6232 = t6216*t6220;
  t6234 = t6194 + t6232;
  t6242 = t921*t6216;
  t6243 = -1.*t6185*t6220;
  t6248 = t6242 + t6243;
  t6316 = t921*t6315;
  t6320 = t6319*t6220;
  t6321 = t6316 + t6320;
  t6323 = t921*t6319;
  t6326 = -1.*t6315*t6220;
  t6331 = t6323 + t6326;
  t6345 = 0.642788*t6321;
  t6348 = 0.766044*t6331;
  t6349 = t6345 + t6348;
  t6341 = -0.766044*t6234;
  t6343 = 0.642788*t6248;
  t6344 = t6341 + t6343;
  t6361 = -1.*t1408*t6259;
  t6362 = -1.*t6263*t6260*t1758;
  t6364 = t6361 + t6362;
  t6355 = t6263*t1408*t6260;
  t6356 = -1.*t6259*t1758;
  t6358 = t6355 + t6356;
  t6368 = t1409*t6364;
  t6369 = -1.*t6358*t1791;
  t6370 = t6368 + t6369;
  t6360 = t1409*t6358;
  t6365 = t6364*t1791;
  t6366 = t6360 + t6365;
  t6374 = t1264*t6370;
  t6375 = -1.*t6366*t4065;
  t6376 = t6374 + t6375;
  t6367 = t1264*t6366;
  t6371 = t6370*t4065;
  t6372 = t6367 + t6371;
  t6382 = t980*t6376;
  t6383 = -1.*t6372*t6176;
  t6386 = t6382 + t6383;
  t6373 = t980*t6372;
  t6377 = t6376*t6176;
  t6378 = t6373 + t6377;
  t6322 = -0.766044*t6321;
  t6335 = 0.642788*t6331;
  t6336 = t6322 + t6335;
  t6238 = 0.642788*t6234;
  t6255 = 0.766044*t6248;
  t6257 = t6238 + t6255;
  t6381 = t921*t6378;
  t6387 = t6386*t6220;
  t6388 = t6381 + t6387;
  t6391 = t921*t6386;
  t6393 = -1.*t6378*t6220;
  t6394 = t6391 + t6393;
  t6390 = -0.766044*t6388;
  t6396 = 0.642788*t6394;
  t6398 = t6390 + t6396;
  t6404 = 0.642788*t6388;
  t6405 = 0.766044*t6394;
  t6406 = t6404 + t6405;
  t601 = Cos(var1[1]);
  t6410 = t6257*t6398;
  t6411 = -1.*t6344*t6406;
  t6353 = t6263*t1353*t6344;
  t6399 = t6260*t6398;
  t6400 = t6353 + t6399;
  t6402 = -1.*t6349*t6400;
  t6403 = t6263*t1353*t6257;
  t6407 = t6260*t6406;
  t6408 = t6403 + t6407;
  t6409 = t6336*t6408;
  t6412 = t6410 + t6411;
  t6413 = -1.*t1353*t6259*t6412;
  t6414 = 0. + t6402 + t6409 + t6413;
  t6415 = 1/t6414;
  t485 = Cos(var1[0]);
  t6418 = Sin(var1[0]);
  t6423 = Sin(var1[1]);
  t6420 = t6406*t6336;
  t6421 = -1.*t6398*t6349;
  t6422 = 0. + t6420 + t6421;
  t6456 = Cos(var1[3]);
  t6453 = Cos(var1[2]);
  t6454 = Sin(var1[3]);
  t6457 = Sin(var1[2]);
  t6461 = Cos(var1[4]);
  t6455 = -1.*t601*t6453*t6454;
  t6458 = -1.*t6456*t601*t6457;
  t6459 = t6455 + t6458;
  t6452 = Sin(var1[4]);
  t6462 = t6456*t601*t6453;
  t6463 = -1.*t601*t6454*t6457;
  t6464 = t6462 + t6463;
  t6468 = Cos(var1[5]);
  t6460 = t6452*t6459;
  t6465 = t6461*t6464;
  t6466 = t6460 + t6465;
  t6451 = Sin(var1[5]);
  t6469 = t6461*t6459;
  t6470 = -1.*t6452*t6464;
  t6471 = t6469 + t6470;
  t6475 = Cos(var1[6]);
  t6467 = -1.*t6451*t6466;
  t6472 = t6468*t6471;
  t6473 = t6467 + t6472;
  t6450 = Sin(var1[6]);
  t6476 = t6468*t6466;
  t6477 = t6451*t6471;
  t6478 = t6476 + t6477;
  t6339 = -1.*t6257*t6336;
  t6350 = t6344*t6349;
  t6352 = 0. + t6339 + t6350;
  t6488 = t485*t6453*t6423;
  t6489 = -1.*t6418*t6457;
  t6490 = t6488 + t6489;
  t6492 = -1.*t6453*t6418;
  t6493 = -1.*t485*t6423*t6457;
  t6494 = t6492 + t6493;
  t6491 = -1.*t6454*t6490;
  t6495 = t6456*t6494;
  t6496 = t6491 + t6495;
  t6498 = t6456*t6490;
  t6499 = t6454*t6494;
  t6500 = t6498 + t6499;
  t6497 = t6452*t6496;
  t6501 = t6461*t6500;
  t6502 = t6497 + t6501;
  t6504 = t6461*t6496;
  t6505 = -1.*t6452*t6500;
  t6506 = t6504 + t6505;
  t6503 = -1.*t6451*t6502;
  t6507 = t6468*t6506;
  t6508 = t6503 + t6507;
  t6510 = t6468*t6502;
  t6511 = t6451*t6506;
  t6512 = t6510 + t6511;
  t6417 = 0. + t6410 + t6411;
  t6522 = t6453*t6418*t6423;
  t6523 = t485*t6457;
  t6524 = t6522 + t6523;
  t6526 = t485*t6453;
  t6527 = -1.*t6418*t6423*t6457;
  t6528 = t6526 + t6527;
  t6525 = -1.*t6454*t6524;
  t6529 = t6456*t6528;
  t6530 = t6525 + t6529;
  t6532 = t6456*t6524;
  t6533 = t6454*t6528;
  t6534 = t6532 + t6533;
  t6531 = t6452*t6530;
  t6535 = t6461*t6534;
  t6536 = t6531 + t6535;
  t6538 = t6461*t6530;
  t6539 = -1.*t6452*t6534;
  t6540 = t6538 + t6539;
  t6537 = -1.*t6451*t6536;
  t6541 = t6468*t6540;
  t6542 = t6537 + t6541;
  t6544 = t6468*t6536;
  t6545 = t6451*t6540;
  t6546 = t6544 + t6545;
  t6434 = -1.*t1353*t6259*t6398;
  t6435 = t6263*t1353*t6336;
  t6436 = 0. + t6434 + t6435;
  t6474 = t6450*t6473;
  t6479 = t6475*t6478;
  t6480 = t6474 + t6479;
  t6481 = 0.642788*t6480;
  t6482 = t6475*t6473;
  t6483 = -1.*t6450*t6478;
  t6484 = t6482 + t6483;
  t6485 = 0.766044*t6484;
  t6486 = t6481 + t6485;
  t6426 = t1353*t6259*t6344;
  t6427 = t6260*t6336;
  t6428 = 0. + t6426 + t6427;
  t6509 = t6450*t6508;
  t6513 = t6475*t6512;
  t6514 = t6509 + t6513;
  t6515 = 0.642788*t6514;
  t6516 = t6475*t6508;
  t6517 = -1.*t6450*t6512;
  t6518 = t6516 + t6517;
  t6519 = 0.766044*t6518;
  t6520 = t6515 + t6519;
  t6430 = -1.*t6263*t1353*t6344;
  t6431 = -1.*t6260*t6398;
  t6432 = 0. + t6430 + t6431;
  t6543 = t6450*t6542;
  t6547 = t6475*t6546;
  t6548 = t6543 + t6547;
  t6549 = 0.642788*t6548;
  t6550 = t6475*t6542;
  t6551 = -1.*t6450*t6546;
  t6552 = t6550 + t6551;
  t6553 = 0.766044*t6552;
  t6554 = t6549 + t6553;
  t6445 = t1353*t6259*t6406;
  t6446 = -1.*t6263*t1353*t6349;
  t6447 = 0. + t6445 + t6446;
  t6439 = -1.*t1353*t6259*t6257;
  t6440 = -1.*t6260*t6349;
  t6441 = 0. + t6439 + t6440;
  t6443 = 0. + t6403 + t6407;
  t6565 = -0.766044*t6480;
  t6566 = 0.642788*t6484;
  t6567 = t6565 + t6566;
  t6569 = -0.766044*t6514;
  t6570 = 0.642788*t6518;
  t6571 = t6569 + t6570;
  t6573 = -0.766044*t6548;
  t6574 = 0.642788*t6552;
  t6575 = t6573 + t6574;
  t6596 = -1.*t1408;
  t6597 = 1. + t6596;
  t6606 = -1.*t1409;
  t6607 = 1. + t6606;
  t6616 = -1.*t1264;
  t6617 = 1. + t6616;
  t6626 = -1.*t980;
  t6627 = 1. + t6626;
  t6636 = -1.*t921;
  t6637 = 1. + t6636;
  t6590 = -1.*t1353;
  t6591 = 1. + t6590;
  t6598 = -0.049*t6597;
  t6599 = -0.09*t1758;
  t6600 = 0. + t6598 + t6599;
  t6608 = -0.049*t6607;
  t6609 = -0.21*t1791;
  t6610 = 0. + t6608 + t6609;
  t6612 = -0.21*t6607;
  t6613 = 0.049*t1791;
  t6614 = 0. + t6612 + t6613;
  t6618 = -0.0016*t6617;
  t6619 = -0.2707*t4065;
  t6620 = 0. + t6618 + t6619;
  t6622 = -0.2707*t6617;
  t6623 = 0.0016*t4065;
  t6624 = 0. + t6622 + t6623;
  t6628 = 0.0184*t6627;
  t6629 = -0.7055*t6176;
  t6630 = 0. + t6628 + t6629;
  t6632 = -0.7055*t6627;
  t6633 = -0.0184*t6176;
  t6634 = 0. + t6632 + t6633;
  t6638 = -0.0216*t6637;
  t6639 = -1.1135*t6220;
  t6640 = 0. + t6638 + t6639;
  t6642 = -1.1135*t6637;
  t6643 = 0.0216*t6220;
  t6644 = 0. + t6642 + t6643;
  t6586 = -1.*t6263;
  t6587 = 1. + t6586;
  t6588 = -0.135*t6587;
  t6589 = -0.1305*t6263*t1353;
  t6592 = -0.135*t6591;
  t6593 = 0.049*t6260;
  t6594 = 0. + t6592 + t6593;
  t6595 = t6263*t6594;
  t6601 = t6263*t6260*t6600;
  t6602 = -0.09*t6597;
  t6603 = 0.049*t1758;
  t6604 = 0. + t6602 + t6603;
  t6605 = -1.*t6259*t6604;
  t6611 = t6358*t6610;
  t6615 = t6364*t6614;
  t6621 = t6366*t6620;
  t6625 = t6370*t6624;
  t6631 = t6372*t6630;
  t6635 = t6376*t6634;
  t6641 = t6378*t6640;
  t6645 = t6386*t6644;
  t6646 = 0.0306*t6388;
  t6647 = -1.1312*t6394;
  t6648 = 0. + t6588 + t6589 + t6595 + t6601 + t6605 + t6611 + t6615 + t6621 + t6625 + t6631 + t6635 + t6641 + t6645 + t6646 + t6647;
  t6650 = -0.049*t6591;
  t6651 = -0.004500000000000004*t6260;
  t6652 = t1353*t6600;
  t6653 = t1353*t1408*t6610;
  t6654 = -1.*t1353*t1758*t6614;
  t6655 = t2178*t6620;
  t6656 = t3526*t6624;
  t6657 = t6032*t6630;
  t6658 = t6154*t6634;
  t6659 = t6185*t6640;
  t6660 = t6216*t6644;
  t6661 = 0.0306*t6234;
  t6662 = -1.1312*t6248;
  t6663 = 0. + t6650 + t6651 + t6652 + t6653 + t6654 + t6655 + t6656 + t6657 + t6658 + t6659 + t6660 + t6661 + t6662;
  t6693 = -1.*t6456;
  t6694 = 1. + t6693;
  t6710 = -1.*t6461;
  t6711 = 1. + t6710;
  t6720 = -1.*t6468;
  t6721 = 1. + t6720;
  t6730 = -1.*t6475;
  t6731 = 1. + t6730;
  t6690 = -1.*t601;
  t6691 = 1. + t6690;
  t6700 = -1.*t6453;
  t6701 = 1. + t6700;
  t6702 = -0.049*t6701;
  t6703 = -0.09*t6457;
  t6704 = 0. + t6702 + t6703;
  t6695 = -0.049*t6694;
  t6696 = -0.21*t6454;
  t6697 = 0. + t6695 + t6696;
  t6706 = -0.21*t6694;
  t6707 = 0.049*t6454;
  t6708 = 0. + t6706 + t6707;
  t6712 = -0.2707*t6711;
  t6713 = 0.0016*t6452;
  t6714 = 0. + t6712 + t6713;
  t6716 = -0.0016*t6711;
  t6717 = -0.2707*t6452;
  t6718 = 0. + t6716 + t6717;
  t6722 = 0.0184*t6721;
  t6723 = -0.7055*t6451;
  t6724 = 0. + t6722 + t6723;
  t6726 = -0.7055*t6721;
  t6727 = -0.0184*t6451;
  t6728 = 0. + t6726 + t6727;
  t6732 = -1.1135*t6731;
  t6733 = 0.0216*t6450;
  t6734 = 0. + t6732 + t6733;
  t6736 = -0.0216*t6731;
  t6737 = -1.1135*t6450;
  t6738 = 0. + t6736 + t6737;
  t6748 = 0.135*t6691;
  t6749 = 0.049*t6423;
  t6750 = 0. + t6748 + t6749;
  t6753 = -0.09*t6701;
  t6754 = 0.049*t6457;
  t6755 = 0. + t6753 + t6754;
  t6671 = 0.135*t6259;
  t6672 = -0.1305*t1353*t6259;
  t6673 = t6259*t6594;
  t6674 = t6259*t6260*t6600;
  t6675 = t6263*t6604;
  t6676 = t6266*t6610;
  t6677 = t6293*t6614;
  t6678 = t6297*t6620;
  t6679 = t6306*t6624;
  t6680 = t6309*t6630;
  t6681 = t6313*t6634;
  t6682 = t6315*t6640;
  t6683 = t6319*t6644;
  t6684 = 0.0306*t6321;
  t6685 = -1.1312*t6331;
  t6686 = 0. + t6671 + t6672 + t6673 + t6674 + t6675 + t6676 + t6677 + t6678 + t6679 + t6680 + t6681 + t6682 + t6683 + t6684 + t6685;
  t6649 = t6344*t6648;
  t6664 = -1.*t6663*t6398;
  t6665 = t6649 + t6664;
  t6692 = -0.049*t6691;
  t6698 = t601*t6453*t6697;
  t6699 = 0.004500000000000004*t6423;
  t6705 = t601*t6704;
  t6709 = -1.*t601*t6708*t6457;
  t6715 = t6714*t6459;
  t6719 = t6718*t6464;
  t6725 = t6724*t6466;
  t6729 = t6728*t6471;
  t6735 = t6734*t6473;
  t6739 = t6738*t6478;
  t6740 = 0.0306*t6480;
  t6741 = -1.1312*t6484;
  t6742 = 0. + t6692 + t6698 + t6699 + t6705 + t6709 + t6715 + t6719 + t6725 + t6729 + t6735 + t6739 + t6740 + t6741;
  t6744 = -1.*t485;
  t6745 = 1. + t6744;
  t6746 = 0.135*t6745;
  t6747 = 0.1305*t485*t601;
  t6751 = t485*t6750;
  t6752 = t485*t6423*t6704;
  t6756 = -1.*t6418*t6755;
  t6757 = t6697*t6490;
  t6758 = t6708*t6494;
  t6759 = t6714*t6496;
  t6760 = t6718*t6500;
  t6761 = t6724*t6502;
  t6762 = t6728*t6506;
  t6763 = t6734*t6508;
  t6764 = t6738*t6512;
  t6765 = 0.0306*t6514;
  t6766 = -1.1312*t6518;
  t6767 = 0. + t6746 + t6747 + t6751 + t6752 + t6756 + t6757 + t6758 + t6759 + t6760 + t6761 + t6762 + t6763 + t6764 + t6765 + t6766;
  t6769 = -0.135*t6418;
  t6770 = 0.1305*t601*t6418;
  t6771 = t6418*t6750;
  t6772 = t6418*t6423*t6704;
  t6773 = t485*t6755;
  t6774 = t6697*t6524;
  t6775 = t6708*t6528;
  t6776 = t6714*t6530;
  t6777 = t6718*t6534;
  t6778 = t6724*t6536;
  t6779 = t6728*t6540;
  t6780 = t6734*t6542;
  t6781 = t6738*t6546;
  t6782 = 0.0306*t6548;
  t6783 = -1.1312*t6552;
  t6784 = 0. + t6769 + t6770 + t6771 + t6772 + t6773 + t6774 + t6775 + t6776 + t6777 + t6778 + t6779 + t6780 + t6781 + t6782 + t6783;
  t6787 = t6263*t1353*t6663;
  t6788 = t6260*t6648;
  t6789 = t6787 + t6788;
  t6667 = t6257*t6648;
  t6668 = -1.*t6663*t6406;
  t6669 = t6667 + t6668;
  p_output1[0]=0. - 1.*t485*t601*t6352*t6415 - 1.*t601*t6415*t6417*t6418 + t6415*t6422*t6423;
  p_output1[1]=0. - 1.*t485*t601*t6415*t6428 - 1.*t601*t6415*t6418*t6432 + t6415*t6423*t6436;
  p_output1[2]=0. - 1.*t485*t601*t6415*t6441 - 1.*t601*t6415*t6418*t6443 + t6415*t6423*t6447;
  p_output1[3]=0.;
  p_output1[4]=0. + t6415*t6422*t6486 + t6352*t6415*t6520 + t6415*t6417*t6554;
  p_output1[5]=0. + t6415*t6436*t6486 + t6415*t6428*t6520 + t6415*t6432*t6554;
  p_output1[6]=0. + t6415*t6447*t6486 + t6415*t6441*t6520 + t6415*t6443*t6554;
  p_output1[7]=0.;
  p_output1[8]=0. + t6415*t6422*t6567 + t6352*t6415*t6571 + t6415*t6417*t6575;
  p_output1[9]=0. + t6415*t6436*t6567 + t6415*t6428*t6571 + t6415*t6432*t6575;
  p_output1[10]=0. + t6415*t6447*t6567 + t6415*t6441*t6571 + t6415*t6443*t6575;
  p_output1[11]=0.;
  p_output1[12]=t6415*(-1.*t6349*t6665 + t6336*t6669 - 1.*t6412*t6686) + t6415*t6422*t6742 + t6352*t6415*t6767 + t6415*t6417*t6784;
  p_output1[13]=t6415*t6436*t6742 + t6415*t6428*t6767 + t6415*t6432*t6784 + t6415*(-1.*t1353*t6259*t6665 + t6400*t6686 - 1.*t6336*t6789);
  p_output1[14]=t6415*t6447*t6742 + t6415*t6441*t6767 + t6415*t6443*t6784 + t6415*(t1353*t6259*t6669 - 1.*t6408*t6686 + t6349*t6789);
  p_output1[15]=0. + (t6402 + t6409 + t6413)*t6415;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 14 && ncols == 1) && 
      !(mrows == 1 && ncols == 14))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 4, (mwSize) 4, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "H_RightToeBottom_to_LeftToeBottom_mex.hh"

namespace SymExpression
{

void H_RightToeBottom_to_LeftToeBottom_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
