/*
 * Automatically Generated from Mathematica.
 * Fri 16 Feb 2018 12:17:57 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t138;
  double t314;
  double t182;
  double t219;
  double t316;
  double t461;
  double t228;
  double t335;
  double t363;
  double t135;
  double t519;
  double t540;
  double t549;
  double t619;
  double t400;
  double t568;
  double t590;
  double t52;
  double t636;
  double t650;
  double t674;
  double t708;
  double t594;
  double t676;
  double t682;
  double t32;
  double t742;
  double t755;
  double t759;
  double t922;
  double t858;
  double t885;
  double t892;
  double t938;
  double t956;
  double t1106;
  double t1164;
  double t1172;
  double t1012;
  double t1207;
  double t1210;
  double t1234;
  double t1324;
  double t1342;
  double t1227;
  double t1355;
  double t1428;
  double t1453;
  double t1467;
  double t1517;
  double t1450;
  double t1525;
  double t1534;
  double t1552;
  double t1559;
  double t1602;
  double t684;
  double t761;
  double t764;
  double t802;
  double t803;
  double t807;
  double t1549;
  double t1659;
  double t1708;
  double t1731;
  double t1758;
  double t1781;
  double t1999;
  double t2006;
  double t2029;
  double t2071;
  double t2144;
  double t2149;
  double t2038;
  double t2150;
  double t2197;
  double t2273;
  double t2274;
  double t2286;
  double t2206;
  double t2290;
  double t2307;
  double t2317;
  double t2352;
  double t2360;
  double t2308;
  double t2374;
  double t2381;
  double t2386;
  double t2437;
  double t2482;
  double t1830;
  double t1831;
  double t1844;
  double t1713;
  double t1788;
  double t1809;
  double t2385;
  double t2499;
  double t2505;
  double t2561;
  double t2588;
  double t2591;
  double t774;
  double t825;
  double t838;
  double t1845;
  double t1888;
  double t1939;
  double t1811;
  double t1989;
  double t6;
  double t2685;
  double t2697;
  double t2698;
  double t2532;
  double t2603;
  double t2606;
  double t2633;
  double t2643;
  double t2648;
  double t2677;
  double t2700;
  double t2752;
  double t2753;
  double t2768;
  double t2783;
  double t2790;
  double t2794;
  double t2829;
  double t23;
  double t2951;
  double t2915;
  double t3512;
  double t3534;
  double t3510;
  double t3568;
  double t3579;
  double t3583;
  double t3516;
  double t3543;
  double t3544;
  double t3601;
  double t3458;
  double t3697;
  double t3710;
  double t3729;
  double t3557;
  double t3622;
  double t3680;
  double t3756;
  double t3448;
  double t3792;
  double t3804;
  double t3814;
  double t3686;
  double t3769;
  double t3778;
  double t3819;
  double t3439;
  double t3860;
  double t3871;
  double t3876;
  double t3789;
  double t3825;
  double t3842;
  double t3890;
  double t1994;
  double t4155;
  double t4159;
  double t4164;
  double t4016;
  double t4088;
  double t4091;
  double t4293;
  double t4316;
  double t4322;
  double t4131;
  double t4176;
  double t4193;
  double t4384;
  double t4408;
  double t4421;
  double t4263;
  double t4328;
  double t4359;
  double t4440;
  double t4442;
  double t4475;
  double t4378;
  double t4422;
  double t4423;
  double t2935;
  double t2941;
  double t2943;
  double t4626;
  double t4628;
  double t4645;
  double t4605;
  double t4609;
  double t4611;
  double t4703;
  double t4706;
  double t4747;
  double t4620;
  double t4680;
  double t4684;
  double t4813;
  double t4822;
  double t4844;
  double t4690;
  double t4755;
  double t4757;
  double t2957;
  double t2994;
  double t2999;
  double t3844;
  double t3895;
  double t3917;
  double t3938;
  double t3952;
  double t3953;
  double t3954;
  double t3970;
  double t3990;
  double t3080;
  double t3104;
  double t3119;
  double t4784;
  double t4847;
  double t4865;
  double t4890;
  double t4901;
  double t4913;
  double t4940;
  double t4956;
  double t4975;
  double t3148;
  double t3168;
  double t3196;
  double t4425;
  double t4486;
  double t4494;
  double t4503;
  double t4531;
  double t4543;
  double t4548;
  double t4597;
  double t4603;
  double t3210;
  double t3213;
  double t3223;
  double t3244;
  double t3270;
  double t3280;
  double t3292;
  double t3361;
  double t3380;
  double t3397;
  double t5073;
  double t5085;
  double t5086;
  double t5136;
  double t5149;
  double t5152;
  double t5120;
  double t5123;
  double t5124;
  double t5325;
  double t5328;
  double t5455;
  double t5460;
  double t5529;
  double t5540;
  double t5623;
  double t5624;
  double t5657;
  double t5663;
  double t5283;
  double t5296;
  double t5300;
  double t5305;
  double t5306;
  double t5331;
  double t5366;
  double t5372;
  double t5387;
  double t5393;
  double t5403;
  double t5468;
  double t5477;
  double t5481;
  double t5487;
  double t5501;
  double t5516;
  double t5548;
  double t5559;
  double t5567;
  double t5587;
  double t5598;
  double t5604;
  double t5625;
  double t5629;
  double t5630;
  double t5636;
  double t5642;
  double t5647;
  double t5670;
  double t5673;
  double t5687;
  double t5694;
  double t5698;
  double t5699;
  double t6264;
  double t6266;
  double t6324;
  double t6326;
  double t6394;
  double t6408;
  double t6496;
  double t6497;
  double t6644;
  double t6648;
  double t6206;
  double t6207;
  double t6333;
  double t6335;
  double t6353;
  double t6269;
  double t6275;
  double t6281;
  double t6374;
  double t6377;
  double t6379;
  double t6430;
  double t6433;
  double t6436;
  double t6444;
  double t6447;
  double t6463;
  double t6498;
  double t6550;
  double t6559;
  double t6575;
  double t6590;
  double t6609;
  double t6663;
  double t6671;
  double t6675;
  double t6684;
  double t6687;
  double t6689;
  double t6177;
  double t6181;
  double t6196;
  double t6201;
  double t6217;
  double t6218;
  double t6231;
  double t6254;
  double t6293;
  double t6299;
  double t6317;
  double t6319;
  double t6320;
  double t6370;
  double t6391;
  double t6440;
  double t6465;
  double t6562;
  double t6637;
  double t6678;
  double t6694;
  double t6695;
  double t6705;
  double t6706;
  double t6729;
  double t6730;
  double t6733;
  double t6748;
  double t6749;
  double t6750;
  double t6774;
  double t6778;
  double t6780;
  double t6781;
  double t6783;
  double t6786;
  double t6788;
  double t6790;
  double t5272;
  double t5279;
  double t5324;
  double t5386;
  double t5447;
  double t5485;
  double t5526;
  double t5568;
  double t5608;
  double t5634;
  double t5652;
  double t5693;
  double t5733;
  double t5736;
  double t5742;
  double t5746;
  double t5977;
  double t6011;
  double t6013;
  double t6030;
  double t6036;
  double t6038;
  double t6044;
  double t6053;
  double t6060;
  double t6064;
  double t6066;
  double t6067;
  double t6088;
  double t6099;
  double t5786;
  double t5799;
  double t5806;
  double t5848;
  double t5854;
  double t5859;
  double t5864;
  double t5878;
  double t5896;
  double t5910;
  double t5930;
  double t5931;
  double t5933;
  double t5939;
  double t5942;
  double t5952;
  double t5957;
  double t5962;
  double t6832;
  double t6836;
  double t6844;
  double t6850;
  double t6859;
  double t6871;
  double t6875;
  double t6886;
  double t6917;
  double t6928;
  double t6932;
  double t6933;
  double t6934;
  double t6936;
  double t6941;
  double t6949;
  double t6714;
  double t6795;
  double t6799;
  double t6994;
  double t7006;
  double t7017;
  double t6813;
  double t6817;
  double t6819;
  t138 = Cos(var1[1]);
  t314 = Cos(var1[3]);
  t182 = Cos(var1[2]);
  t219 = Sin(var1[3]);
  t316 = Sin(var1[2]);
  t461 = Cos(var1[4]);
  t228 = -1.*t138*t182*t219;
  t335 = -1.*t314*t138*t316;
  t363 = t228 + t335;
  t135 = Sin(var1[4]);
  t519 = t314*t138*t182;
  t540 = -1.*t138*t219*t316;
  t549 = t519 + t540;
  t619 = Cos(var1[5]);
  t400 = t135*t363;
  t568 = t461*t549;
  t590 = t400 + t568;
  t52 = Sin(var1[5]);
  t636 = t461*t363;
  t650 = -1.*t135*t549;
  t674 = t636 + t650;
  t708 = Cos(var1[6]);
  t594 = -1.*t52*t590;
  t676 = t619*t674;
  t682 = t594 + t676;
  t32 = Sin(var1[6]);
  t742 = t619*t590;
  t755 = t52*t674;
  t759 = t742 + t755;
  t922 = Sin(var1[0]);
  t858 = Cos(var1[0]);
  t885 = Sin(var1[1]);
  t892 = t858*t182*t885;
  t938 = -1.*t922*t316;
  t956 = t892 + t938;
  t1106 = -1.*t182*t922;
  t1164 = -1.*t858*t885*t316;
  t1172 = t1106 + t1164;
  t1012 = -1.*t219*t956;
  t1207 = t314*t1172;
  t1210 = t1012 + t1207;
  t1234 = t314*t956;
  t1324 = t219*t1172;
  t1342 = t1234 + t1324;
  t1227 = t135*t1210;
  t1355 = t461*t1342;
  t1428 = t1227 + t1355;
  t1453 = t461*t1210;
  t1467 = -1.*t135*t1342;
  t1517 = t1453 + t1467;
  t1450 = -1.*t52*t1428;
  t1525 = t619*t1517;
  t1534 = t1450 + t1525;
  t1552 = t619*t1428;
  t1559 = t52*t1517;
  t1602 = t1552 + t1559;
  t684 = t32*t682;
  t761 = t708*t759;
  t764 = t684 + t761;
  t802 = t708*t682;
  t803 = -1.*t32*t759;
  t807 = t802 + t803;
  t1549 = t32*t1534;
  t1659 = t708*t1602;
  t1708 = t1549 + t1659;
  t1731 = t708*t1534;
  t1758 = -1.*t32*t1602;
  t1781 = t1731 + t1758;
  t1999 = t182*t922*t885;
  t2006 = t858*t316;
  t2029 = t1999 + t2006;
  t2071 = t858*t182;
  t2144 = -1.*t922*t885*t316;
  t2149 = t2071 + t2144;
  t2038 = -1.*t219*t2029;
  t2150 = t314*t2149;
  t2197 = t2038 + t2150;
  t2273 = t314*t2029;
  t2274 = t219*t2149;
  t2286 = t2273 + t2274;
  t2206 = t135*t2197;
  t2290 = t461*t2286;
  t2307 = t2206 + t2290;
  t2317 = t461*t2197;
  t2352 = -1.*t135*t2286;
  t2360 = t2317 + t2352;
  t2308 = -1.*t52*t2307;
  t2374 = t619*t2360;
  t2381 = t2308 + t2374;
  t2386 = t619*t2307;
  t2437 = t52*t2360;
  t2482 = t2386 + t2437;
  t1830 = -0.766044*t764;
  t1831 = 0.642788*t807;
  t1844 = t1830 + t1831;
  t1713 = -0.766044*t1708;
  t1788 = 0.642788*t1781;
  t1809 = t1713 + t1788;
  t2385 = t32*t2381;
  t2499 = t708*t2482;
  t2505 = t2385 + t2499;
  t2561 = t708*t2381;
  t2588 = -1.*t32*t2482;
  t2591 = t2561 + t2588;
  t774 = 0.642788*t764;
  t825 = 0.766044*t807;
  t838 = t774 + t825;
  t1845 = 0.642788*t1708;
  t1888 = 0.766044*t1781;
  t1939 = t1845 + t1888;
  t1811 = t838*t1809;
  t1989 = -1.*t1844*t1939;
  t6 = Cos(var1[8]);
  t2685 = -0.766044*t2505;
  t2697 = 0.642788*t2591;
  t2698 = t2685 + t2697;
  t2532 = 0.642788*t2505;
  t2603 = 0.766044*t2591;
  t2606 = t2532 + t2603;
  t2633 = t858*t138*t1844;
  t2643 = t885*t1809;
  t2648 = t2633 + t2643;
  t2677 = -1.*t2606*t2648;
  t2700 = t858*t138*t838;
  t2752 = t885*t1939;
  t2753 = t2700 + t2752;
  t2768 = t2698*t2753;
  t2783 = t1811 + t1989;
  t2790 = -1.*t138*t922*t2783;
  t2794 = 0. + t2677 + t2768 + t2790;
  t2829 = 1/t2794;
  t23 = Sin(var1[7]);
  t2951 = Sin(var1[8]);
  t2915 = Cos(var1[7]);
  t3512 = Cos(var1[9]);
  t3534 = Sin(var1[9]);
  t3510 = Cos(var1[10]);
  t3568 = t2915*t3512;
  t3579 = -1.*t23*t2951*t3534;
  t3583 = t3568 + t3579;
  t3516 = t3512*t23*t2951;
  t3543 = t2915*t3534;
  t3544 = t3516 + t3543;
  t3601 = Sin(var1[10]);
  t3458 = Cos(var1[11]);
  t3697 = t3510*t3583;
  t3710 = -1.*t3544*t3601;
  t3729 = t3697 + t3710;
  t3557 = t3510*t3544;
  t3622 = t3583*t3601;
  t3680 = t3557 + t3622;
  t3756 = Sin(var1[11]);
  t3448 = Cos(var1[12]);
  t3792 = t3458*t3729;
  t3804 = -1.*t3680*t3756;
  t3814 = t3792 + t3804;
  t3686 = t3458*t3680;
  t3769 = t3729*t3756;
  t3778 = t3686 + t3769;
  t3819 = Sin(var1[12]);
  t3439 = Cos(var1[13]);
  t3860 = t3448*t3814;
  t3871 = -1.*t3778*t3819;
  t3876 = t3860 + t3871;
  t3789 = t3448*t3778;
  t3825 = t3814*t3819;
  t3842 = t3789 + t3825;
  t3890 = Sin(var1[13]);
  t1994 = 0. + t1811 + t1989;
  t4155 = -1.*t3512*t23;
  t4159 = -1.*t2915*t2951*t3534;
  t4164 = t4155 + t4159;
  t4016 = t2915*t3512*t2951;
  t4088 = -1.*t23*t3534;
  t4091 = t4016 + t4088;
  t4293 = t3510*t4164;
  t4316 = -1.*t4091*t3601;
  t4322 = t4293 + t4316;
  t4131 = t3510*t4091;
  t4176 = t4164*t3601;
  t4193 = t4131 + t4176;
  t4384 = t3458*t4322;
  t4408 = -1.*t4193*t3756;
  t4421 = t4384 + t4408;
  t4263 = t3458*t4193;
  t4328 = t4322*t3756;
  t4359 = t4263 + t4328;
  t4440 = t3448*t4421;
  t4442 = -1.*t4359*t3819;
  t4475 = t4440 + t4442;
  t4378 = t3448*t4359;
  t4422 = t4421*t3819;
  t4423 = t4378 + t4422;
  t2935 = -1.*t838*t2698;
  t2941 = t1844*t2606;
  t2943 = 0. + t2935 + t2941;
  t4626 = -1.*t6*t3510*t3534;
  t4628 = -1.*t6*t3512*t3601;
  t4645 = t4626 + t4628;
  t4605 = t6*t3512*t3510;
  t4609 = -1.*t6*t3534*t3601;
  t4611 = t4605 + t4609;
  t4703 = t3458*t4645;
  t4706 = -1.*t4611*t3756;
  t4747 = t4703 + t4706;
  t4620 = t3458*t4611;
  t4680 = t4645*t3756;
  t4684 = t4620 + t4680;
  t4813 = t3448*t4747;
  t4822 = -1.*t4684*t3819;
  t4844 = t4813 + t4822;
  t4690 = t3448*t4684;
  t4755 = t4747*t3819;
  t4757 = t4690 + t4755;
  t2957 = t1939*t2698;
  t2994 = -1.*t1809*t2606;
  t2999 = 0. + t2957 + t2994;
  t3844 = t3439*t3842;
  t3895 = t3876*t3890;
  t3917 = t3844 + t3895;
  t3938 = 0.642788*t3917;
  t3952 = t3439*t3876;
  t3953 = -1.*t3842*t3890;
  t3954 = t3952 + t3953;
  t3970 = 0.766044*t3954;
  t3990 = t3938 + t3970;
  t3080 = -1.*t858*t138*t1844;
  t3104 = -1.*t885*t1809;
  t3119 = 0. + t3080 + t3104;
  t4784 = t3439*t4757;
  t4847 = t4844*t3890;
  t4865 = t4784 + t4847;
  t4890 = 0.642788*t4865;
  t4901 = t3439*t4844;
  t4913 = -1.*t4757*t3890;
  t4940 = t4901 + t4913;
  t4956 = 0.766044*t4940;
  t4975 = t4890 + t4956;
  t3148 = -1.*t138*t922*t1809;
  t3168 = t858*t138*t2698;
  t3196 = 0. + t3148 + t3168;
  t4425 = t3439*t4423;
  t4486 = t4475*t3890;
  t4494 = t4425 + t4486;
  t4503 = 0.642788*t4494;
  t4531 = t3439*t4475;
  t4543 = -1.*t4423*t3890;
  t4548 = t4531 + t4543;
  t4597 = 0.766044*t4548;
  t4603 = t4503 + t4597;
  t3210 = t138*t922*t1844;
  t3213 = t885*t2698;
  t3223 = 0. + t3210 + t3213;
  t3244 = 0. + t2700 + t2752;
  t3270 = t138*t922*t1939;
  t3280 = -1.*t858*t138*t2606;
  t3292 = 0. + t3270 + t3280;
  t3361 = -1.*t138*t922*t838;
  t3380 = -1.*t885*t2606;
  t3397 = 0. + t3361 + t3380;
  t5073 = -0.766044*t3917;
  t5085 = 0.642788*t3954;
  t5086 = t5073 + t5085;
  t5136 = -0.766044*t4865;
  t5149 = 0.642788*t4940;
  t5152 = t5136 + t5149;
  t5120 = -0.766044*t4494;
  t5123 = 0.642788*t4548;
  t5124 = t5120 + t5123;
  t5325 = -1.*t3512;
  t5328 = 1. + t5325;
  t5455 = -1.*t3510;
  t5460 = 1. + t5455;
  t5529 = -1.*t3458;
  t5540 = 1. + t5529;
  t5623 = -1.*t3448;
  t5624 = 1. + t5623;
  t5657 = -1.*t3439;
  t5663 = 1. + t5657;
  t5283 = -1.*t6;
  t5296 = 1. + t5283;
  t5300 = -0.135*t5296;
  t5305 = 0.049*t2951;
  t5306 = 0. + t5300 + t5305;
  t5331 = -0.049*t5328;
  t5366 = -0.09*t3534;
  t5372 = 0. + t5331 + t5366;
  t5387 = -0.09*t5328;
  t5393 = 0.049*t3534;
  t5403 = 0. + t5387 + t5393;
  t5468 = -0.049*t5460;
  t5477 = -0.21*t3601;
  t5481 = 0. + t5468 + t5477;
  t5487 = -0.21*t5460;
  t5501 = 0.049*t3601;
  t5516 = 0. + t5487 + t5501;
  t5548 = -0.0016*t5540;
  t5559 = -0.2707*t3756;
  t5567 = 0. + t5548 + t5559;
  t5587 = -0.2707*t5540;
  t5598 = 0.0016*t3756;
  t5604 = 0. + t5587 + t5598;
  t5625 = 0.0184*t5624;
  t5629 = -0.7055*t3819;
  t5630 = 0. + t5625 + t5629;
  t5636 = -0.7055*t5624;
  t5642 = -0.0184*t3819;
  t5647 = 0. + t5636 + t5642;
  t5670 = -0.0216*t5663;
  t5673 = -1.1135*t3890;
  t5687 = 0. + t5670 + t5673;
  t5694 = -1.1135*t5663;
  t5698 = 0.0216*t3890;
  t5699 = 0. + t5694 + t5698;
  t6264 = -1.*t182;
  t6266 = 1. + t6264;
  t6324 = -1.*t314;
  t6326 = 1. + t6324;
  t6394 = -1.*t461;
  t6408 = 1. + t6394;
  t6496 = -1.*t619;
  t6497 = 1. + t6496;
  t6644 = -1.*t708;
  t6648 = 1. + t6644;
  t6206 = -1.*t138;
  t6207 = 1. + t6206;
  t6333 = -0.049*t6326;
  t6335 = -0.21*t219;
  t6353 = 0. + t6333 + t6335;
  t6269 = -0.049*t6266;
  t6275 = -0.09*t316;
  t6281 = 0. + t6269 + t6275;
  t6374 = -0.21*t6326;
  t6377 = 0.049*t219;
  t6379 = 0. + t6374 + t6377;
  t6430 = -0.2707*t6408;
  t6433 = 0.0016*t135;
  t6436 = 0. + t6430 + t6433;
  t6444 = -0.0016*t6408;
  t6447 = -0.2707*t135;
  t6463 = 0. + t6444 + t6447;
  t6498 = 0.0184*t6497;
  t6550 = -0.7055*t52;
  t6559 = 0. + t6498 + t6550;
  t6575 = -0.7055*t6497;
  t6590 = -0.0184*t52;
  t6609 = 0. + t6575 + t6590;
  t6663 = -1.1135*t6648;
  t6671 = 0.0216*t32;
  t6675 = 0. + t6663 + t6671;
  t6684 = -0.0216*t6648;
  t6687 = -1.1135*t32;
  t6689 = 0. + t6684 + t6687;
  t6177 = -1.*t858;
  t6181 = 1. + t6177;
  t6196 = 0.135*t6181;
  t6201 = 0.1305*t858*t138;
  t6217 = 0.135*t6207;
  t6218 = 0.049*t885;
  t6231 = 0. + t6217 + t6218;
  t6254 = t858*t6231;
  t6293 = t858*t885*t6281;
  t6299 = -0.09*t6266;
  t6317 = 0.049*t316;
  t6319 = 0. + t6299 + t6317;
  t6320 = -1.*t922*t6319;
  t6370 = t6353*t956;
  t6391 = t6379*t1172;
  t6440 = t6436*t1210;
  t6465 = t6463*t1342;
  t6562 = t6559*t1428;
  t6637 = t6609*t1517;
  t6678 = t6675*t1534;
  t6694 = t6689*t1602;
  t6695 = 0.0306*t1708;
  t6705 = -1.1312*t1781;
  t6706 = 0. + t6196 + t6201 + t6254 + t6293 + t6320 + t6370 + t6391 + t6440 + t6465 + t6562 + t6637 + t6678 + t6694 + t6695 + t6705;
  t6729 = -0.049*t6207;
  t6730 = t138*t182*t6353;
  t6733 = 0.004500000000000004*t885;
  t6748 = t138*t6281;
  t6749 = -1.*t138*t6379*t316;
  t6750 = t6436*t363;
  t6774 = t6463*t549;
  t6778 = t6559*t590;
  t6780 = t6609*t674;
  t6781 = t6675*t682;
  t6783 = t6689*t759;
  t6786 = 0.0306*t764;
  t6788 = -1.1312*t807;
  t6790 = 0. + t6729 + t6730 + t6733 + t6748 + t6749 + t6750 + t6774 + t6778 + t6780 + t6781 + t6783 + t6786 + t6788;
  t5272 = 0.135*t23;
  t5279 = -0.1305*t6*t23;
  t5324 = t23*t5306;
  t5386 = t23*t2951*t5372;
  t5447 = t2915*t5403;
  t5485 = t3544*t5481;
  t5526 = t3583*t5516;
  t5568 = t3680*t5567;
  t5608 = t3729*t5604;
  t5634 = t3778*t5630;
  t5652 = t3814*t5647;
  t5693 = t3842*t5687;
  t5733 = t3876*t5699;
  t5736 = 0.0306*t3917;
  t5742 = -1.1312*t3954;
  t5746 = 0. + t5272 + t5279 + t5324 + t5386 + t5447 + t5485 + t5526 + t5568 + t5608 + t5634 + t5652 + t5693 + t5733 + t5736 + t5742;
  t5977 = -0.049*t5296;
  t6011 = -0.004500000000000004*t2951;
  t6013 = t6*t5372;
  t6030 = t6*t3512*t5481;
  t6036 = -1.*t6*t3534*t5516;
  t6038 = t4611*t5567;
  t6044 = t4645*t5604;
  t6053 = t4684*t5630;
  t6060 = t4747*t5647;
  t6064 = t4757*t5687;
  t6066 = t4844*t5699;
  t6067 = 0.0306*t4865;
  t6088 = -1.1312*t4940;
  t6099 = 0. + t5977 + t6011 + t6013 + t6030 + t6036 + t6038 + t6044 + t6053 + t6060 + t6064 + t6066 + t6067 + t6088;
  t5786 = -1.*t2915;
  t5799 = 1. + t5786;
  t5806 = -0.135*t5799;
  t5848 = -0.1305*t2915*t6;
  t5854 = t2915*t5306;
  t5859 = t2915*t2951*t5372;
  t5864 = -1.*t23*t5403;
  t5878 = t4091*t5481;
  t5896 = t4164*t5516;
  t5910 = t4193*t5567;
  t5930 = t4322*t5604;
  t5931 = t4359*t5630;
  t5933 = t4421*t5647;
  t5939 = t4423*t5687;
  t5942 = t4475*t5699;
  t5952 = 0.0306*t4494;
  t5957 = -1.1312*t4548;
  t5962 = 0. + t5806 + t5848 + t5854 + t5859 + t5864 + t5878 + t5896 + t5910 + t5930 + t5931 + t5933 + t5939 + t5942 + t5952 + t5957;
  t6832 = -0.135*t922;
  t6836 = 0.1305*t138*t922;
  t6844 = t922*t6231;
  t6850 = t922*t885*t6281;
  t6859 = t858*t6319;
  t6871 = t6353*t2029;
  t6875 = t6379*t2149;
  t6886 = t6436*t2197;
  t6917 = t6463*t2286;
  t6928 = t6559*t2307;
  t6932 = t6609*t2360;
  t6933 = t6675*t2381;
  t6934 = t6689*t2482;
  t6936 = 0.0306*t2505;
  t6941 = -1.1312*t2591;
  t6949 = 0. + t6832 + t6836 + t6844 + t6850 + t6859 + t6871 + t6875 + t6886 + t6917 + t6928 + t6932 + t6933 + t6934 + t6936 + t6941;
  t6714 = t1844*t6706;
  t6795 = -1.*t6790*t1809;
  t6799 = t6714 + t6795;
  t6994 = t858*t138*t6790;
  t7006 = t885*t6706;
  t7017 = t6994 + t7006;
  t6813 = t838*t6706;
  t6817 = -1.*t6790*t1939;
  t6819 = t6813 + t6817;
  p_output1[0]=0. + t2829*t2951*t2999 - 1.*t1994*t23*t2829*t6 - 1.*t2829*t2915*t2943*t6;
  p_output1[1]=0. + t2829*t2951*t3196 - 1.*t23*t2829*t3119*t6 - 1.*t2829*t2915*t3223*t6;
  p_output1[2]=0. + t2829*t2951*t3292 - 1.*t23*t2829*t3244*t6 - 1.*t2829*t2915*t3397*t6;
  p_output1[3]=0.;
  p_output1[4]=0. + t1994*t2829*t3990 + t2829*t2943*t4603 + t2829*t2999*t4975;
  p_output1[5]=0. + t2829*t3119*t3990 + t2829*t3223*t4603 + t2829*t3196*t4975;
  p_output1[6]=0. + t2829*t3244*t3990 + t2829*t3397*t4603 + t2829*t3292*t4975;
  p_output1[7]=0.;
  p_output1[8]=0. + t1994*t2829*t5086 + t2829*t2943*t5124 + t2829*t2999*t5152;
  p_output1[9]=0. + t2829*t3119*t5086 + t2829*t3223*t5124 + t2829*t3196*t5152;
  p_output1[10]=0. + t2829*t3244*t5086 + t2829*t3397*t5124 + t2829*t3292*t5152;
  p_output1[11]=0.;
  p_output1[12]=t1994*t2829*t5746 + t2829*t2943*t5962 + t2829*t2999*t6099 + t2829*(-1.*t2606*t6799 + t2698*t6819 - 1.*t2783*t6949);
  p_output1[13]=t2829*t3119*t5746 + t2829*t3223*t5962 + t2829*t3196*t6099 + t2829*(t2648*t6949 - 1.*t2698*t7017 - 1.*t138*t6799*t922);
  p_output1[14]=t2829*t3244*t5746 + t2829*t3397*t5962 + t2829*t3292*t6099 + t2829*(-1.*t2753*t6949 + t2606*t7017 + t138*t6819*t922);
  p_output1[15]=0. + (t2677 + t2768 + t2790)*t2829;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 14 && ncols == 1) && 
      !(mrows == 1 && ncols == 14))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 4, (mwSize) 4, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "H_LeftToeBottom_to_RightToeBottom_mex.hh"

namespace SymExpression
{

void H_LeftToeBottom_to_RightToeBottom_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
