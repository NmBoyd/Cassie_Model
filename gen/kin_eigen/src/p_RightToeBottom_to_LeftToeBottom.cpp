/*
 * Automatically Generated from Mathematica.
 * Mon 26 Feb 2018 15:43:09 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_RightToeBottom_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t656;
  double t362;
  double t385;
  double t448;
  double t772;
  double t331;
  double t861;
  double t912;
  double t1007;
  double t555;
  double t836;
  double t839;
  double t1017;
  double t281;
  double t1235;
  double t1249;
  double t1345;
  double t844;
  double t1122;
  double t1130;
  double t1400;
  double t196;
  double t1539;
  double t1556;
  double t1571;
  double t1222;
  double t1440;
  double t1459;
  double t1576;
  double t195;
  double t1759;
  double t1770;
  double t1839;
  double t1490;
  double t1614;
  double t1639;
  double t1874;
  double t2320;
  double t2472;
  double t2611;
  double t2638;
  double t2332;
  double t2347;
  double t2407;
  double t2858;
  double t2886;
  double t2955;
  double t2421;
  double t2678;
  double t2721;
  double t3025;
  double t3051;
  double t3082;
  double t2781;
  double t2983;
  double t2994;
  double t3314;
  double t3324;
  double t3377;
  double t3249;
  double t3250;
  double t3258;
  double t3432;
  double t3434;
  double t3438;
  double t3273;
  double t3398;
  double t3421;
  double t3543;
  double t3621;
  double t3648;
  double t3429;
  double t3450;
  double t3495;
  double t3779;
  double t3822;
  double t3829;
  double t3525;
  double t3725;
  double t3726;
  double t1705;
  double t1960;
  double t1981;
  double t2057;
  double t2060;
  double t2100;
  double t3006;
  double t3110;
  double t3132;
  double t3136;
  double t3150;
  double t3174;
  double t3738;
  double t3838;
  double t3875;
  double t3943;
  double t3959;
  double t3962;
  double t4219;
  double t4227;
  double t4230;
  double t3900;
  double t3970;
  double t3972;
  double t3134;
  double t3224;
  double t3237;
  double t4312;
  double t4333;
  double t4344;
  double t2004;
  double t2192;
  double t2267;
  double t4838;
  double t4875;
  double t5156;
  double t5233;
  double t5695;
  double t5735;
  double t6201;
  double t6342;
  double t7258;
  double t7271;
  double t4651;
  double t4723;
  double t4917;
  double t4971;
  double t5001;
  double t5264;
  double t5287;
  double t5302;
  double t5470;
  double t5493;
  double t5524;
  double t5770;
  double t5842;
  double t5852;
  double t5915;
  double t5950;
  double t6146;
  double t6390;
  double t6409;
  double t6411;
  double t6721;
  double t7071;
  double t7072;
  double t7495;
  double t7671;
  double t8584;
  double t8717;
  double t8723;
  double t8732;
  double t4129;
  double t4155;
  double t4160;
  double t4551;
  double t4572;
  double t4581;
  double t4590;
  double t4724;
  double t4797;
  double t4816;
  double t4819;
  double t5076;
  double t5133;
  double t5140;
  double t5141;
  double t5155;
  double t5313;
  double t5632;
  double t5888;
  double t6197;
  double t6648;
  double t7231;
  double t8628;
  double t8741;
  double t8745;
  double t8766;
  double t8768;
  double t8779;
  double t8782;
  double t8785;
  double t8791;
  double t8792;
  double t8794;
  double t8795;
  double t8812;
  double t8818;
  double t8825;
  double t8830;
  double t8835;
  double t8839;
  double t8844;
  double t4394;
  double t4494;
  double t4504;
  double t3240;
  double t3984;
  double t4005;
  double t4087;
  double t4306;
  double t4364;
  double t4373;
  double t4378;
  double t4509;
  double t4513;
  double t4516;
  double t8917;
  double t8921;
  double t8922;
  double t8926;
  double t8930;
  double t8932;
  double t8957;
  double t8980;
  double t8981;
  double t8994;
  double t8996;
  double t9001;
  double t9004;
  double t9012;
  double t9024;
  double t9029;
  double t9030;
  double t9032;
  double t9036;
  double t9037;
  double t9050;
  double t9056;
  double t9057;
  double t9058;
  double t9067;
  double t9068;
  double t9069;
  double t9073;
  double t9074;
  double t9076;
  double t9078;
  double t9082;
  double t9084;
  double t9091;
  double t9096;
  double t9099;
  double t9101;
  double t9127;
  double t8918;
  double t8919;
  double t8943;
  double t8953;
  double t8954;
  double t8955;
  double t8963;
  double t8967;
  double t8931;
  double t8935;
  double t8936;
  double t9141;
  double t8969;
  double t8970;
  double t8971;
  double t8995;
  double t8999;
  double t9000;
  double t9147;
  double t9148;
  double t9149;
  double t9151;
  double t9152;
  double t9153;
  double t9015;
  double t9019;
  double t9020;
  double t9044;
  double t9051;
  double t9055;
  double t9155;
  double t9156;
  double t9157;
  double t9160;
  double t9162;
  double t9163;
  double t9062;
  double t9063;
  double t9065;
  double t9077;
  double t9079;
  double t9080;
  double t9166;
  double t9167;
  double t9168;
  double t9171;
  double t9172;
  double t9173;
  double t9093;
  double t9094;
  double t9095;
  double t9176;
  double t9178;
  double t9179;
  double t9182;
  double t9183;
  double t9184;
  double t9135;
  double t9136;
  double t9137;
  double t9142;
  double t9143;
  double t9144;
  double t9205;
  double t9206;
  double t9207;
  double t9209;
  double t9210;
  double t9211;
  double t9213;
  double t9214;
  double t9215;
  double t9217;
  double t9218;
  double t9219;
  double t9221;
  double t9222;
  double t9223;
  double t9225;
  double t9226;
  double t9227;
  double t9229;
  double t9230;
  double t9231;
  double t9233;
  double t9234;
  double t9235;
  double t8856;
  double t8857;
  double t8859;
  double t8861;
  double t8862;
  double t8863;
  double t8864;
  double t8867;
  double t8869;
  double t8870;
  double t8871;
  double t8876;
  double t8879;
  double t8889;
  double t8892;
  double t8895;
  double t8769;
  double t8845;
  double t8847;
  double t8920;
  double t8937;
  double t8948;
  double t8968;
  double t8978;
  double t9014;
  double t9031;
  double t9061;
  double t9072;
  double t9092;
  double t9102;
  double t9105;
  double t9108;
  double t9112;
  double t9113;
  double t9115;
  double t9116;
  double t9117;
  double t9118;
  double t9119;
  double t9129;
  double t9130;
  double t9133;
  double t9134;
  double t9139;
  double t9140;
  double t9146;
  double t9150;
  double t9154;
  double t9159;
  double t9165;
  double t9169;
  double t9175;
  double t9181;
  double t9185;
  double t9187;
  double t9188;
  double t9189;
  double t9190;
  double t9191;
  double t9192;
  double t9194;
  double t9195;
  double t9196;
  double t9199;
  double t9200;
  double t9202;
  double t9203;
  double t9204;
  double t9208;
  double t9212;
  double t9216;
  double t9220;
  double t9224;
  double t9228;
  double t9232;
  double t9236;
  double t9237;
  double t9238;
  double t9239;
  double t9240;
  double t9241;
  double t9242;
  double t9243;
  double t9244;
  double t9245;
  double t9248;
  double t9249;
  double t9250;
  double t8851;
  double t8852;
  double t8854;
  t656 = Cos(var1[7]);
  t362 = Cos(var1[9]);
  t385 = Sin(var1[7]);
  t448 = Sin(var1[8]);
  t772 = Sin(var1[9]);
  t331 = Cos(var1[10]);
  t861 = t656*t362;
  t912 = -1.*t385*t448*t772;
  t1007 = t861 + t912;
  t555 = t362*t385*t448;
  t836 = t656*t772;
  t839 = t555 + t836;
  t1017 = Sin(var1[10]);
  t281 = Cos(var1[11]);
  t1235 = t331*t1007;
  t1249 = -1.*t839*t1017;
  t1345 = t1235 + t1249;
  t844 = t331*t839;
  t1122 = t1007*t1017;
  t1130 = t844 + t1122;
  t1400 = Sin(var1[11]);
  t196 = Cos(var1[12]);
  t1539 = t281*t1345;
  t1556 = -1.*t1130*t1400;
  t1571 = t1539 + t1556;
  t1222 = t281*t1130;
  t1440 = t1345*t1400;
  t1459 = t1222 + t1440;
  t1576 = Sin(var1[12]);
  t195 = Cos(var1[13]);
  t1759 = t196*t1571;
  t1770 = -1.*t1459*t1576;
  t1839 = t1759 + t1770;
  t1490 = t196*t1459;
  t1614 = t1571*t1576;
  t1639 = t1490 + t1614;
  t1874 = Sin(var1[13]);
  t2320 = Cos(var1[8]);
  t2472 = -1.*t2320*t331*t772;
  t2611 = -1.*t2320*t362*t1017;
  t2638 = t2472 + t2611;
  t2332 = t2320*t362*t331;
  t2347 = -1.*t2320*t772*t1017;
  t2407 = t2332 + t2347;
  t2858 = t281*t2638;
  t2886 = -1.*t2407*t1400;
  t2955 = t2858 + t2886;
  t2421 = t281*t2407;
  t2678 = t2638*t1400;
  t2721 = t2421 + t2678;
  t3025 = t196*t2955;
  t3051 = -1.*t2721*t1576;
  t3082 = t3025 + t3051;
  t2781 = t196*t2721;
  t2983 = t2955*t1576;
  t2994 = t2781 + t2983;
  t3314 = -1.*t362*t385;
  t3324 = -1.*t656*t448*t772;
  t3377 = t3314 + t3324;
  t3249 = t656*t362*t448;
  t3250 = -1.*t385*t772;
  t3258 = t3249 + t3250;
  t3432 = t331*t3377;
  t3434 = -1.*t3258*t1017;
  t3438 = t3432 + t3434;
  t3273 = t331*t3258;
  t3398 = t3377*t1017;
  t3421 = t3273 + t3398;
  t3543 = t281*t3438;
  t3621 = -1.*t3421*t1400;
  t3648 = t3543 + t3621;
  t3429 = t281*t3421;
  t3450 = t3438*t1400;
  t3495 = t3429 + t3450;
  t3779 = t196*t3648;
  t3822 = -1.*t3495*t1576;
  t3829 = t3779 + t3822;
  t3525 = t196*t3495;
  t3725 = t3648*t1576;
  t3726 = t3525 + t3725;
  t1705 = t195*t1639;
  t1960 = t1839*t1874;
  t1981 = t1705 + t1960;
  t2057 = t195*t1839;
  t2060 = -1.*t1639*t1874;
  t2100 = t2057 + t2060;
  t3006 = t195*t2994;
  t3110 = t3082*t1874;
  t3132 = t3006 + t3110;
  t3136 = t195*t3082;
  t3150 = -1.*t2994*t1874;
  t3174 = t3136 + t3150;
  t3738 = t195*t3726;
  t3838 = t3829*t1874;
  t3875 = t3738 + t3838;
  t3943 = t195*t3829;
  t3959 = -1.*t3726*t1874;
  t3962 = t3943 + t3959;
  t4219 = 0.642788*t3132;
  t4227 = 0.766044*t3174;
  t4230 = t4219 + t4227;
  t3900 = -0.766044*t3875;
  t3970 = 0.642788*t3962;
  t3972 = t3900 + t3970;
  t3134 = -0.766044*t3132;
  t3224 = 0.642788*t3174;
  t3237 = t3134 + t3224;
  t4312 = 0.642788*t3875;
  t4333 = 0.766044*t3962;
  t4344 = t4312 + t4333;
  t2004 = 0.642788*t1981;
  t2192 = 0.766044*t2100;
  t2267 = t2004 + t2192;
  t4838 = -1.*t362;
  t4875 = 1. + t4838;
  t5156 = -1.*t331;
  t5233 = 1. + t5156;
  t5695 = -1.*t281;
  t5735 = 1. + t5695;
  t6201 = -1.*t196;
  t6342 = 1. + t6201;
  t7258 = -1.*t195;
  t7271 = 1. + t7258;
  t4651 = -1.*t2320;
  t4723 = 1. + t4651;
  t4917 = -0.049*t4875;
  t4971 = -0.09*t772;
  t5001 = 0. + t4917 + t4971;
  t5264 = -0.049*t5233;
  t5287 = -0.21*t1017;
  t5302 = 0. + t5264 + t5287;
  t5470 = -0.21*t5233;
  t5493 = 0.049*t1017;
  t5524 = 0. + t5470 + t5493;
  t5770 = -0.0016*t5735;
  t5842 = -0.2707*t1400;
  t5852 = 0. + t5770 + t5842;
  t5915 = -0.2707*t5735;
  t5950 = 0.0016*t1400;
  t6146 = 0. + t5915 + t5950;
  t6390 = 0.0184*t6342;
  t6409 = -0.7055*t1576;
  t6411 = 0. + t6390 + t6409;
  t6721 = -0.7055*t6342;
  t7071 = -0.0184*t1576;
  t7072 = 0. + t6721 + t7071;
  t7495 = -0.0216*t7271;
  t7671 = -1.1135*t1874;
  t8584 = 0. + t7495 + t7671;
  t8717 = -1.1135*t7271;
  t8723 = 0.0216*t1874;
  t8732 = 0. + t8717 + t8723;
  t4129 = -0.766044*t1981;
  t4155 = 0.642788*t2100;
  t4160 = t4129 + t4155;
  t4551 = -1.*t656;
  t4572 = 1. + t4551;
  t4581 = -0.135*t4572;
  t4590 = -0.1305*t656*t2320;
  t4724 = -0.135*t4723;
  t4797 = 0.049*t448;
  t4816 = 0. + t4724 + t4797;
  t4819 = t656*t4816;
  t5076 = t656*t448*t5001;
  t5133 = -0.09*t4875;
  t5140 = 0.049*t772;
  t5141 = 0. + t5133 + t5140;
  t5155 = -1.*t385*t5141;
  t5313 = t3258*t5302;
  t5632 = t3377*t5524;
  t5888 = t3421*t5852;
  t6197 = t3438*t6146;
  t6648 = t3495*t6411;
  t7231 = t3648*t7072;
  t8628 = t3726*t8584;
  t8741 = t3829*t8732;
  t8745 = 0.0306*t3875;
  t8766 = -1.1312*t3962;
  t8768 = 0. + t4581 + t4590 + t4819 + t5076 + t5155 + t5313 + t5632 + t5888 + t6197 + t6648 + t7231 + t8628 + t8741 + t8745 + t8766;
  t8779 = -0.049*t4723;
  t8782 = -0.004500000000000004*t448;
  t8785 = t2320*t5001;
  t8791 = t2320*t362*t5302;
  t8792 = -1.*t2320*t772*t5524;
  t8794 = t2407*t5852;
  t8795 = t2638*t6146;
  t8812 = t2721*t6411;
  t8818 = t2955*t7072;
  t8825 = t2994*t8584;
  t8830 = t3082*t8732;
  t8835 = 0.0306*t3132;
  t8839 = -1.1312*t3174;
  t8844 = 0. + t8779 + t8782 + t8785 + t8791 + t8792 + t8794 + t8795 + t8812 + t8818 + t8825 + t8830 + t8835 + t8839;
  t4394 = t4230*t3972;
  t4494 = -1.*t3237*t4344;
  t4504 = t4394 + t4494;
  t3240 = t656*t2320*t3237;
  t3984 = t448*t3972;
  t4005 = t3240 + t3984;
  t4087 = -1.*t2267*t4005;
  t4306 = t656*t2320*t4230;
  t4364 = t448*t4344;
  t4373 = t4306 + t4364;
  t4378 = t4160*t4373;
  t4509 = -1.*t2320*t385*t4504;
  t4513 = 0. + t4087 + t4378 + t4509;
  t4516 = 1/t4513;
  t8917 = Cos(var1[1]);
  t8921 = Cos(var1[2]);
  t8922 = Cos(var1[3]);
  t8926 = -1.*t8922;
  t8930 = 1. + t8926;
  t8932 = Sin(var1[3]);
  t8957 = Sin(var1[2]);
  t8980 = Cos(var1[4]);
  t8981 = -1.*t8980;
  t8994 = 1. + t8981;
  t8996 = Sin(var1[4]);
  t9001 = -1.*t8917*t8921*t8932;
  t9004 = -1.*t8922*t8917*t8957;
  t9012 = t9001 + t9004;
  t9024 = t8922*t8917*t8921;
  t9029 = -1.*t8917*t8932*t8957;
  t9030 = t9024 + t9029;
  t9032 = Cos(var1[5]);
  t9036 = -1.*t9032;
  t9037 = 1. + t9036;
  t9050 = Sin(var1[5]);
  t9056 = t8996*t9012;
  t9057 = t8980*t9030;
  t9058 = t9056 + t9057;
  t9067 = t8980*t9012;
  t9068 = -1.*t8996*t9030;
  t9069 = t9067 + t9068;
  t9073 = Cos(var1[6]);
  t9074 = -1.*t9073;
  t9076 = 1. + t9074;
  t9078 = Sin(var1[6]);
  t9082 = -1.*t9050*t9058;
  t9084 = t9032*t9069;
  t9091 = t9082 + t9084;
  t9096 = t9032*t9058;
  t9099 = t9050*t9069;
  t9101 = t9096 + t9099;
  t9127 = Cos(var1[0]);
  t8918 = -1.*t8917;
  t8919 = 1. + t8918;
  t8943 = Sin(var1[1]);
  t8953 = -1.*t8921;
  t8954 = 1. + t8953;
  t8955 = -0.049*t8954;
  t8963 = -0.09*t8957;
  t8967 = 0. + t8955 + t8963;
  t8931 = -0.049*t8930;
  t8935 = -0.21*t8932;
  t8936 = 0. + t8931 + t8935;
  t9141 = Sin(var1[0]);
  t8969 = -0.21*t8930;
  t8970 = 0.049*t8932;
  t8971 = 0. + t8969 + t8970;
  t8995 = -0.2707*t8994;
  t8999 = 0.0016*t8996;
  t9000 = 0. + t8995 + t8999;
  t9147 = t9127*t8921*t8943;
  t9148 = -1.*t9141*t8957;
  t9149 = t9147 + t9148;
  t9151 = -1.*t8921*t9141;
  t9152 = -1.*t9127*t8943*t8957;
  t9153 = t9151 + t9152;
  t9015 = -0.0016*t8994;
  t9019 = -0.2707*t8996;
  t9020 = 0. + t9015 + t9019;
  t9044 = 0.0184*t9037;
  t9051 = -0.7055*t9050;
  t9055 = 0. + t9044 + t9051;
  t9155 = -1.*t8932*t9149;
  t9156 = t8922*t9153;
  t9157 = t9155 + t9156;
  t9160 = t8922*t9149;
  t9162 = t8932*t9153;
  t9163 = t9160 + t9162;
  t9062 = -0.7055*t9037;
  t9063 = -0.0184*t9050;
  t9065 = 0. + t9062 + t9063;
  t9077 = -1.1135*t9076;
  t9079 = 0.0216*t9078;
  t9080 = 0. + t9077 + t9079;
  t9166 = t8996*t9157;
  t9167 = t8980*t9163;
  t9168 = t9166 + t9167;
  t9171 = t8980*t9157;
  t9172 = -1.*t8996*t9163;
  t9173 = t9171 + t9172;
  t9093 = -0.0216*t9076;
  t9094 = -1.1135*t9078;
  t9095 = 0. + t9093 + t9094;
  t9176 = -1.*t9050*t9168;
  t9178 = t9032*t9173;
  t9179 = t9176 + t9178;
  t9182 = t9032*t9168;
  t9183 = t9050*t9173;
  t9184 = t9182 + t9183;
  t9135 = 0.135*t8919;
  t9136 = 0.049*t8943;
  t9137 = 0. + t9135 + t9136;
  t9142 = -0.09*t8954;
  t9143 = 0.049*t8957;
  t9144 = 0. + t9142 + t9143;
  t9205 = t8921*t9141*t8943;
  t9206 = t9127*t8957;
  t9207 = t9205 + t9206;
  t9209 = t9127*t8921;
  t9210 = -1.*t9141*t8943*t8957;
  t9211 = t9209 + t9210;
  t9213 = -1.*t8932*t9207;
  t9214 = t8922*t9211;
  t9215 = t9213 + t9214;
  t9217 = t8922*t9207;
  t9218 = t8932*t9211;
  t9219 = t9217 + t9218;
  t9221 = t8996*t9215;
  t9222 = t8980*t9219;
  t9223 = t9221 + t9222;
  t9225 = t8980*t9215;
  t9226 = -1.*t8996*t9219;
  t9227 = t9225 + t9226;
  t9229 = -1.*t9050*t9223;
  t9230 = t9032*t9227;
  t9231 = t9229 + t9230;
  t9233 = t9032*t9223;
  t9234 = t9050*t9227;
  t9235 = t9233 + t9234;
  t8856 = 0.135*t385;
  t8857 = -0.1305*t2320*t385;
  t8859 = t385*t4816;
  t8861 = t385*t448*t5001;
  t8862 = t656*t5141;
  t8863 = t839*t5302;
  t8864 = t1007*t5524;
  t8867 = t1130*t5852;
  t8869 = t1345*t6146;
  t8870 = t1459*t6411;
  t8871 = t1571*t7072;
  t8876 = t1639*t8584;
  t8879 = t1839*t8732;
  t8889 = 0.0306*t1981;
  t8892 = -1.1312*t2100;
  t8895 = 0. + t8856 + t8857 + t8859 + t8861 + t8862 + t8863 + t8864 + t8867 + t8869 + t8870 + t8871 + t8876 + t8879 + t8889 + t8892;
  t8769 = t3237*t8768;
  t8845 = -1.*t8844*t3972;
  t8847 = t8769 + t8845;
  t8920 = -0.049*t8919;
  t8937 = t8917*t8921*t8936;
  t8948 = 0.004500000000000004*t8943;
  t8968 = t8917*t8967;
  t8978 = -1.*t8917*t8971*t8957;
  t9014 = t9000*t9012;
  t9031 = t9020*t9030;
  t9061 = t9055*t9058;
  t9072 = t9065*t9069;
  t9092 = t9080*t9091;
  t9102 = t9095*t9101;
  t9105 = t9078*t9091;
  t9108 = t9073*t9101;
  t9112 = t9105 + t9108;
  t9113 = 0.0306*t9112;
  t9115 = t9073*t9091;
  t9116 = -1.*t9078*t9101;
  t9117 = t9115 + t9116;
  t9118 = -1.1312*t9117;
  t9119 = 0. + t8920 + t8937 + t8948 + t8968 + t8978 + t9014 + t9031 + t9061 + t9072 + t9092 + t9102 + t9113 + t9118;
  t9129 = -1.*t9127;
  t9130 = 1. + t9129;
  t9133 = 0.135*t9130;
  t9134 = 0.1305*t9127*t8917;
  t9139 = t9127*t9137;
  t9140 = t9127*t8943*t8967;
  t9146 = -1.*t9141*t9144;
  t9150 = t8936*t9149;
  t9154 = t8971*t9153;
  t9159 = t9000*t9157;
  t9165 = t9020*t9163;
  t9169 = t9055*t9168;
  t9175 = t9065*t9173;
  t9181 = t9080*t9179;
  t9185 = t9095*t9184;
  t9187 = t9078*t9179;
  t9188 = t9073*t9184;
  t9189 = t9187 + t9188;
  t9190 = 0.0306*t9189;
  t9191 = t9073*t9179;
  t9192 = -1.*t9078*t9184;
  t9194 = t9191 + t9192;
  t9195 = -1.1312*t9194;
  t9196 = 0. + t9133 + t9134 + t9139 + t9140 + t9146 + t9150 + t9154 + t9159 + t9165 + t9169 + t9175 + t9181 + t9185 + t9190 + t9195;
  t9199 = -0.135*t9141;
  t9200 = 0.1305*t8917*t9141;
  t9202 = t9141*t9137;
  t9203 = t9141*t8943*t8967;
  t9204 = t9127*t9144;
  t9208 = t8936*t9207;
  t9212 = t8971*t9211;
  t9216 = t9000*t9215;
  t9220 = t9020*t9219;
  t9224 = t9055*t9223;
  t9228 = t9065*t9227;
  t9232 = t9080*t9231;
  t9236 = t9095*t9235;
  t9237 = t9078*t9231;
  t9238 = t9073*t9235;
  t9239 = t9237 + t9238;
  t9240 = 0.0306*t9239;
  t9241 = t9073*t9231;
  t9242 = -1.*t9078*t9235;
  t9243 = t9241 + t9242;
  t9244 = -1.1312*t9243;
  t9245 = 0. + t9199 + t9200 + t9202 + t9203 + t9204 + t9208 + t9212 + t9216 + t9220 + t9224 + t9228 + t9232 + t9236 + t9240 + t9244;
  t9248 = t656*t2320*t8844;
  t9249 = t448*t8768;
  t9250 = t9248 + t9249;
  t8851 = t4230*t8768;
  t8852 = -1.*t8844*t4344;
  t8854 = t8851 + t8852;

  p_output1(0)=t4516*(-1.*t2267*t8847 + t4160*t8854 - 1.*t4504*t8895) + (0. - 1.*t2267*t3972 + t4160*t4344)*t4516*t9119 + (0. + t2267*t3237 - 1.*t4160*t4230)*t4516*t9196 + (0. + t4394 + t4494)*t4516*t9245;
  p_output1(1)=t4516*(0. - 1.*t2320*t385*t3972 + t2320*t4160*t656)*t9119 + (0. + t2320*t3237*t385 + t4160*t448)*t4516*t9196 + t4516*(0. - 1.*t3972*t448 - 1.*t2320*t3237*t656)*t9245 + t4516*(-1.*t2320*t385*t8847 + t4005*t8895 - 1.*t4160*t9250);
  p_output1(2)=t4516*(0. + t2320*t385*t4344 - 1.*t2267*t2320*t656)*t9119 + (0. - 1.*t2320*t385*t4230 - 1.*t2267*t448)*t4516*t9196 + (0. + t4306 + t4364)*t4516*t9245 + t4516*(t2320*t385*t8854 - 1.*t4373*t8895 + t2267*t9250);
}


       
void p_RightToeBottom_to_LeftToeBottom(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
