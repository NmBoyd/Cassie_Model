/*
 * Automatically Generated from Mathematica.
 * Fri 16 Feb 2018 12:25:25 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "H_LeftToeBottom_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t551;
  double t617;
  double t573;
  double t603;
  double t636;
  double t803;
  double t608;
  double t666;
  double t742;
  double t526;
  double t809;
  double t841;
  double t847;
  double t1025;
  double t766;
  double t849;
  double t945;
  double t377;
  double t1028;
  double t1073;
  double t1075;
  double t1234;
  double t957;
  double t1096;
  double t1152;
  double t324;
  double t1371;
  double t1428;
  double t1431;
  double t1706;
  double t1645;
  double t1665;
  double t1685;
  double t1747;
  double t1751;
  double t1788;
  double t1803;
  double t1815;
  double t1770;
  double t1830;
  double t1833;
  double t1882;
  double t1884;
  double t1896;
  double t1861;
  double t1903;
  double t1917;
  double t1943;
  double t1965;
  double t1966;
  double t1927;
  double t1994;
  double t2022;
  double t2093;
  double t2110;
  double t2127;
  double t1190;
  double t1433;
  double t1450;
  double t1500;
  double t1524;
  double t1567;
  double t2091;
  double t2188;
  double t2223;
  double t2240;
  double t2328;
  double t2350;
  double t2572;
  double t2641;
  double t2650;
  double t2675;
  double t2681;
  double t2682;
  double t2671;
  double t2698;
  double t2730;
  double t2758;
  double t2780;
  double t2783;
  double t2733;
  double t2846;
  double t2855;
  double t2896;
  double t2923;
  double t2929;
  double t2886;
  double t2936;
  double t2945;
  double t2959;
  double t2966;
  double t2983;
  double t2412;
  double t2420;
  double t2428;
  double t2224;
  double t2360;
  double t2364;
  double t2953;
  double t2996;
  double t3026;
  double t3112;
  double t3163;
  double t3173;
  double t1483;
  double t1590;
  double t1600;
  double t2452;
  double t2474;
  double t2510;
  double t2404;
  double t2537;
  double t211;
  double t3282;
  double t3297;
  double t3306;
  double t3068;
  double t3203;
  double t3218;
  double t3238;
  double t3243;
  double t3254;
  double t3259;
  double t3319;
  double t3320;
  double t3349;
  double t3359;
  double t3365;
  double t3411;
  double t3467;
  double t3490;
  double t272;
  double t3644;
  double t3566;
  double t4179;
  double t4254;
  double t4153;
  double t4289;
  double t4315;
  double t4324;
  double t4235;
  double t4258;
  double t4270;
  double t4351;
  double t4134;
  double t4411;
  double t4421;
  double t4433;
  double t4280;
  double t4370;
  double t4402;
  double t4451;
  double t4131;
  double t4492;
  double t4521;
  double t4528;
  double t4404;
  double t4465;
  double t4471;
  double t4534;
  double t4083;
  double t4679;
  double t4683;
  double t4744;
  double t4486;
  double t4555;
  double t4614;
  double t4762;
  double t2570;
  double t5013;
  double t5022;
  double t5030;
  double t4893;
  double t4949;
  double t4974;
  double t5075;
  double t5078;
  double t5079;
  double t4994;
  double t5031;
  double t5067;
  double t5139;
  double t5151;
  double t5170;
  double t5074;
  double t5093;
  double t5099;
  double t5207;
  double t5215;
  double t5217;
  double t5138;
  double t5174;
  double t5200;
  double t3599;
  double t3614;
  double t3624;
  double t5395;
  double t5403;
  double t5483;
  double t5341;
  double t5370;
  double t5375;
  double t5516;
  double t5519;
  double t5523;
  double t5393;
  double t5490;
  double t5501;
  double t5610;
  double t5618;
  double t5619;
  double t5506;
  double t5524;
  double t5536;
  double t3680;
  double t3688;
  double t3705;
  double t4678;
  double t4770;
  double t4791;
  double t4821;
  double t4829;
  double t4834;
  double t4844;
  double t4857;
  double t4875;
  double t3719;
  double t3756;
  double t3769;
  double t5576;
  double t5637;
  double t5647;
  double t5669;
  double t5698;
  double t5709;
  double t5711;
  double t5712;
  double t5746;
  double t3803;
  double t3808;
  double t3818;
  double t5204;
  double t5221;
  double t5244;
  double t5271;
  double t5276;
  double t5286;
  double t5297;
  double t5304;
  double t5315;
  double t3865;
  double t3900;
  double t3926;
  double t3957;
  double t4004;
  double t4006;
  double t4020;
  double t4037;
  double t4049;
  double t4068;
  double t5834;
  double t5841;
  double t5858;
  double t5918;
  double t5925;
  double t5926;
  double t5877;
  double t5879;
  double t5883;
  double t6147;
  double t6151;
  double t6271;
  double t6295;
  double t6389;
  double t6399;
  double t6480;
  double t6503;
  double t6631;
  double t6640;
  double t6036;
  double t6047;
  double t6071;
  double t6087;
  double t6093;
  double t6168;
  double t6184;
  double t6230;
  double t6250;
  double t6254;
  double t6258;
  double t6298;
  double t6306;
  double t6320;
  double t6336;
  double t6379;
  double t6380;
  double t6410;
  double t6411;
  double t6418;
  double t6429;
  double t6432;
  double t6442;
  double t6516;
  double t6527;
  double t6556;
  double t6565;
  double t6582;
  double t6604;
  double t6654;
  double t6655;
  double t6692;
  double t6700;
  double t6703;
  double t6706;
  double t7062;
  double t7077;
  double t7172;
  double t7179;
  double t7244;
  double t7249;
  double t7301;
  double t7303;
  double t7375;
  double t7381;
  double t6988;
  double t7008;
  double t7180;
  double t7183;
  double t7187;
  double t7093;
  double t7118;
  double t7123;
  double t7201;
  double t7202;
  double t7217;
  double t7251;
  double t7263;
  double t7267;
  double t7281;
  double t7286;
  double t7287;
  double t7317;
  double t7334;
  double t7339;
  double t7358;
  double t7362;
  double t7365;
  double t7396;
  double t7397;
  double t7411;
  double t7424;
  double t7425;
  double t7431;
  double t6962;
  double t6979;
  double t6984;
  double t6985;
  double t7017;
  double t7022;
  double t7027;
  double t7059;
  double t7136;
  double t7150;
  double t7153;
  double t7167;
  double t7168;
  double t7197;
  double t7240;
  double t7278;
  double t7291;
  double t7344;
  double t7372;
  double t7421;
  double t7456;
  double t7462;
  double t7465;
  double t7466;
  double t7495;
  double t7502;
  double t7507;
  double t7523;
  double t7541;
  double t7557;
  double t7561;
  double t7564;
  double t7568;
  double t7577;
  double t7580;
  double t7589;
  double t7595;
  double t7596;
  double t6024;
  double t6034;
  double t6099;
  double t6247;
  double t6266;
  double t6324;
  double t6381;
  double t6423;
  double t6465;
  double t6564;
  double t6608;
  double t6698;
  double t6708;
  double t6710;
  double t6721;
  double t6749;
  double t6842;
  double t6844;
  double t6850;
  double t6851;
  double t6854;
  double t6870;
  double t6881;
  double t6891;
  double t6923;
  double t6928;
  double t6929;
  double t6935;
  double t6947;
  double t6949;
  double t6756;
  double t6759;
  double t6768;
  double t6769;
  double t6770;
  double t6773;
  double t6783;
  double t6791;
  double t6795;
  double t6799;
  double t6800;
  double t6802;
  double t6812;
  double t6819;
  double t6821;
  double t6822;
  double t6824;
  double t6831;
  double t7654;
  double t7671;
  double t7683;
  double t7684;
  double t7696;
  double t7697;
  double t7704;
  double t7712;
  double t7713;
  double t7714;
  double t7741;
  double t7768;
  double t7769;
  double t7772;
  double t7780;
  double t7783;
  double t7494;
  double t7599;
  double t7603;
  double t7816;
  double t7818;
  double t7824;
  double t7631;
  double t7639;
  double t7647;
  t551 = Cos(var1[1]);
  t617 = Cos(var1[3]);
  t573 = Cos(var1[2]);
  t603 = Sin(var1[3]);
  t636 = Sin(var1[2]);
  t803 = Cos(var1[4]);
  t608 = -1.*t551*t573*t603;
  t666 = -1.*t617*t551*t636;
  t742 = t608 + t666;
  t526 = Sin(var1[4]);
  t809 = t617*t551*t573;
  t841 = -1.*t551*t603*t636;
  t847 = t809 + t841;
  t1025 = Cos(var1[5]);
  t766 = t526*t742;
  t849 = t803*t847;
  t945 = t766 + t849;
  t377 = Sin(var1[5]);
  t1028 = t803*t742;
  t1073 = -1.*t526*t847;
  t1075 = t1028 + t1073;
  t1234 = Cos(var1[6]);
  t957 = -1.*t377*t945;
  t1096 = t1025*t1075;
  t1152 = t957 + t1096;
  t324 = Sin(var1[6]);
  t1371 = t1025*t945;
  t1428 = t377*t1075;
  t1431 = t1371 + t1428;
  t1706 = Sin(var1[0]);
  t1645 = Cos(var1[0]);
  t1665 = Sin(var1[1]);
  t1685 = t1645*t573*t1665;
  t1747 = -1.*t1706*t636;
  t1751 = t1685 + t1747;
  t1788 = -1.*t573*t1706;
  t1803 = -1.*t1645*t1665*t636;
  t1815 = t1788 + t1803;
  t1770 = -1.*t603*t1751;
  t1830 = t617*t1815;
  t1833 = t1770 + t1830;
  t1882 = t617*t1751;
  t1884 = t603*t1815;
  t1896 = t1882 + t1884;
  t1861 = t526*t1833;
  t1903 = t803*t1896;
  t1917 = t1861 + t1903;
  t1943 = t803*t1833;
  t1965 = -1.*t526*t1896;
  t1966 = t1943 + t1965;
  t1927 = -1.*t377*t1917;
  t1994 = t1025*t1966;
  t2022 = t1927 + t1994;
  t2093 = t1025*t1917;
  t2110 = t377*t1966;
  t2127 = t2093 + t2110;
  t1190 = t324*t1152;
  t1433 = t1234*t1431;
  t1450 = t1190 + t1433;
  t1500 = t1234*t1152;
  t1524 = -1.*t324*t1431;
  t1567 = t1500 + t1524;
  t2091 = t324*t2022;
  t2188 = t1234*t2127;
  t2223 = t2091 + t2188;
  t2240 = t1234*t2022;
  t2328 = -1.*t324*t2127;
  t2350 = t2240 + t2328;
  t2572 = t573*t1706*t1665;
  t2641 = t1645*t636;
  t2650 = t2572 + t2641;
  t2675 = t1645*t573;
  t2681 = -1.*t1706*t1665*t636;
  t2682 = t2675 + t2681;
  t2671 = -1.*t603*t2650;
  t2698 = t617*t2682;
  t2730 = t2671 + t2698;
  t2758 = t617*t2650;
  t2780 = t603*t2682;
  t2783 = t2758 + t2780;
  t2733 = t526*t2730;
  t2846 = t803*t2783;
  t2855 = t2733 + t2846;
  t2896 = t803*t2730;
  t2923 = -1.*t526*t2783;
  t2929 = t2896 + t2923;
  t2886 = -1.*t377*t2855;
  t2936 = t1025*t2929;
  t2945 = t2886 + t2936;
  t2959 = t1025*t2855;
  t2966 = t377*t2929;
  t2983 = t2959 + t2966;
  t2412 = -0.766044*t1450;
  t2420 = 0.642788*t1567;
  t2428 = t2412 + t2420;
  t2224 = -0.766044*t2223;
  t2360 = 0.642788*t2350;
  t2364 = t2224 + t2360;
  t2953 = t324*t2945;
  t2996 = t1234*t2983;
  t3026 = t2953 + t2996;
  t3112 = t1234*t2945;
  t3163 = -1.*t324*t2983;
  t3173 = t3112 + t3163;
  t1483 = 0.642788*t1450;
  t1590 = 0.766044*t1567;
  t1600 = t1483 + t1590;
  t2452 = 0.642788*t2223;
  t2474 = 0.766044*t2350;
  t2510 = t2452 + t2474;
  t2404 = t1600*t2364;
  t2537 = -1.*t2428*t2510;
  t211 = Cos(var1[8]);
  t3282 = -0.766044*t3026;
  t3297 = 0.642788*t3173;
  t3306 = t3282 + t3297;
  t3068 = 0.642788*t3026;
  t3203 = 0.766044*t3173;
  t3218 = t3068 + t3203;
  t3238 = t1645*t551*t2428;
  t3243 = t1665*t2364;
  t3254 = t3238 + t3243;
  t3259 = -1.*t3218*t3254;
  t3319 = t1645*t551*t1600;
  t3320 = t1665*t2510;
  t3349 = t3319 + t3320;
  t3359 = t3306*t3349;
  t3365 = t2404 + t2537;
  t3411 = -1.*t551*t1706*t3365;
  t3467 = 0. + t3259 + t3359 + t3411;
  t3490 = 1/t3467;
  t272 = Sin(var1[7]);
  t3644 = Sin(var1[8]);
  t3566 = Cos(var1[7]);
  t4179 = Cos(var1[9]);
  t4254 = Sin(var1[9]);
  t4153 = Cos(var1[10]);
  t4289 = t3566*t4179;
  t4315 = -1.*t272*t3644*t4254;
  t4324 = t4289 + t4315;
  t4235 = t4179*t272*t3644;
  t4258 = t3566*t4254;
  t4270 = t4235 + t4258;
  t4351 = Sin(var1[10]);
  t4134 = Cos(var1[11]);
  t4411 = t4153*t4324;
  t4421 = -1.*t4270*t4351;
  t4433 = t4411 + t4421;
  t4280 = t4153*t4270;
  t4370 = t4324*t4351;
  t4402 = t4280 + t4370;
  t4451 = Sin(var1[11]);
  t4131 = Cos(var1[12]);
  t4492 = t4134*t4433;
  t4521 = -1.*t4402*t4451;
  t4528 = t4492 + t4521;
  t4404 = t4134*t4402;
  t4465 = t4433*t4451;
  t4471 = t4404 + t4465;
  t4534 = Sin(var1[12]);
  t4083 = Cos(var1[13]);
  t4679 = t4131*t4528;
  t4683 = -1.*t4471*t4534;
  t4744 = t4679 + t4683;
  t4486 = t4131*t4471;
  t4555 = t4528*t4534;
  t4614 = t4486 + t4555;
  t4762 = Sin(var1[13]);
  t2570 = 0. + t2404 + t2537;
  t5013 = -1.*t4179*t272;
  t5022 = -1.*t3566*t3644*t4254;
  t5030 = t5013 + t5022;
  t4893 = t3566*t4179*t3644;
  t4949 = -1.*t272*t4254;
  t4974 = t4893 + t4949;
  t5075 = t4153*t5030;
  t5078 = -1.*t4974*t4351;
  t5079 = t5075 + t5078;
  t4994 = t4153*t4974;
  t5031 = t5030*t4351;
  t5067 = t4994 + t5031;
  t5139 = t4134*t5079;
  t5151 = -1.*t5067*t4451;
  t5170 = t5139 + t5151;
  t5074 = t4134*t5067;
  t5093 = t5079*t4451;
  t5099 = t5074 + t5093;
  t5207 = t4131*t5170;
  t5215 = -1.*t5099*t4534;
  t5217 = t5207 + t5215;
  t5138 = t4131*t5099;
  t5174 = t5170*t4534;
  t5200 = t5138 + t5174;
  t3599 = -1.*t1600*t3306;
  t3614 = t2428*t3218;
  t3624 = 0. + t3599 + t3614;
  t5395 = -1.*t211*t4153*t4254;
  t5403 = -1.*t211*t4179*t4351;
  t5483 = t5395 + t5403;
  t5341 = t211*t4179*t4153;
  t5370 = -1.*t211*t4254*t4351;
  t5375 = t5341 + t5370;
  t5516 = t4134*t5483;
  t5519 = -1.*t5375*t4451;
  t5523 = t5516 + t5519;
  t5393 = t4134*t5375;
  t5490 = t5483*t4451;
  t5501 = t5393 + t5490;
  t5610 = t4131*t5523;
  t5618 = -1.*t5501*t4534;
  t5619 = t5610 + t5618;
  t5506 = t4131*t5501;
  t5524 = t5523*t4534;
  t5536 = t5506 + t5524;
  t3680 = t2510*t3306;
  t3688 = -1.*t2364*t3218;
  t3705 = 0. + t3680 + t3688;
  t4678 = t4083*t4614;
  t4770 = t4744*t4762;
  t4791 = t4678 + t4770;
  t4821 = 0.642788*t4791;
  t4829 = t4083*t4744;
  t4834 = -1.*t4614*t4762;
  t4844 = t4829 + t4834;
  t4857 = 0.766044*t4844;
  t4875 = t4821 + t4857;
  t3719 = -1.*t1645*t551*t2428;
  t3756 = -1.*t1665*t2364;
  t3769 = 0. + t3719 + t3756;
  t5576 = t4083*t5536;
  t5637 = t5619*t4762;
  t5647 = t5576 + t5637;
  t5669 = 0.642788*t5647;
  t5698 = t4083*t5619;
  t5709 = -1.*t5536*t4762;
  t5711 = t5698 + t5709;
  t5712 = 0.766044*t5711;
  t5746 = t5669 + t5712;
  t3803 = -1.*t551*t1706*t2364;
  t3808 = t1645*t551*t3306;
  t3818 = 0. + t3803 + t3808;
  t5204 = t4083*t5200;
  t5221 = t5217*t4762;
  t5244 = t5204 + t5221;
  t5271 = 0.642788*t5244;
  t5276 = t4083*t5217;
  t5286 = -1.*t5200*t4762;
  t5297 = t5276 + t5286;
  t5304 = 0.766044*t5297;
  t5315 = t5271 + t5304;
  t3865 = t551*t1706*t2428;
  t3900 = t1665*t3306;
  t3926 = 0. + t3865 + t3900;
  t3957 = 0. + t3319 + t3320;
  t4004 = t551*t1706*t2510;
  t4006 = -1.*t1645*t551*t3218;
  t4020 = 0. + t4004 + t4006;
  t4037 = -1.*t551*t1706*t1600;
  t4049 = -1.*t1665*t3218;
  t4068 = 0. + t4037 + t4049;
  t5834 = -0.766044*t4791;
  t5841 = 0.642788*t4844;
  t5858 = t5834 + t5841;
  t5918 = -0.766044*t5647;
  t5925 = 0.642788*t5711;
  t5926 = t5918 + t5925;
  t5877 = -0.766044*t5244;
  t5879 = 0.642788*t5297;
  t5883 = t5877 + t5879;
  t6147 = -1.*t4179;
  t6151 = 1. + t6147;
  t6271 = -1.*t4153;
  t6295 = 1. + t6271;
  t6389 = -1.*t4134;
  t6399 = 1. + t6389;
  t6480 = -1.*t4131;
  t6503 = 1. + t6480;
  t6631 = -1.*t4083;
  t6640 = 1. + t6631;
  t6036 = -1.*t211;
  t6047 = 1. + t6036;
  t6071 = -0.135*t6047;
  t6087 = 0.049*t3644;
  t6093 = 0. + t6071 + t6087;
  t6168 = -0.049*t6151;
  t6184 = -0.09*t4254;
  t6230 = 0. + t6168 + t6184;
  t6250 = -0.09*t6151;
  t6254 = 0.049*t4254;
  t6258 = 0. + t6250 + t6254;
  t6298 = -0.049*t6295;
  t6306 = -0.21*t4351;
  t6320 = 0. + t6298 + t6306;
  t6336 = -0.21*t6295;
  t6379 = 0.049*t4351;
  t6380 = 0. + t6336 + t6379;
  t6410 = -0.0016*t6399;
  t6411 = -0.2707*t4451;
  t6418 = 0. + t6410 + t6411;
  t6429 = -0.2707*t6399;
  t6432 = 0.0016*t4451;
  t6442 = 0. + t6429 + t6432;
  t6516 = 0.0184*t6503;
  t6527 = -0.7055*t4534;
  t6556 = 0. + t6516 + t6527;
  t6565 = -0.7055*t6503;
  t6582 = -0.0184*t4534;
  t6604 = 0. + t6565 + t6582;
  t6654 = -0.0216*t6640;
  t6655 = -1.1135*t4762;
  t6692 = 0. + t6654 + t6655;
  t6700 = -1.1135*t6640;
  t6703 = 0.0216*t4762;
  t6706 = 0. + t6700 + t6703;
  t7062 = -1.*t573;
  t7077 = 1. + t7062;
  t7172 = -1.*t617;
  t7179 = 1. + t7172;
  t7244 = -1.*t803;
  t7249 = 1. + t7244;
  t7301 = -1.*t1025;
  t7303 = 1. + t7301;
  t7375 = -1.*t1234;
  t7381 = 1. + t7375;
  t6988 = -1.*t551;
  t7008 = 1. + t6988;
  t7180 = -0.049*t7179;
  t7183 = -0.21*t603;
  t7187 = 0. + t7180 + t7183;
  t7093 = -0.049*t7077;
  t7118 = -0.09*t636;
  t7123 = 0. + t7093 + t7118;
  t7201 = -0.21*t7179;
  t7202 = 0.049*t603;
  t7217 = 0. + t7201 + t7202;
  t7251 = -0.2707*t7249;
  t7263 = 0.0016*t526;
  t7267 = 0. + t7251 + t7263;
  t7281 = -0.0016*t7249;
  t7286 = -0.2707*t526;
  t7287 = 0. + t7281 + t7286;
  t7317 = 0.0184*t7303;
  t7334 = -0.7055*t377;
  t7339 = 0. + t7317 + t7334;
  t7358 = -0.7055*t7303;
  t7362 = -0.0184*t377;
  t7365 = 0. + t7358 + t7362;
  t7396 = -1.1135*t7381;
  t7397 = 0.0216*t324;
  t7411 = 0. + t7396 + t7397;
  t7424 = -0.0216*t7381;
  t7425 = -1.1135*t324;
  t7431 = 0. + t7424 + t7425;
  t6962 = -1.*t1645;
  t6979 = 1. + t6962;
  t6984 = 0.135*t6979;
  t6985 = 0.1305*t1645*t551;
  t7017 = 0.135*t7008;
  t7022 = 0.049*t1665;
  t7027 = 0. + t7017 + t7022;
  t7059 = t1645*t7027;
  t7136 = t1645*t1665*t7123;
  t7150 = -0.09*t7077;
  t7153 = 0.049*t636;
  t7167 = 0. + t7150 + t7153;
  t7168 = -1.*t1706*t7167;
  t7197 = t7187*t1751;
  t7240 = t7217*t1815;
  t7278 = t7267*t1833;
  t7291 = t7287*t1896;
  t7344 = t7339*t1917;
  t7372 = t7365*t1966;
  t7421 = t7411*t2022;
  t7456 = t7431*t2127;
  t7462 = 0.0306*t2223;
  t7465 = -1.1312*t2350;
  t7466 = 0. + t6984 + t6985 + t7059 + t7136 + t7168 + t7197 + t7240 + t7278 + t7291 + t7344 + t7372 + t7421 + t7456 + t7462 + t7465;
  t7495 = -0.049*t7008;
  t7502 = t551*t573*t7187;
  t7507 = 0.004500000000000004*t1665;
  t7523 = t551*t7123;
  t7541 = -1.*t551*t7217*t636;
  t7557 = t7267*t742;
  t7561 = t7287*t847;
  t7564 = t7339*t945;
  t7568 = t7365*t1075;
  t7577 = t7411*t1152;
  t7580 = t7431*t1431;
  t7589 = 0.0306*t1450;
  t7595 = -1.1312*t1567;
  t7596 = 0. + t7495 + t7502 + t7507 + t7523 + t7541 + t7557 + t7561 + t7564 + t7568 + t7577 + t7580 + t7589 + t7595;
  t6024 = 0.135*t272;
  t6034 = -0.1305*t211*t272;
  t6099 = t272*t6093;
  t6247 = t272*t3644*t6230;
  t6266 = t3566*t6258;
  t6324 = t4270*t6320;
  t6381 = t4324*t6380;
  t6423 = t4402*t6418;
  t6465 = t4433*t6442;
  t6564 = t4471*t6556;
  t6608 = t4528*t6604;
  t6698 = t4614*t6692;
  t6708 = t4744*t6706;
  t6710 = 0.0306*t4791;
  t6721 = -1.1312*t4844;
  t6749 = 0. + t6024 + t6034 + t6099 + t6247 + t6266 + t6324 + t6381 + t6423 + t6465 + t6564 + t6608 + t6698 + t6708 + t6710 + t6721;
  t6842 = -0.049*t6047;
  t6844 = -0.004500000000000004*t3644;
  t6850 = t211*t6230;
  t6851 = t211*t4179*t6320;
  t6854 = -1.*t211*t4254*t6380;
  t6870 = t5375*t6418;
  t6881 = t5483*t6442;
  t6891 = t5501*t6556;
  t6923 = t5523*t6604;
  t6928 = t5536*t6692;
  t6929 = t5619*t6706;
  t6935 = 0.0306*t5647;
  t6947 = -1.1312*t5711;
  t6949 = 0. + t6842 + t6844 + t6850 + t6851 + t6854 + t6870 + t6881 + t6891 + t6923 + t6928 + t6929 + t6935 + t6947;
  t6756 = -1.*t3566;
  t6759 = 1. + t6756;
  t6768 = -0.135*t6759;
  t6769 = -0.1305*t3566*t211;
  t6770 = t3566*t6093;
  t6773 = t3566*t3644*t6230;
  t6783 = -1.*t272*t6258;
  t6791 = t4974*t6320;
  t6795 = t5030*t6380;
  t6799 = t5067*t6418;
  t6800 = t5079*t6442;
  t6802 = t5099*t6556;
  t6812 = t5170*t6604;
  t6819 = t5200*t6692;
  t6821 = t5217*t6706;
  t6822 = 0.0306*t5244;
  t6824 = -1.1312*t5297;
  t6831 = 0. + t6768 + t6769 + t6770 + t6773 + t6783 + t6791 + t6795 + t6799 + t6800 + t6802 + t6812 + t6819 + t6821 + t6822 + t6824;
  t7654 = -0.135*t1706;
  t7671 = 0.1305*t551*t1706;
  t7683 = t1706*t7027;
  t7684 = t1706*t1665*t7123;
  t7696 = t1645*t7167;
  t7697 = t7187*t2650;
  t7704 = t7217*t2682;
  t7712 = t7267*t2730;
  t7713 = t7287*t2783;
  t7714 = t7339*t2855;
  t7741 = t7365*t2929;
  t7768 = t7411*t2945;
  t7769 = t7431*t2983;
  t7772 = 0.0306*t3026;
  t7780 = -1.1312*t3173;
  t7783 = 0. + t7654 + t7671 + t7683 + t7684 + t7696 + t7697 + t7704 + t7712 + t7713 + t7714 + t7741 + t7768 + t7769 + t7772 + t7780;
  t7494 = t2428*t7466;
  t7599 = -1.*t7596*t2364;
  t7603 = t7494 + t7599;
  t7816 = t1645*t551*t7596;
  t7818 = t1665*t7466;
  t7824 = t7816 + t7818;
  t7631 = t1600*t7466;
  t7639 = -1.*t7596*t2510;
  t7647 = t7631 + t7639;

  p_output1(0)=0. - 1.*t211*t2570*t272*t3490 - 1.*t211*t3490*t3566*t3624 + t3490*t3644*t3705;
  p_output1(1)=0. - 1.*t211*t272*t3490*t3769 + t3490*t3644*t3818 - 1.*t211*t3490*t3566*t3926;
  p_output1(2)=0. - 1.*t211*t272*t3490*t3957 + t3490*t3644*t4020 - 1.*t211*t3490*t3566*t4068;
  p_output1(3)=0.;
  p_output1(4)=0. + t2570*t3490*t4875 + t3490*t3624*t5315 + t3490*t3705*t5746;
  p_output1(5)=0. + t3490*t3769*t4875 + t3490*t3926*t5315 + t3490*t3818*t5746;
  p_output1(6)=0. + t3490*t3957*t4875 + t3490*t4068*t5315 + t3490*t4020*t5746;
  p_output1(7)=0.;
  p_output1(8)=0. + t2570*t3490*t5858 + t3490*t3624*t5883 + t3490*t3705*t5926;
  p_output1(9)=0. + t3490*t3769*t5858 + t3490*t3926*t5883 + t3490*t3818*t5926;
  p_output1(10)=0. + t3490*t3957*t5858 + t3490*t4068*t5883 + t3490*t4020*t5926;
  p_output1(11)=0.;
  p_output1(12)=t2570*t3490*t6749 + t3490*t3624*t6831 + t3490*t3705*t6949 + t3490*(-1.*t3218*t7603 + t3306*t7647 - 1.*t3365*t7783);
  p_output1(13)=t3490*t3769*t6749 + t3490*t3926*t6831 + t3490*t3818*t6949 + t3490*(-1.*t1706*t551*t7603 + t3254*t7783 - 1.*t3306*t7824);
  p_output1(14)=t3490*t3957*t6749 + t3490*t4068*t6831 + t3490*t4020*t6949 + t3490*(t1706*t551*t7647 - 1.*t3349*t7783 + t3218*t7824);
  p_output1(15)=0. + (t3259 + t3359 + t3411)*t3490;
}


       
void H_LeftToeBottom_to_RightToeBottom(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
