/*
 * Automatically Generated from Mathematica.
 * Fri 16 Mar 2018 12:16:19 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t3888;
  double t4048;
  double t3964;
  double t4001;
  double t4080;
  double t4155;
  double t4009;
  double t4116;
  double t4134;
  double t2417;
  double t4165;
  double t4169;
  double t4207;
  double t4253;
  double t4153;
  double t4223;
  double t4234;
  double t1557;
  double t4262;
  double t4266;
  double t4267;
  double t4298;
  double t4240;
  double t4269;
  double t4274;
  double t1553;
  double t4310;
  double t4315;
  double t4324;
  double t4362;
  double t4353;
  double t4356;
  double t4359;
  double t4364;
  double t4366;
  double t4376;
  double t4387;
  double t4388;
  double t4368;
  double t4392;
  double t4395;
  double t4398;
  double t4400;
  double t4405;
  double t4397;
  double t4408;
  double t4409;
  double t4413;
  double t4425;
  double t4426;
  double t4411;
  double t4428;
  double t4431;
  double t4435;
  double t4443;
  double t4446;
  double t4275;
  double t4327;
  double t4329;
  double t4341;
  double t4343;
  double t4344;
  double t4433;
  double t4451;
  double t4452;
  double t4463;
  double t4465;
  double t4466;
  double t4505;
  double t4506;
  double t4510;
  double t4512;
  double t4513;
  double t4515;
  double t4511;
  double t4519;
  double t4522;
  double t4528;
  double t4531;
  double t4532;
  double t4525;
  double t4534;
  double t4542;
  double t4551;
  double t4553;
  double t4554;
  double t4549;
  double t4556;
  double t4560;
  double t4565;
  double t4566;
  double t4573;
  double t4474;
  double t4482;
  double t4488;
  double t4461;
  double t4468;
  double t4470;
  double t4562;
  double t4576;
  double t4577;
  double t4582;
  double t4583;
  double t4587;
  double t4338;
  double t4350;
  double t4351;
  double t4489;
  double t4493;
  double t4494;
  double t4472;
  double t4498;
  double t24;
  double t4605;
  double t4606;
  double t4608;
  double t4581;
  double t4592;
  double t4597;
  double t4599;
  double t4601;
  double t4602;
  double t4603;
  double t4609;
  double t4610;
  double t4612;
  double t4613;
  double t4618;
  double t4620;
  double t4623;
  double t4624;
  double t424;
  double t4635;
  double t4626;
  double t4702;
  double t4709;
  double t4701;
  double t4719;
  double t4720;
  double t4721;
  double t4703;
  double t4712;
  double t4713;
  double t4722;
  double t4700;
  double t4736;
  double t4737;
  double t4738;
  double t4718;
  double t4724;
  double t4728;
  double t4740;
  double t4699;
  double t4745;
  double t4747;
  double t4749;
  double t4734;
  double t4742;
  double t4743;
  double t4750;
  double t4696;
  double t4760;
  double t4761;
  double t4762;
  double t4744;
  double t4755;
  double t4757;
  double t4763;
  double t4500;
  double t4779;
  double t4780;
  double t4781;
  double t4774;
  double t4776;
  double t4777;
  double t4788;
  double t4789;
  double t4790;
  double t4778;
  double t4782;
  double t4786;
  double t4795;
  double t4798;
  double t4801;
  double t4787;
  double t4791;
  double t4792;
  double t4808;
  double t4809;
  double t4810;
  double t4794;
  double t4804;
  double t4805;
  double t4627;
  double t4628;
  double t4629;
  double t4829;
  double t4830;
  double t4831;
  double t4824;
  double t4825;
  double t4826;
  double t4836;
  double t4837;
  double t4838;
  double t4827;
  double t4832;
  double t4833;
  double t4842;
  double t4843;
  double t4844;
  double t4834;
  double t4839;
  double t4840;
  double t4636;
  double t4640;
  double t4641;
  double t4758;
  double t4764;
  double t4765;
  double t4766;
  double t4767;
  double t4769;
  double t4770;
  double t4771;
  double t4772;
  double t4644;
  double t4645;
  double t4649;
  double t4841;
  double t4845;
  double t4846;
  double t4847;
  double t4849;
  double t4850;
  double t4852;
  double t4853;
  double t4855;
  double t4651;
  double t4652;
  double t4653;
  double t4807;
  double t4811;
  double t4813;
  double t4814;
  double t4815;
  double t4817;
  double t4818;
  double t4820;
  double t4821;
  double t4655;
  double t4657;
  double t4658;
  double t4668;
  double t4671;
  double t4672;
  double t4673;
  double t4686;
  double t4688;
  double t4689;
  double t4869;
  double t4871;
  double t4872;
  double t4879;
  double t4880;
  double t4881;
  double t4874;
  double t4875;
  double t4877;
  double t4902;
  double t4903;
  double t4912;
  double t4913;
  double t4922;
  double t4923;
  double t4932;
  double t4933;
  double t4942;
  double t4943;
  double t4896;
  double t4897;
  double t4898;
  double t4899;
  double t4900;
  double t4904;
  double t4905;
  double t4906;
  double t4908;
  double t4909;
  double t4910;
  double t4914;
  double t4915;
  double t4916;
  double t4918;
  double t4919;
  double t4920;
  double t4924;
  double t4925;
  double t4926;
  double t4928;
  double t4929;
  double t4930;
  double t4934;
  double t4935;
  double t4936;
  double t4938;
  double t4939;
  double t4940;
  double t4944;
  double t4945;
  double t4946;
  double t4948;
  double t4949;
  double t4950;
  double t5000;
  double t5001;
  double t5010;
  double t5011;
  double t5020;
  double t5021;
  double t5030;
  double t5031;
  double t5040;
  double t5041;
  double t4994;
  double t4995;
  double t5012;
  double t5013;
  double t5014;
  double t5002;
  double t5003;
  double t5004;
  double t5016;
  double t5017;
  double t5018;
  double t5022;
  double t5023;
  double t5024;
  double t5026;
  double t5027;
  double t5028;
  double t5032;
  double t5033;
  double t5034;
  double t5036;
  double t5037;
  double t5038;
  double t5042;
  double t5043;
  double t5044;
  double t5046;
  double t5047;
  double t5048;
  double t4990;
  double t4991;
  double t4992;
  double t4993;
  double t4996;
  double t4997;
  double t4998;
  double t4999;
  double t5005;
  double t5006;
  double t5007;
  double t5008;
  double t5009;
  double t5015;
  double t5019;
  double t5025;
  double t5029;
  double t5035;
  double t5039;
  double t5045;
  double t5049;
  double t5050;
  double t5051;
  double t5052;
  double t5054;
  double t5055;
  double t5056;
  double t5057;
  double t5058;
  double t5059;
  double t5060;
  double t5061;
  double t5062;
  double t5063;
  double t5064;
  double t5065;
  double t5066;
  double t5067;
  double t4894;
  double t4895;
  double t4901;
  double t4907;
  double t4911;
  double t4917;
  double t4921;
  double t4927;
  double t4931;
  double t4937;
  double t4941;
  double t4947;
  double t4951;
  double t4952;
  double t4953;
  double t4954;
  double t4975;
  double t4976;
  double t4977;
  double t4978;
  double t4979;
  double t4980;
  double t4981;
  double t4982;
  double t4983;
  double t4984;
  double t4985;
  double t4986;
  double t4987;
  double t4988;
  double t4956;
  double t4957;
  double t4958;
  double t4959;
  double t4960;
  double t4961;
  double t4962;
  double t4963;
  double t4964;
  double t4965;
  double t4966;
  double t4967;
  double t4968;
  double t4969;
  double t4970;
  double t4971;
  double t4972;
  double t4973;
  double t5075;
  double t5076;
  double t5077;
  double t5078;
  double t5079;
  double t5080;
  double t5081;
  double t5082;
  double t5083;
  double t5084;
  double t5085;
  double t5086;
  double t5087;
  double t5088;
  double t5089;
  double t5090;
  double t5053;
  double t5068;
  double t5069;
  double t5098;
  double t5099;
  double t5100;
  double t5071;
  double t5072;
  double t5073;
  t3888 = Cos(var1[1]);
  t4048 = Cos(var1[3]);
  t3964 = Cos(var1[2]);
  t4001 = Sin(var1[3]);
  t4080 = Sin(var1[2]);
  t4155 = Cos(var1[4]);
  t4009 = -1.*t3888*t3964*t4001;
  t4116 = -1.*t4048*t3888*t4080;
  t4134 = t4009 + t4116;
  t2417 = Sin(var1[4]);
  t4165 = t4048*t3888*t3964;
  t4169 = -1.*t3888*t4001*t4080;
  t4207 = t4165 + t4169;
  t4253 = Cos(var1[5]);
  t4153 = t2417*t4134;
  t4223 = t4155*t4207;
  t4234 = t4153 + t4223;
  t1557 = Sin(var1[5]);
  t4262 = t4155*t4134;
  t4266 = -1.*t2417*t4207;
  t4267 = t4262 + t4266;
  t4298 = Cos(var1[6]);
  t4240 = -1.*t1557*t4234;
  t4269 = t4253*t4267;
  t4274 = t4240 + t4269;
  t1553 = Sin(var1[6]);
  t4310 = t4253*t4234;
  t4315 = t1557*t4267;
  t4324 = t4310 + t4315;
  t4362 = Sin(var1[0]);
  t4353 = Cos(var1[0]);
  t4356 = Sin(var1[1]);
  t4359 = t4353*t3964*t4356;
  t4364 = -1.*t4362*t4080;
  t4366 = t4359 + t4364;
  t4376 = -1.*t3964*t4362;
  t4387 = -1.*t4353*t4356*t4080;
  t4388 = t4376 + t4387;
  t4368 = -1.*t4001*t4366;
  t4392 = t4048*t4388;
  t4395 = t4368 + t4392;
  t4398 = t4048*t4366;
  t4400 = t4001*t4388;
  t4405 = t4398 + t4400;
  t4397 = t2417*t4395;
  t4408 = t4155*t4405;
  t4409 = t4397 + t4408;
  t4413 = t4155*t4395;
  t4425 = -1.*t2417*t4405;
  t4426 = t4413 + t4425;
  t4411 = -1.*t1557*t4409;
  t4428 = t4253*t4426;
  t4431 = t4411 + t4428;
  t4435 = t4253*t4409;
  t4443 = t1557*t4426;
  t4446 = t4435 + t4443;
  t4275 = t1553*t4274;
  t4327 = t4298*t4324;
  t4329 = t4275 + t4327;
  t4341 = t4298*t4274;
  t4343 = -1.*t1553*t4324;
  t4344 = t4341 + t4343;
  t4433 = t1553*t4431;
  t4451 = t4298*t4446;
  t4452 = t4433 + t4451;
  t4463 = t4298*t4431;
  t4465 = -1.*t1553*t4446;
  t4466 = t4463 + t4465;
  t4505 = t3964*t4362*t4356;
  t4506 = t4353*t4080;
  t4510 = t4505 + t4506;
  t4512 = t4353*t3964;
  t4513 = -1.*t4362*t4356*t4080;
  t4515 = t4512 + t4513;
  t4511 = -1.*t4001*t4510;
  t4519 = t4048*t4515;
  t4522 = t4511 + t4519;
  t4528 = t4048*t4510;
  t4531 = t4001*t4515;
  t4532 = t4528 + t4531;
  t4525 = t2417*t4522;
  t4534 = t4155*t4532;
  t4542 = t4525 + t4534;
  t4551 = t4155*t4522;
  t4553 = -1.*t2417*t4532;
  t4554 = t4551 + t4553;
  t4549 = -1.*t1557*t4542;
  t4556 = t4253*t4554;
  t4560 = t4549 + t4556;
  t4565 = t4253*t4542;
  t4566 = t1557*t4554;
  t4573 = t4565 + t4566;
  t4474 = -0.766044*t4329;
  t4482 = 0.642788*t4344;
  t4488 = t4474 + t4482;
  t4461 = -0.766044*t4452;
  t4468 = 0.642788*t4466;
  t4470 = t4461 + t4468;
  t4562 = t1553*t4560;
  t4576 = t4298*t4573;
  t4577 = t4562 + t4576;
  t4582 = t4298*t4560;
  t4583 = -1.*t1553*t4573;
  t4587 = t4582 + t4583;
  t4338 = 0.642788*t4329;
  t4350 = 0.766044*t4344;
  t4351 = t4338 + t4350;
  t4489 = 0.642788*t4452;
  t4493 = 0.766044*t4466;
  t4494 = t4489 + t4493;
  t4472 = t4351*t4470;
  t4498 = -1.*t4488*t4494;
  t24 = Cos(var1[8]);
  t4605 = -0.766044*t4577;
  t4606 = 0.642788*t4587;
  t4608 = t4605 + t4606;
  t4581 = 0.642788*t4577;
  t4592 = 0.766044*t4587;
  t4597 = t4581 + t4592;
  t4599 = t4353*t3888*t4488;
  t4601 = t4356*t4470;
  t4602 = t4599 + t4601;
  t4603 = -1.*t4597*t4602;
  t4609 = t4353*t3888*t4351;
  t4610 = t4356*t4494;
  t4612 = t4609 + t4610;
  t4613 = t4608*t4612;
  t4618 = t4472 + t4498;
  t4620 = -1.*t3888*t4362*t4618;
  t4623 = 0. + t4603 + t4613 + t4620;
  t4624 = 1/t4623;
  t424 = Sin(var1[7]);
  t4635 = Sin(var1[8]);
  t4626 = Cos(var1[7]);
  t4702 = Cos(var1[9]);
  t4709 = Sin(var1[9]);
  t4701 = Cos(var1[10]);
  t4719 = t4626*t4702;
  t4720 = -1.*t424*t4635*t4709;
  t4721 = t4719 + t4720;
  t4703 = t4702*t424*t4635;
  t4712 = t4626*t4709;
  t4713 = t4703 + t4712;
  t4722 = Sin(var1[10]);
  t4700 = Cos(var1[11]);
  t4736 = t4701*t4721;
  t4737 = -1.*t4713*t4722;
  t4738 = t4736 + t4737;
  t4718 = t4701*t4713;
  t4724 = t4721*t4722;
  t4728 = t4718 + t4724;
  t4740 = Sin(var1[11]);
  t4699 = Cos(var1[12]);
  t4745 = t4700*t4738;
  t4747 = -1.*t4728*t4740;
  t4749 = t4745 + t4747;
  t4734 = t4700*t4728;
  t4742 = t4738*t4740;
  t4743 = t4734 + t4742;
  t4750 = Sin(var1[12]);
  t4696 = Cos(var1[13]);
  t4760 = t4699*t4749;
  t4761 = -1.*t4743*t4750;
  t4762 = t4760 + t4761;
  t4744 = t4699*t4743;
  t4755 = t4749*t4750;
  t4757 = t4744 + t4755;
  t4763 = Sin(var1[13]);
  t4500 = 0. + t4472 + t4498;
  t4779 = -1.*t4702*t424;
  t4780 = -1.*t4626*t4635*t4709;
  t4781 = t4779 + t4780;
  t4774 = t4626*t4702*t4635;
  t4776 = -1.*t424*t4709;
  t4777 = t4774 + t4776;
  t4788 = t4701*t4781;
  t4789 = -1.*t4777*t4722;
  t4790 = t4788 + t4789;
  t4778 = t4701*t4777;
  t4782 = t4781*t4722;
  t4786 = t4778 + t4782;
  t4795 = t4700*t4790;
  t4798 = -1.*t4786*t4740;
  t4801 = t4795 + t4798;
  t4787 = t4700*t4786;
  t4791 = t4790*t4740;
  t4792 = t4787 + t4791;
  t4808 = t4699*t4801;
  t4809 = -1.*t4792*t4750;
  t4810 = t4808 + t4809;
  t4794 = t4699*t4792;
  t4804 = t4801*t4750;
  t4805 = t4794 + t4804;
  t4627 = -1.*t4351*t4608;
  t4628 = t4488*t4597;
  t4629 = 0. + t4627 + t4628;
  t4829 = -1.*t24*t4701*t4709;
  t4830 = -1.*t24*t4702*t4722;
  t4831 = t4829 + t4830;
  t4824 = t24*t4702*t4701;
  t4825 = -1.*t24*t4709*t4722;
  t4826 = t4824 + t4825;
  t4836 = t4700*t4831;
  t4837 = -1.*t4826*t4740;
  t4838 = t4836 + t4837;
  t4827 = t4700*t4826;
  t4832 = t4831*t4740;
  t4833 = t4827 + t4832;
  t4842 = t4699*t4838;
  t4843 = -1.*t4833*t4750;
  t4844 = t4842 + t4843;
  t4834 = t4699*t4833;
  t4839 = t4838*t4750;
  t4840 = t4834 + t4839;
  t4636 = t4494*t4608;
  t4640 = -1.*t4470*t4597;
  t4641 = 0. + t4636 + t4640;
  t4758 = t4696*t4757;
  t4764 = t4762*t4763;
  t4765 = t4758 + t4764;
  t4766 = 0.642788*t4765;
  t4767 = t4696*t4762;
  t4769 = -1.*t4757*t4763;
  t4770 = t4767 + t4769;
  t4771 = 0.766044*t4770;
  t4772 = t4766 + t4771;
  t4644 = -1.*t4353*t3888*t4488;
  t4645 = -1.*t4356*t4470;
  t4649 = 0. + t4644 + t4645;
  t4841 = t4696*t4840;
  t4845 = t4844*t4763;
  t4846 = t4841 + t4845;
  t4847 = 0.642788*t4846;
  t4849 = t4696*t4844;
  t4850 = -1.*t4840*t4763;
  t4852 = t4849 + t4850;
  t4853 = 0.766044*t4852;
  t4855 = t4847 + t4853;
  t4651 = -1.*t3888*t4362*t4470;
  t4652 = t4353*t3888*t4608;
  t4653 = 0. + t4651 + t4652;
  t4807 = t4696*t4805;
  t4811 = t4810*t4763;
  t4813 = t4807 + t4811;
  t4814 = 0.642788*t4813;
  t4815 = t4696*t4810;
  t4817 = -1.*t4805*t4763;
  t4818 = t4815 + t4817;
  t4820 = 0.766044*t4818;
  t4821 = t4814 + t4820;
  t4655 = t3888*t4362*t4488;
  t4657 = t4356*t4608;
  t4658 = 0. + t4655 + t4657;
  t4668 = 0. + t4609 + t4610;
  t4671 = t3888*t4362*t4494;
  t4672 = -1.*t4353*t3888*t4597;
  t4673 = 0. + t4671 + t4672;
  t4686 = -1.*t3888*t4362*t4351;
  t4688 = -1.*t4356*t4597;
  t4689 = 0. + t4686 + t4688;
  t4869 = -0.766044*t4765;
  t4871 = 0.642788*t4770;
  t4872 = t4869 + t4871;
  t4879 = -0.766044*t4846;
  t4880 = 0.642788*t4852;
  t4881 = t4879 + t4880;
  t4874 = -0.766044*t4813;
  t4875 = 0.642788*t4818;
  t4877 = t4874 + t4875;
  t4902 = -1.*t4702;
  t4903 = 1. + t4902;
  t4912 = -1.*t4701;
  t4913 = 1. + t4912;
  t4922 = -1.*t4700;
  t4923 = 1. + t4922;
  t4932 = -1.*t4699;
  t4933 = 1. + t4932;
  t4942 = -1.*t4696;
  t4943 = 1. + t4942;
  t4896 = -1.*t24;
  t4897 = 1. + t4896;
  t4898 = -0.135*t4897;
  t4899 = 0.049*t4635;
  t4900 = 0. + t4898 + t4899;
  t4904 = -0.049*t4903;
  t4905 = -0.09*t4709;
  t4906 = 0. + t4904 + t4905;
  t4908 = -0.09*t4903;
  t4909 = 0.049*t4709;
  t4910 = 0. + t4908 + t4909;
  t4914 = -0.049*t4913;
  t4915 = -0.21*t4722;
  t4916 = 0. + t4914 + t4915;
  t4918 = -0.21*t4913;
  t4919 = 0.049*t4722;
  t4920 = 0. + t4918 + t4919;
  t4924 = -0.0016*t4923;
  t4925 = -0.2707*t4740;
  t4926 = 0. + t4924 + t4925;
  t4928 = -0.2707*t4923;
  t4929 = 0.0016*t4740;
  t4930 = 0. + t4928 + t4929;
  t4934 = 0.0184*t4933;
  t4935 = -0.7055*t4750;
  t4936 = 0. + t4934 + t4935;
  t4938 = -0.7055*t4933;
  t4939 = -0.0184*t4750;
  t4940 = 0. + t4938 + t4939;
  t4944 = -0.0216*t4943;
  t4945 = -1.1135*t4763;
  t4946 = 0. + t4944 + t4945;
  t4948 = -1.1135*t4943;
  t4949 = 0.0216*t4763;
  t4950 = 0. + t4948 + t4949;
  t5000 = -1.*t3964;
  t5001 = 1. + t5000;
  t5010 = -1.*t4048;
  t5011 = 1. + t5010;
  t5020 = -1.*t4155;
  t5021 = 1. + t5020;
  t5030 = -1.*t4253;
  t5031 = 1. + t5030;
  t5040 = -1.*t4298;
  t5041 = 1. + t5040;
  t4994 = -1.*t3888;
  t4995 = 1. + t4994;
  t5012 = -0.049*t5011;
  t5013 = -0.21*t4001;
  t5014 = 0. + t5012 + t5013;
  t5002 = -0.049*t5001;
  t5003 = -0.09*t4080;
  t5004 = 0. + t5002 + t5003;
  t5016 = -0.21*t5011;
  t5017 = 0.049*t4001;
  t5018 = 0. + t5016 + t5017;
  t5022 = -0.2707*t5021;
  t5023 = 0.0016*t2417;
  t5024 = 0. + t5022 + t5023;
  t5026 = -0.0016*t5021;
  t5027 = -0.2707*t2417;
  t5028 = 0. + t5026 + t5027;
  t5032 = 0.0184*t5031;
  t5033 = -0.7055*t1557;
  t5034 = 0. + t5032 + t5033;
  t5036 = -0.7055*t5031;
  t5037 = -0.0184*t1557;
  t5038 = 0. + t5036 + t5037;
  t5042 = -1.1135*t5041;
  t5043 = 0.0216*t1553;
  t5044 = 0. + t5042 + t5043;
  t5046 = -0.0216*t5041;
  t5047 = -1.1135*t1553;
  t5048 = 0. + t5046 + t5047;
  t4990 = -1.*t4353;
  t4991 = 1. + t4990;
  t4992 = 0.135*t4991;
  t4993 = 0.1305*t4353*t3888;
  t4996 = 0.135*t4995;
  t4997 = 0.049*t4356;
  t4998 = 0. + t4996 + t4997;
  t4999 = t4353*t4998;
  t5005 = t4353*t4356*t5004;
  t5006 = -0.09*t5001;
  t5007 = 0.049*t4080;
  t5008 = 0. + t5006 + t5007;
  t5009 = -1.*t4362*t5008;
  t5015 = t5014*t4366;
  t5019 = t5018*t4388;
  t5025 = t5024*t4395;
  t5029 = t5028*t4405;
  t5035 = t5034*t4409;
  t5039 = t5038*t4426;
  t5045 = t5044*t4431;
  t5049 = t5048*t4446;
  t5050 = 0.0306*t4452;
  t5051 = -1.1312*t4466;
  t5052 = 0. + t4992 + t4993 + t4999 + t5005 + t5009 + t5015 + t5019 + t5025 + t5029 + t5035 + t5039 + t5045 + t5049 + t5050 + t5051;
  t5054 = -0.049*t4995;
  t5055 = t3888*t3964*t5014;
  t5056 = 0.004500000000000004*t4356;
  t5057 = t3888*t5004;
  t5058 = -1.*t3888*t5018*t4080;
  t5059 = t5024*t4134;
  t5060 = t5028*t4207;
  t5061 = t5034*t4234;
  t5062 = t5038*t4267;
  t5063 = t5044*t4274;
  t5064 = t5048*t4324;
  t5065 = 0.0306*t4329;
  t5066 = -1.1312*t4344;
  t5067 = 0. + t5054 + t5055 + t5056 + t5057 + t5058 + t5059 + t5060 + t5061 + t5062 + t5063 + t5064 + t5065 + t5066;
  t4894 = 0.135*t424;
  t4895 = -0.1305*t24*t424;
  t4901 = t424*t4900;
  t4907 = t424*t4635*t4906;
  t4911 = t4626*t4910;
  t4917 = t4713*t4916;
  t4921 = t4721*t4920;
  t4927 = t4728*t4926;
  t4931 = t4738*t4930;
  t4937 = t4743*t4936;
  t4941 = t4749*t4940;
  t4947 = t4757*t4946;
  t4951 = t4762*t4950;
  t4952 = 0.0306*t4765;
  t4953 = -1.1312*t4770;
  t4954 = 0. + t4894 + t4895 + t4901 + t4907 + t4911 + t4917 + t4921 + t4927 + t4931 + t4937 + t4941 + t4947 + t4951 + t4952 + t4953;
  t4975 = -0.049*t4897;
  t4976 = -0.004500000000000004*t4635;
  t4977 = t24*t4906;
  t4978 = t24*t4702*t4916;
  t4979 = -1.*t24*t4709*t4920;
  t4980 = t4826*t4926;
  t4981 = t4831*t4930;
  t4982 = t4833*t4936;
  t4983 = t4838*t4940;
  t4984 = t4840*t4946;
  t4985 = t4844*t4950;
  t4986 = 0.0306*t4846;
  t4987 = -1.1312*t4852;
  t4988 = 0. + t4975 + t4976 + t4977 + t4978 + t4979 + t4980 + t4981 + t4982 + t4983 + t4984 + t4985 + t4986 + t4987;
  t4956 = -1.*t4626;
  t4957 = 1. + t4956;
  t4958 = -0.135*t4957;
  t4959 = -0.1305*t4626*t24;
  t4960 = t4626*t4900;
  t4961 = t4626*t4635*t4906;
  t4962 = -1.*t424*t4910;
  t4963 = t4777*t4916;
  t4964 = t4781*t4920;
  t4965 = t4786*t4926;
  t4966 = t4790*t4930;
  t4967 = t4792*t4936;
  t4968 = t4801*t4940;
  t4969 = t4805*t4946;
  t4970 = t4810*t4950;
  t4971 = 0.0306*t4813;
  t4972 = -1.1312*t4818;
  t4973 = 0. + t4958 + t4959 + t4960 + t4961 + t4962 + t4963 + t4964 + t4965 + t4966 + t4967 + t4968 + t4969 + t4970 + t4971 + t4972;
  t5075 = -0.135*t4362;
  t5076 = 0.1305*t3888*t4362;
  t5077 = t4362*t4998;
  t5078 = t4362*t4356*t5004;
  t5079 = t4353*t5008;
  t5080 = t5014*t4510;
  t5081 = t5018*t4515;
  t5082 = t5024*t4522;
  t5083 = t5028*t4532;
  t5084 = t5034*t4542;
  t5085 = t5038*t4554;
  t5086 = t5044*t4560;
  t5087 = t5048*t4573;
  t5088 = 0.0306*t4577;
  t5089 = -1.1312*t4587;
  t5090 = 0. + t5075 + t5076 + t5077 + t5078 + t5079 + t5080 + t5081 + t5082 + t5083 + t5084 + t5085 + t5086 + t5087 + t5088 + t5089;
  t5053 = t4488*t5052;
  t5068 = -1.*t5067*t4470;
  t5069 = t5053 + t5068;
  t5098 = t4353*t3888*t5067;
  t5099 = t4356*t5052;
  t5100 = t5098 + t5099;
  t5071 = t4351*t5052;
  t5072 = -1.*t5067*t4494;
  t5073 = t5071 + t5072;
  p_output1[0]=0. - 1.*t24*t424*t4500*t4624 - 1.*t24*t4624*t4626*t4629 + t4624*t4635*t4641;
  p_output1[1]=0. - 1.*t24*t424*t4624*t4649 + t4624*t4635*t4653 - 1.*t24*t4624*t4626*t4658;
  p_output1[2]=0. - 1.*t24*t424*t4624*t4668 + t4624*t4635*t4673 - 1.*t24*t4624*t4626*t4689;
  p_output1[3]=0.;
  p_output1[4]=0. + t4500*t4624*t4772 + t4624*t4629*t4821 + t4624*t4641*t4855;
  p_output1[5]=0. + t4624*t4649*t4772 + t4624*t4658*t4821 + t4624*t4653*t4855;
  p_output1[6]=0. + t4624*t4668*t4772 + t4624*t4689*t4821 + t4624*t4673*t4855;
  p_output1[7]=0.;
  p_output1[8]=0. + t4500*t4624*t4872 + t4624*t4629*t4877 + t4624*t4641*t4881;
  p_output1[9]=0. + t4624*t4649*t4872 + t4624*t4658*t4877 + t4624*t4653*t4881;
  p_output1[10]=0. + t4624*t4668*t4872 + t4624*t4689*t4877 + t4624*t4673*t4881;
  p_output1[11]=0.;
  p_output1[12]=t4500*t4624*t4954 + t4624*t4629*t4973 + t4624*t4641*t4988 + t4624*(-1.*t4597*t5069 + t4608*t5073 - 1.*t4618*t5090);
  p_output1[13]=t4624*t4649*t4954 + t4624*t4658*t4973 + t4624*t4653*t4988 + t4624*(-1.*t3888*t4362*t5069 + t4602*t5090 - 1.*t4608*t5100);
  p_output1[14]=t4624*t4668*t4954 + t4624*t4689*t4973 + t4624*t4673*t4988 + t4624*(t3888*t4362*t5073 - 1.*t4612*t5090 + t4597*t5100);
  p_output1[15]=0. + (t4603 + t4613 + t4620)*t4624;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 14 && ncols == 1) && 
      !(mrows == 1 && ncols == 14))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 4, (mwSize) 4, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "H_LeftToeBottom_to_RightToeBottom_mex.hh"

namespace SymExpression
{

void H_LeftToeBottom_to_RightToeBottom_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
