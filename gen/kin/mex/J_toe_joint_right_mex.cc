/*
 * Automatically Generated from Mathematica.
 * Mon 6 Nov 2017 23:12:00 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1481;
  double t2614;
  double t1946;
  double t2215;
  double t2703;
  double t833;
  double t1061;
  double t1253;
  double t1373;
  double t1667;
  double t2448;
  double t2722;
  double t2725;
  double t3112;
  double t4419;
  double t4451;
  double t4555;
  double t702;
  double t5434;
  double t5559;
  double t7817;
  double t8157;
  double t8167;
  double t8172;
  double t8227;
  double t8238;
  double t8239;
  double t8241;
  double t8319;
  double t8322;
  double t8327;
  double t8337;
  double t8341;
  double t8352;
  double t8367;
  double t8396;
  double t8399;
  double t8412;
  double t8425;
  double t8429;
  double t8430;
  double t8447;
  double t8451;
  double t8452;
  double t8461;
  double t8478;
  double t8482;
  double t8483;
  double t8519;
  double t8522;
  double t8524;
  double t8529;
  double t8530;
  double t8534;
  double t8543;
  double t8552;
  double t8557;
  double t8558;
  double t8579;
  double t8582;
  double t8590;
  double t1266;
  double t1409;
  double t1427;
  double t1687;
  double t1929;
  double t3157;
  double t3398;
  double t3985;
  double t3986;
  double t4734;
  double t4982;
  double t5026;
  double t8622;
  double t8623;
  double t8626;
  double t8630;
  double t8635;
  double t8636;
  double t8194;
  double t8230;
  double t8236;
  double t8644;
  double t8646;
  double t8651;
  double t8260;
  double t8308;
  double t8313;
  double t8363;
  double t8373;
  double t8389;
  double t8654;
  double t8656;
  double t8658;
  double t8671;
  double t8674;
  double t8677;
  double t8414;
  double t8417;
  double t8424;
  double t8460;
  double t8473;
  double t8477;
  double t8679;
  double t8680;
  double t8681;
  double t8684;
  double t8685;
  double t8686;
  double t8500;
  double t8505;
  double t8513;
  double t8539;
  double t8548;
  double t8550;
  double t8688;
  double t8689;
  double t8691;
  double t8696;
  double t8697;
  double t8699;
  double t8564;
  double t8573;
  double t8575;
  double t8702;
  double t8703;
  double t8706;
  double t8710;
  double t8712;
  double t8713;
  double t8739;
  double t8740;
  double t8741;
  double t8743;
  double t8744;
  double t8745;
  double t8751;
  double t8752;
  double t8753;
  double t8755;
  double t8756;
  double t8757;
  double t8760;
  double t8761;
  double t8762;
  double t8764;
  double t8765;
  double t8766;
  double t8768;
  double t8769;
  double t8771;
  double t8773;
  double t8774;
  double t8775;
  double t8777;
  double t8778;
  double t8779;
  double t8793;
  double t8794;
  double t8795;
  double t8797;
  double t8798;
  double t8799;
  double t8805;
  double t8806;
  double t8807;
  double t8809;
  double t8810;
  double t8811;
  double t8813;
  double t8814;
  double t8815;
  double t8817;
  double t8818;
  double t8819;
  double t8821;
  double t8822;
  double t8823;
  double t8825;
  double t8826;
  double t8827;
  double t8829;
  double t8830;
  double t8831;
  double t8845;
  double t8846;
  double t8847;
  double t8849;
  double t8850;
  double t8851;
  double t8857;
  double t8858;
  double t8859;
  double t8861;
  double t8862;
  double t8863;
  double t8865;
  double t8866;
  double t8867;
  double t8869;
  double t8870;
  double t8871;
  double t8873;
  double t8874;
  double t8875;
  double t8877;
  double t8878;
  double t8879;
  double t8881;
  double t8882;
  double t8883;
  double t8895;
  double t8896;
  double t8897;
  double t8903;
  double t8904;
  double t8899;
  double t8900;
  double t8901;
  double t8908;
  double t8909;
  double t8910;
  double t8912;
  double t8913;
  double t8914;
  double t8916;
  double t8917;
  double t8918;
  double t8920;
  double t8921;
  double t8922;
  double t8924;
  double t8925;
  double t8926;
  double t8928;
  double t8929;
  double t8930;
  double t8941;
  double t8942;
  double t8943;
  double t8949;
  double t8950;
  double t8951;
  double t8946;
  double t8947;
  double t8955;
  double t8956;
  double t8957;
  double t8959;
  double t8960;
  double t8961;
  double t8963;
  double t8964;
  double t8965;
  double t8967;
  double t8968;
  double t8969;
  double t8971;
  double t8972;
  double t8973;
  double t8975;
  double t8976;
  double t8977;
  double t8994;
  double t8995;
  double t8996;
  double t8990;
  double t8991;
  double t8992;
  double t9000;
  double t9001;
  double t9002;
  double t9004;
  double t9005;
  double t9006;
  double t9008;
  double t9009;
  double t9010;
  double t9012;
  double t9013;
  double t9014;
  double t9016;
  double t9017;
  double t9018;
  double t9020;
  double t9021;
  double t9022;
  double t9035;
  double t9036;
  double t9041;
  double t9042;
  double t9043;
  double t9045;
  double t9046;
  double t9047;
  double t9049;
  double t9050;
  double t9051;
  double t9053;
  double t9054;
  double t9055;
  double t9057;
  double t9058;
  double t9059;
  double t9061;
  double t9062;
  double t9063;
  double t9075;
  double t9076;
  double t9077;
  double t9082;
  double t9083;
  double t9079;
  double t9080;
  double t9087;
  double t9088;
  double t9089;
  double t9091;
  double t9092;
  double t9093;
  double t9095;
  double t9096;
  double t9097;
  double t9099;
  double t9100;
  double t9101;
  double t9103;
  double t9104;
  double t9105;
  double t9107;
  double t9108;
  double t9109;
  double t8993;
  double t8997;
  double t8998;
  double t8999;
  double t9003;
  double t9007;
  double t9011;
  double t9015;
  double t9019;
  double t9023;
  double t9024;
  double t9025;
  double t9026;
  double t9027;
  double t9028;
  double t9029;
  double t9030;
  double t9031;
  double t8662;
  double t8666;
  double t8667;
  double t9137;
  double t9138;
  double t9139;
  double t9141;
  double t9142;
  double t9143;
  double t9145;
  double t9146;
  double t9147;
  double t9149;
  double t9150;
  double t9151;
  double t9123;
  double t9124;
  double t9125;
  double t9127;
  double t9128;
  double t9163;
  double t9164;
  double t9165;
  double t9167;
  double t9168;
  double t9169;
  double t9176;
  double t9177;
  double t9178;
  double t9180;
  double t9181;
  double t9182;
  double t9184;
  double t9185;
  double t9186;
  double t9188;
  double t9189;
  double t9190;
  double t9202;
  double t9203;
  double t9204;
  double t9206;
  double t9207;
  double t9208;
  double t9216;
  double t9217;
  double t9218;
  double t9220;
  double t9221;
  double t9222;
  double t9224;
  double t9225;
  double t9226;
  double t9228;
  double t9229;
  double t9230;
  double t9248;
  double t9249;
  double t9250;
  double t9253;
  double t9254;
  double t9256;
  double t9257;
  double t9258;
  double t9260;
  double t9261;
  double t9262;
  double t9264;
  double t9265;
  double t9266;
  double t9241;
  double t9242;
  double t9244;
  double t9245;
  double t9246;
  double t9278;
  double t9279;
  double t9280;
  double t9282;
  double t9283;
  double t9284;
  double t9286;
  double t9287;
  double t9288;
  double t9290;
  double t9291;
  double t9292;
  double t9294;
  double t9295;
  double t9296;
  double t9298;
  double t9299;
  double t9300;
  double t9302;
  double t9303;
  double t9304;
  double t9316;
  double t9317;
  double t9318;
  double t9320;
  double t9321;
  double t9322;
  double t9324;
  double t9325;
  double t9326;
  double t9328;
  double t9329;
  double t9330;
  double t9332;
  double t9333;
  double t9334;
  double t9336;
  double t9337;
  double t9338;
  double t9340;
  double t9341;
  double t9342;
  double t9361;
  double t9362;
  double t9364;
  double t9365;
  double t9366;
  double t9368;
  double t9369;
  double t9353;
  double t9354;
  double t9355;
  double t9357;
  double t9358;
  double t9380;
  double t9381;
  double t9382;
  double t9385;
  double t9386;
  double t9388;
  double t9389;
  double t9391;
  double t9392;
  double t9393;
  double t9395;
  double t9396;
  double t9397;
  double t9408;
  double t9409;
  double t9410;
  double t9413;
  double t9414;
  double t9416;
  double t9417;
  double t9419;
  double t9420;
  double t9421;
  double t9423;
  double t9424;
  double t9425;
  double t9443;
  double t9444;
  double t8719;
  double t9436;
  double t9437;
  double t9439;
  double t9440;
  double t9441;
  double t9456;
  double t9457;
  double t9458;
  double t9460;
  double t9461;
  double t9463;
  double t9464;
  double t9476;
  double t9477;
  double t9478;
  double t9480;
  double t9481;
  double t9483;
  double t9484;
  double t8717;
  double t8721;
  double t9451;
  double t9495;
  double t9496;
  double t9497;
  double t9499;
  double t9500;
  double t9507;
  double t9508;
  double t9509;
  double t9467;
  double t9471;
  double t9519;
  double t9520;
  double t9521;
  double t9487;
  double t9491;
  t1481 = Sin(var1[3]);
  t2614 = Cos(var1[3]);
  t1946 = Cos(var1[5]);
  t2215 = Sin(var1[4]);
  t2703 = Sin(var1[5]);
  t833 = Cos(var1[14]);
  t1061 = -1.*t833;
  t1253 = 1. + t1061;
  t1373 = Sin(var1[14]);
  t1667 = Sin(var1[13]);
  t2448 = -1.*t1946*t1481*t2215;
  t2722 = t2614*t2703;
  t2725 = t2448 + t2722;
  t3112 = Cos(var1[13]);
  t4419 = -1.*t2614*t1946;
  t4451 = -1.*t1481*t2215*t2703;
  t4555 = t4419 + t4451;
  t702 = Cos(var1[4]);
  t5434 = t1667*t2725;
  t5559 = t3112*t4555;
  t7817 = t5434 + t5559;
  t8157 = Cos(var1[15]);
  t8167 = -1.*t8157;
  t8172 = 1. + t8167;
  t8227 = Sin(var1[15]);
  t8238 = t3112*t2725;
  t8239 = -1.*t1667*t4555;
  t8241 = t8238 + t8239;
  t8319 = -1.*t833*t702*t1481;
  t8322 = t1373*t7817;
  t8327 = t8319 + t8322;
  t8337 = Cos(var1[16]);
  t8341 = -1.*t8337;
  t8352 = 1. + t8341;
  t8367 = Sin(var1[16]);
  t8396 = t8227*t8241;
  t8399 = t8157*t8327;
  t8412 = t8396 + t8399;
  t8425 = t8157*t8241;
  t8429 = -1.*t8227*t8327;
  t8430 = t8425 + t8429;
  t8447 = Cos(var1[17]);
  t8451 = -1.*t8447;
  t8452 = 1. + t8451;
  t8461 = Sin(var1[17]);
  t8478 = -1.*t8367*t8412;
  t8482 = t8337*t8430;
  t8483 = t8478 + t8482;
  t8519 = t8337*t8412;
  t8522 = t8367*t8430;
  t8524 = t8519 + t8522;
  t8529 = Cos(var1[18]);
  t8530 = -1.*t8529;
  t8534 = 1. + t8530;
  t8543 = Sin(var1[18]);
  t8552 = t8461*t8483;
  t8557 = t8447*t8524;
  t8558 = t8552 + t8557;
  t8579 = t8447*t8483;
  t8582 = -1.*t8461*t8524;
  t8590 = t8579 + t8582;
  t1266 = -0.049*t1253;
  t1409 = -0.135*t1373;
  t1427 = 0. + t1266 + t1409;
  t1687 = 0.135*t1667;
  t1929 = 0. + t1687;
  t3157 = -1.*t3112;
  t3398 = 1. + t3157;
  t3985 = -0.135*t3398;
  t3986 = 0. + t3985;
  t4734 = -0.135*t1253;
  t4982 = 0.049*t1373;
  t5026 = 0. + t4734 + t4982;
  t8622 = t2614*t1946*t2215;
  t8623 = t1481*t2703;
  t8626 = t8622 + t8623;
  t8630 = -1.*t1946*t1481;
  t8635 = t2614*t2215*t2703;
  t8636 = t8630 + t8635;
  t8194 = -0.09*t8172;
  t8230 = 0.049*t8227;
  t8236 = 0. + t8194 + t8230;
  t8644 = t1667*t8626;
  t8646 = t3112*t8636;
  t8651 = t8644 + t8646;
  t8260 = -0.049*t8172;
  t8308 = -0.09*t8227;
  t8313 = 0. + t8260 + t8308;
  t8363 = -0.049*t8352;
  t8373 = -0.21*t8367;
  t8389 = 0. + t8363 + t8373;
  t8654 = t3112*t8626;
  t8656 = -1.*t1667*t8636;
  t8658 = t8654 + t8656;
  t8671 = t833*t2614*t702;
  t8674 = t1373*t8651;
  t8677 = t8671 + t8674;
  t8414 = -0.21*t8352;
  t8417 = 0.049*t8367;
  t8424 = 0. + t8414 + t8417;
  t8460 = -0.2707*t8452;
  t8473 = 0.0016*t8461;
  t8477 = 0. + t8460 + t8473;
  t8679 = t8227*t8658;
  t8680 = t8157*t8677;
  t8681 = t8679 + t8680;
  t8684 = t8157*t8658;
  t8685 = -1.*t8227*t8677;
  t8686 = t8684 + t8685;
  t8500 = -0.0016*t8452;
  t8505 = -0.2707*t8461;
  t8513 = 0. + t8500 + t8505;
  t8539 = 0.0184*t8534;
  t8548 = -0.7055*t8543;
  t8550 = 0. + t8539 + t8548;
  t8688 = -1.*t8367*t8681;
  t8689 = t8337*t8686;
  t8691 = t8688 + t8689;
  t8696 = t8337*t8681;
  t8697 = t8367*t8686;
  t8699 = t8696 + t8697;
  t8564 = -0.7055*t8534;
  t8573 = -0.0184*t8543;
  t8575 = 0. + t8564 + t8573;
  t8702 = t8461*t8691;
  t8703 = t8447*t8699;
  t8706 = t8702 + t8703;
  t8710 = t8447*t8691;
  t8712 = -1.*t8461*t8699;
  t8713 = t8710 + t8712;
  t8739 = t2614*t702*t1946*t1667;
  t8740 = t3112*t2614*t702*t2703;
  t8741 = t8739 + t8740;
  t8743 = t3112*t2614*t702*t1946;
  t8744 = -1.*t2614*t702*t1667*t2703;
  t8745 = t8743 + t8744;
  t8751 = -1.*t833*t2614*t2215;
  t8752 = t1373*t8741;
  t8753 = t8751 + t8752;
  t8755 = t8227*t8745;
  t8756 = t8157*t8753;
  t8757 = t8755 + t8756;
  t8760 = t8157*t8745;
  t8761 = -1.*t8227*t8753;
  t8762 = t8760 + t8761;
  t8764 = -1.*t8367*t8757;
  t8765 = t8337*t8762;
  t8766 = t8764 + t8765;
  t8768 = t8337*t8757;
  t8769 = t8367*t8762;
  t8771 = t8768 + t8769;
  t8773 = t8461*t8766;
  t8774 = t8447*t8771;
  t8775 = t8773 + t8774;
  t8777 = t8447*t8766;
  t8778 = -1.*t8461*t8771;
  t8779 = t8777 + t8778;
  t8793 = t702*t1946*t1667*t1481;
  t8794 = t3112*t702*t1481*t2703;
  t8795 = t8793 + t8794;
  t8797 = t3112*t702*t1946*t1481;
  t8798 = -1.*t702*t1667*t1481*t2703;
  t8799 = t8797 + t8798;
  t8805 = -1.*t833*t1481*t2215;
  t8806 = t1373*t8795;
  t8807 = t8805 + t8806;
  t8809 = t8227*t8799;
  t8810 = t8157*t8807;
  t8811 = t8809 + t8810;
  t8813 = t8157*t8799;
  t8814 = -1.*t8227*t8807;
  t8815 = t8813 + t8814;
  t8817 = -1.*t8367*t8811;
  t8818 = t8337*t8815;
  t8819 = t8817 + t8818;
  t8821 = t8337*t8811;
  t8822 = t8367*t8815;
  t8823 = t8821 + t8822;
  t8825 = t8461*t8819;
  t8826 = t8447*t8823;
  t8827 = t8825 + t8826;
  t8829 = t8447*t8819;
  t8830 = -1.*t8461*t8823;
  t8831 = t8829 + t8830;
  t8845 = -1.*t1946*t1667*t2215;
  t8846 = -1.*t3112*t2215*t2703;
  t8847 = t8845 + t8846;
  t8849 = -1.*t3112*t1946*t2215;
  t8850 = t1667*t2215*t2703;
  t8851 = t8849 + t8850;
  t8857 = -1.*t833*t702;
  t8858 = t1373*t8847;
  t8859 = t8857 + t8858;
  t8861 = t8227*t8851;
  t8862 = t8157*t8859;
  t8863 = t8861 + t8862;
  t8865 = t8157*t8851;
  t8866 = -1.*t8227*t8859;
  t8867 = t8865 + t8866;
  t8869 = -1.*t8367*t8863;
  t8870 = t8337*t8867;
  t8871 = t8869 + t8870;
  t8873 = t8337*t8863;
  t8874 = t8367*t8867;
  t8875 = t8873 + t8874;
  t8877 = t8461*t8871;
  t8878 = t8447*t8875;
  t8879 = t8877 + t8878;
  t8881 = t8447*t8871;
  t8882 = -1.*t8461*t8875;
  t8883 = t8881 + t8882;
  t8895 = t1946*t1481;
  t8896 = -1.*t2614*t2215*t2703;
  t8897 = t8895 + t8896;
  t8903 = t1667*t8897;
  t8904 = t8654 + t8903;
  t8899 = -1.*t1667*t8626;
  t8900 = t3112*t8897;
  t8901 = t8899 + t8900;
  t8908 = t8227*t8901;
  t8909 = t8157*t1373*t8904;
  t8910 = t8908 + t8909;
  t8912 = t8157*t8901;
  t8913 = -1.*t1373*t8227*t8904;
  t8914 = t8912 + t8913;
  t8916 = -1.*t8367*t8910;
  t8917 = t8337*t8914;
  t8918 = t8916 + t8917;
  t8920 = t8337*t8910;
  t8921 = t8367*t8914;
  t8922 = t8920 + t8921;
  t8924 = t8461*t8918;
  t8925 = t8447*t8922;
  t8926 = t8924 + t8925;
  t8928 = t8447*t8918;
  t8929 = -1.*t8461*t8922;
  t8930 = t8928 + t8929;
  t8941 = t1946*t1481*t2215;
  t8942 = -1.*t2614*t2703;
  t8943 = t8941 + t8942;
  t8949 = t3112*t8943;
  t8950 = t1667*t4555;
  t8951 = t8949 + t8950;
  t8946 = -1.*t1667*t8943;
  t8947 = t8946 + t5559;
  t8955 = t8227*t8947;
  t8956 = t8157*t1373*t8951;
  t8957 = t8955 + t8956;
  t8959 = t8157*t8947;
  t8960 = -1.*t1373*t8227*t8951;
  t8961 = t8959 + t8960;
  t8963 = -1.*t8367*t8957;
  t8964 = t8337*t8961;
  t8965 = t8963 + t8964;
  t8967 = t8337*t8957;
  t8968 = t8367*t8961;
  t8969 = t8967 + t8968;
  t8971 = t8461*t8965;
  t8972 = t8447*t8969;
  t8973 = t8971 + t8972;
  t8975 = t8447*t8965;
  t8976 = -1.*t8461*t8969;
  t8977 = t8975 + t8976;
  t8994 = t3112*t702*t1946;
  t8995 = -1.*t702*t1667*t2703;
  t8996 = t8994 + t8995;
  t8990 = -1.*t702*t1946*t1667;
  t8991 = -1.*t3112*t702*t2703;
  t8992 = t8990 + t8991;
  t9000 = t8227*t8992;
  t9001 = t8157*t1373*t8996;
  t9002 = t9000 + t9001;
  t9004 = t8157*t8992;
  t9005 = -1.*t1373*t8227*t8996;
  t9006 = t9004 + t9005;
  t9008 = -1.*t8367*t9002;
  t9009 = t8337*t9006;
  t9010 = t9008 + t9009;
  t9012 = t8337*t9002;
  t9013 = t8367*t9006;
  t9014 = t9012 + t9013;
  t9016 = t8461*t9010;
  t9017 = t8447*t9014;
  t9018 = t9016 + t9017;
  t9020 = t8447*t9010;
  t9021 = -1.*t8461*t9014;
  t9022 = t9020 + t9021;
  t9035 = -1.*t3112*t8636;
  t9036 = t8899 + t9035;
  t9041 = t8227*t9036;
  t9042 = t8157*t1373*t8658;
  t9043 = t9041 + t9042;
  t9045 = t8157*t9036;
  t9046 = -1.*t1373*t8227*t8658;
  t9047 = t9045 + t9046;
  t9049 = -1.*t8367*t9043;
  t9050 = t8337*t9047;
  t9051 = t9049 + t9050;
  t9053 = t8337*t9043;
  t9054 = t8367*t9047;
  t9055 = t9053 + t9054;
  t9057 = t8461*t9051;
  t9058 = t8447*t9055;
  t9059 = t9057 + t9058;
  t9061 = t8447*t9051;
  t9062 = -1.*t8461*t9055;
  t9063 = t9061 + t9062;
  t9075 = t2614*t1946;
  t9076 = t1481*t2215*t2703;
  t9077 = t9075 + t9076;
  t9082 = -1.*t1667*t9077;
  t9083 = t8949 + t9082;
  t9079 = -1.*t3112*t9077;
  t9080 = t8946 + t9079;
  t9087 = t8227*t9080;
  t9088 = t8157*t1373*t9083;
  t9089 = t9087 + t9088;
  t9091 = t8157*t9080;
  t9092 = -1.*t1373*t8227*t9083;
  t9093 = t9091 + t9092;
  t9095 = -1.*t8367*t9089;
  t9096 = t8337*t9093;
  t9097 = t9095 + t9096;
  t9099 = t8337*t9089;
  t9100 = t8367*t9093;
  t9101 = t9099 + t9100;
  t9103 = t8461*t9097;
  t9104 = t8447*t9101;
  t9105 = t9103 + t9104;
  t9107 = t8447*t9097;
  t9108 = -1.*t8461*t9101;
  t9109 = t9107 + t9108;
  t8993 = t8236*t8992;
  t8997 = -0.1305*t833*t8996;
  t8998 = t5026*t8996;
  t8999 = t1373*t8313*t8996;
  t9003 = t8389*t9002;
  t9007 = t8424*t9006;
  t9011 = t8477*t9010;
  t9015 = t8513*t9014;
  t9019 = t8550*t9018;
  t9023 = t8575*t9022;
  t9024 = -1.*t8543*t9018;
  t9025 = t8529*t9022;
  t9026 = t9024 + t9025;
  t9027 = -1.1135*t9026;
  t9028 = t8529*t9018;
  t9029 = t8543*t9022;
  t9030 = t9028 + t9029;
  t9031 = -0.0216*t9030;
  t8662 = -1.*t2614*t702*t1373;
  t8666 = t833*t8651;
  t8667 = t8662 + t8666;
  t9137 = -1.*t8337*t8227*t8667;
  t9138 = -1.*t8157*t8367*t8667;
  t9139 = t9137 + t9138;
  t9141 = t8157*t8337*t8667;
  t9142 = -1.*t8227*t8367*t8667;
  t9143 = t9141 + t9142;
  t9145 = t8461*t9139;
  t9146 = t8447*t9143;
  t9147 = t9145 + t9146;
  t9149 = t8447*t9139;
  t9150 = -1.*t8461*t9143;
  t9151 = t9149 + t9150;
  t9123 = -0.135*t833;
  t9124 = -0.049*t1373;
  t9125 = t9123 + t9124;
  t9127 = 0.049*t833;
  t9128 = t9127 + t1409;
  t9163 = t1667*t8943;
  t9164 = t3112*t9077;
  t9165 = t9163 + t9164;
  t9167 = -1.*t702*t1373*t1481;
  t9168 = t833*t9165;
  t9169 = t9167 + t9168;
  t9176 = -1.*t8337*t8227*t9169;
  t9177 = -1.*t8157*t8367*t9169;
  t9178 = t9176 + t9177;
  t9180 = t8157*t8337*t9169;
  t9181 = -1.*t8227*t8367*t9169;
  t9182 = t9180 + t9181;
  t9184 = t8461*t9178;
  t9185 = t8447*t9182;
  t9186 = t9184 + t9185;
  t9188 = t8447*t9178;
  t9189 = -1.*t8461*t9182;
  t9190 = t9188 + t9189;
  t9202 = t702*t1946*t1667;
  t9203 = t3112*t702*t2703;
  t9204 = t9202 + t9203;
  t9206 = t1373*t2215;
  t9207 = t833*t9204;
  t9208 = t9206 + t9207;
  t9216 = -1.*t8337*t8227*t9208;
  t9217 = -1.*t8157*t8367*t9208;
  t9218 = t9216 + t9217;
  t9220 = t8157*t8337*t9208;
  t9221 = -1.*t8227*t8367*t9208;
  t9222 = t9220 + t9221;
  t9224 = t8461*t9218;
  t9225 = t8447*t9222;
  t9226 = t9224 + t9225;
  t9228 = t8447*t9218;
  t9229 = -1.*t8461*t9222;
  t9230 = t9228 + t9229;
  t9248 = -1.*t8227*t8658;
  t9249 = -1.*t8157*t8677;
  t9250 = t9248 + t9249;
  t9253 = t8367*t9250;
  t9254 = t9253 + t8689;
  t9256 = t8337*t9250;
  t9257 = -1.*t8367*t8686;
  t9258 = t9256 + t9257;
  t9260 = -1.*t8461*t9254;
  t9261 = t8447*t9258;
  t9262 = t9260 + t9261;
  t9264 = t8447*t9254;
  t9265 = t8461*t9258;
  t9266 = t9264 + t9265;
  t9241 = 0.049*t8157;
  t9242 = t9241 + t8308;
  t9244 = -0.09*t8157;
  t9245 = -0.049*t8227;
  t9246 = t9244 + t9245;
  t9278 = t833*t702*t1481;
  t9279 = t1373*t9165;
  t9280 = t9278 + t9279;
  t9282 = -1.*t8227*t9083;
  t9283 = -1.*t8157*t9280;
  t9284 = t9282 + t9283;
  t9286 = t8157*t9083;
  t9287 = -1.*t8227*t9280;
  t9288 = t9286 + t9287;
  t9290 = t8367*t9284;
  t9291 = t8337*t9288;
  t9292 = t9290 + t9291;
  t9294 = t8337*t9284;
  t9295 = -1.*t8367*t9288;
  t9296 = t9294 + t9295;
  t9298 = -1.*t8461*t9292;
  t9299 = t8447*t9296;
  t9300 = t9298 + t9299;
  t9302 = t8447*t9292;
  t9303 = t8461*t9296;
  t9304 = t9302 + t9303;
  t9316 = -1.*t833*t2215;
  t9317 = t1373*t9204;
  t9318 = t9316 + t9317;
  t9320 = -1.*t8227*t8996;
  t9321 = -1.*t8157*t9318;
  t9322 = t9320 + t9321;
  t9324 = t8157*t8996;
  t9325 = -1.*t8227*t9318;
  t9326 = t9324 + t9325;
  t9328 = t8367*t9322;
  t9329 = t8337*t9326;
  t9330 = t9328 + t9329;
  t9332 = t8337*t9322;
  t9333 = -1.*t8367*t9326;
  t9334 = t9332 + t9333;
  t9336 = -1.*t8461*t9330;
  t9337 = t8447*t9334;
  t9338 = t9336 + t9337;
  t9340 = t8447*t9330;
  t9341 = t8461*t9334;
  t9342 = t9340 + t9341;
  t9361 = -1.*t8337*t8681;
  t9362 = t9361 + t9257;
  t9364 = -1.*t8461*t8691;
  t9365 = t8447*t9362;
  t9366 = t9364 + t9365;
  t9368 = t8461*t9362;
  t9369 = t8710 + t9368;
  t9353 = -0.21*t8337;
  t9354 = -0.049*t8367;
  t9355 = t9353 + t9354;
  t9357 = 0.049*t8337;
  t9358 = t9357 + t8373;
  t9380 = t8227*t9083;
  t9381 = t8157*t9280;
  t9382 = t9380 + t9381;
  t9385 = -1.*t8367*t9382;
  t9386 = t9385 + t9291;
  t9388 = -1.*t8337*t9382;
  t9389 = t9388 + t9295;
  t9391 = -1.*t8461*t9386;
  t9392 = t8447*t9389;
  t9393 = t9391 + t9392;
  t9395 = t8447*t9386;
  t9396 = t8461*t9389;
  t9397 = t9395 + t9396;
  t9408 = t8227*t8996;
  t9409 = t8157*t9318;
  t9410 = t9408 + t9409;
  t9413 = -1.*t8367*t9410;
  t9414 = t9413 + t9329;
  t9416 = -1.*t8337*t9410;
  t9417 = t9416 + t9333;
  t9419 = -1.*t8461*t9414;
  t9420 = t8447*t9417;
  t9421 = t9419 + t9420;
  t9423 = t8447*t9414;
  t9424 = t8461*t9417;
  t9425 = t9423 + t9424;
  t9443 = -1.*t8447*t8699;
  t9444 = t9364 + t9443;
  t8719 = t8529*t8713;
  t9436 = 0.0016*t8447;
  t9437 = t9436 + t8505;
  t9439 = -0.2707*t8447;
  t9440 = -0.0016*t8461;
  t9441 = t9439 + t9440;
  t9456 = t8337*t9382;
  t9457 = t8367*t9288;
  t9458 = t9456 + t9457;
  t9460 = -1.*t8447*t9458;
  t9461 = t9391 + t9460;
  t9463 = -1.*t8461*t9458;
  t9464 = t9395 + t9463;
  t9476 = t8337*t9410;
  t9477 = t8367*t9326;
  t9478 = t9476 + t9477;
  t9480 = -1.*t8447*t9478;
  t9481 = t9419 + t9480;
  t9483 = -1.*t8461*t9478;
  t9484 = t9423 + t9483;
  t8717 = -1.*t8543*t8706;
  t8721 = t8717 + t8719;
  t9451 = -1.*t8543*t8713;
  t9495 = -0.7055*t8529;
  t9496 = 0.0184*t8543;
  t9497 = t9495 + t9496;
  t9499 = -0.0184*t8529;
  t9500 = t9499 + t8548;
  t9507 = t8461*t9386;
  t9508 = t8447*t9458;
  t9509 = t9507 + t9508;
  t9467 = t8529*t9464;
  t9471 = -1.*t8543*t9464;
  t9519 = t8461*t9414;
  t9520 = t8447*t9478;
  t9521 = t9519 + t9520;
  t9487 = t8529*t9484;
  t9491 = -1.*t8543*t9484;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=t1929*t2725 + t3986*t4555 - 1.*t1427*t1481*t702 + t5026*t7817 + t8236*t8241 + t8313*t8327 - 0.1305*(t1373*t1481*t702 + t7817*t833) + t8389*t8412 + t8424*t8430 + t8477*t8483 + t8513*t8524 + t8550*t8558 + t8575*t8590 - 1.1135*(-1.*t8543*t8558 + t8529*t8590) - 0.0216*(t8529*t8558 + t8543*t8590);
  p_output1[10]=t1427*t2614*t702 + t1929*t8626 + t3986*t8636 + t5026*t8651 + t8236*t8658 - 0.1305*t8667 + t8313*t8677 + t8389*t8681 + t8424*t8686 + t8477*t8691 + t8513*t8699 + t8550*t8706 + t8575*t8713 - 0.0216*(t8529*t8706 + t8543*t8713) - 1.1135*t8721;
  p_output1[11]=0;
  p_output1[12]=-1.*t1427*t2215*t2614 + t1929*t1946*t2614*t702 + t2614*t2703*t3986*t702 + t5026*t8741 - 0.1305*(t1373*t2215*t2614 + t833*t8741) + t8236*t8745 + t8313*t8753 + t8389*t8757 + t8424*t8762 + t8477*t8766 + t8513*t8771 + t8550*t8775 + t8575*t8779 - 1.1135*(-1.*t8543*t8775 + t8529*t8779) - 0.0216*(t8529*t8775 + t8543*t8779);
  p_output1[13]=-1.*t1427*t1481*t2215 + t1481*t1929*t1946*t702 + t1481*t2703*t3986*t702 + t5026*t8795 - 0.1305*(t1373*t1481*t2215 + t833*t8795) + t8236*t8799 + t8313*t8807 + t8389*t8811 + t8424*t8815 + t8477*t8819 + t8513*t8823 + t8550*t8827 + t8575*t8831 - 1.1135*(-1.*t8543*t8827 + t8529*t8831) - 0.0216*(t8529*t8827 + t8543*t8831);
  p_output1[14]=-1.*t1929*t1946*t2215 - 1.*t2215*t2703*t3986 - 1.*t1427*t702 + t5026*t8847 - 0.1305*(t1373*t702 + t833*t8847) + t8236*t8851 + t8313*t8859 + t8389*t8863 + t8424*t8867 + t8477*t8871 + t8513*t8875 + t8550*t8879 + t8575*t8883 - 1.1135*(-1.*t8543*t8879 + t8529*t8883) - 0.0216*(t8529*t8879 + t8543*t8883);
  p_output1[15]=t3986*t8626 + t1929*t8897 + t8236*t8901 + t5026*t8904 + t1373*t8313*t8904 - 0.1305*t833*t8904 + t8389*t8910 + t8424*t8914 + t8477*t8918 + t8513*t8922 + t8550*t8926 + t8575*t8930 - 1.1135*(-1.*t8543*t8926 + t8529*t8930) - 0.0216*(t8529*t8926 + t8543*t8930);
  p_output1[16]=t1929*t4555 + t3986*t8943 + t8236*t8947 + t5026*t8951 + t1373*t8313*t8951 - 0.1305*t833*t8951 + t8389*t8957 + t8424*t8961 + t8477*t8965 + t8513*t8969 + t8550*t8973 + t8575*t8977 - 1.1135*(-1.*t8543*t8973 + t8529*t8977) - 0.0216*(t8529*t8973 + t8543*t8977);
  p_output1[17]=-1.*t1929*t2703*t702 + t1946*t3986*t702 + t8993 + t8997 + t8998 + t8999 + t9003 + t9007 + t9011 + t9015 + t9019 + t9023 + t9027 + t9031;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0.135*t3112*t8626 - 0.135*t1667*t8636 + t5026*t8658 + t1373*t8313*t8658 - 0.1305*t833*t8658 + t8236*t9036 + t8389*t9043 + t8424*t9047 + t8477*t9051 + t8513*t9055 + t8550*t9059 + t8575*t9063 - 1.1135*(-1.*t8543*t9059 + t8529*t9063) - 0.0216*(t8529*t9059 + t8543*t9063);
  p_output1[40]=0.135*t3112*t8943 - 0.135*t1667*t9077 + t8236*t9080 + t5026*t9083 + t1373*t8313*t9083 - 0.1305*t833*t9083 + t8389*t9089 + t8424*t9093 + t8477*t9097 + t8513*t9101 + t8550*t9105 + t8575*t9109 - 1.1135*(-1.*t8543*t9105 + t8529*t9109) - 0.0216*(t8529*t9105 + t8543*t9109);
  p_output1[41]=-0.135*t1667*t2703*t702 + 0.135*t1946*t3112*t702 + t8993 + t8997 + t8998 + t8999 + t9003 + t9007 + t9011 + t9015 + t9019 + t9023 + t9027 + t9031;
  p_output1[42]=-0.1305*(-1.*t2614*t702*t833 - 1.*t1373*t8651) + t8313*t8667 + t8157*t8389*t8667 - 1.*t8227*t8424*t8667 + t2614*t702*t9125 + t8651*t9128 + t8477*t9139 + t8513*t9143 + t8550*t9147 + t8575*t9151 - 1.1135*(-1.*t8543*t9147 + t8529*t9151) - 0.0216*(t8529*t9147 + t8543*t9151);
  p_output1[43]=t1481*t702*t9125 + t9128*t9165 - 0.1305*(t8319 - 1.*t1373*t9165) + t8313*t9169 + t8157*t8389*t9169 - 1.*t8227*t8424*t9169 + t8477*t9178 + t8513*t9182 + t8550*t9186 + t8575*t9190 - 1.1135*(-1.*t8543*t9186 + t8529*t9190) - 0.0216*(t8529*t9186 + t8543*t9190);
  p_output1[44]=-1.*t2215*t9125 + t9128*t9204 - 0.1305*(t2215*t833 - 1.*t1373*t9204) + t8313*t9208 + t8157*t8389*t9208 - 1.*t8227*t8424*t9208 + t8477*t9218 + t8513*t9222 + t8550*t9226 + t8575*t9230 - 1.1135*(-1.*t8543*t9226 + t8529*t9230) - 0.0216*(t8529*t9226 + t8543*t9230);
  p_output1[45]=t8389*t8686 + t8658*t9242 + t8677*t9246 + t8424*t9250 + t8513*t9254 + t8477*t9258 + t8575*t9262 + t8550*t9266 - 0.0216*(t8543*t9262 + t8529*t9266) - 1.1135*(t8529*t9262 - 1.*t8543*t9266);
  p_output1[46]=t9083*t9242 + t9246*t9280 + t8424*t9284 + t8389*t9288 + t8513*t9292 + t8477*t9296 + t8575*t9300 + t8550*t9304 - 0.0216*(t8543*t9300 + t8529*t9304) - 1.1135*(t8529*t9300 - 1.*t8543*t9304);
  p_output1[47]=t8996*t9242 + t9246*t9318 + t8424*t9322 + t8389*t9326 + t8513*t9330 + t8477*t9334 + t8575*t9338 + t8550*t9342 - 0.0216*(t8543*t9338 + t8529*t9342) - 1.1135*(t8529*t9338 - 1.*t8543*t9342);
  p_output1[48]=t8513*t8691 + t8681*t9355 + t8686*t9358 + t8477*t9362 + t8575*t9366 + t8550*t9369 - 0.0216*(t8543*t9366 + t8529*t9369) - 1.1135*(t8529*t9366 - 1.*t8543*t9369);
  p_output1[49]=t9288*t9358 + t9355*t9382 + t8513*t9386 + t8477*t9389 + t8575*t9393 + t8550*t9397 - 0.0216*(t8543*t9393 + t8529*t9397) - 1.1135*(t8529*t9393 - 1.*t8543*t9397);
  p_output1[50]=t9326*t9358 + t9355*t9410 + t8513*t9414 + t8477*t9417 + t8575*t9421 + t8550*t9425 - 0.0216*(t8543*t9421 + t8529*t9425) - 1.1135*(t8529*t9421 - 1.*t8543*t9425);
  p_output1[51]=t8550*t8713 + t8691*t9437 + t8699*t9441 + t8575*t9444 - 0.0216*(t8719 + t8543*t9444) - 1.1135*(t8529*t9444 + t9451);
  p_output1[52]=t9386*t9437 + t9441*t9458 + t8575*t9461 + t8550*t9464 - 0.0216*(t8543*t9461 + t9467) - 1.1135*(t8529*t9461 + t9471);
  p_output1[53]=t9414*t9437 + t9441*t9478 + t8575*t9481 + t8550*t9484 - 0.0216*(t8543*t9481 + t9487) - 1.1135*(t8529*t9481 + t9491);
  p_output1[54]=-0.0216*t8721 - 1.1135*(-1.*t8529*t8706 + t9451) + t8706*t9497 + t8713*t9500;
  p_output1[55]=t9464*t9500 + t9497*t9509 - 1.1135*(t9471 - 1.*t8529*t9509) - 0.0216*(t9467 - 1.*t8543*t9509);
  p_output1[56]=t9484*t9500 + t9497*t9521 - 1.1135*(t9491 - 1.*t8529*t9521) - 0.0216*(t9487 - 1.*t8543*t9521);
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_toe_joint_right_mex.hh"

namespace SymExpression
{

void J_toe_joint_right_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
