/*
 * Automatically Generated from Mathematica.
 * Wed 15 Nov 2017 08:32:51 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t2010;
  double t2152;
  double t2141;
  double t2146;
  double t2156;
  double t27;
  double t30;
  double t32;
  double t1708;
  double t2129;
  double t2151;
  double t2160;
  double t2164;
  double t2169;
  double t2181;
  double t2182;
  double t2183;
  double t25;
  double t2191;
  double t2195;
  double t2196;
  double t2198;
  double t2199;
  double t2203;
  double t2213;
  double t2266;
  double t2333;
  double t2385;
  double t3781;
  double t3836;
  double t3950;
  double t3999;
  double t4001;
  double t4005;
  double t4027;
  double t4086;
  double t4090;
  double t4093;
  double t4160;
  double t4161;
  double t4162;
  double t4170;
  double t4171;
  double t4178;
  double t4202;
  double t4256;
  double t4259;
  double t4260;
  double t4277;
  double t4280;
  double t4291;
  double t4296;
  double t4300;
  double t4305;
  double t4314;
  double t4320;
  double t4326;
  double t4333;
  double t4361;
  double t4366;
  double t4376;
  double t1674;
  double t1781;
  double t1790;
  double t2135;
  double t2139;
  double t2170;
  double t2171;
  double t2174;
  double t2179;
  double t2186;
  double t2187;
  double t2190;
  double t4620;
  double t4842;
  double t4848;
  double t5002;
  double t5329;
  double t5577;
  double t2206;
  double t2217;
  double t2224;
  double t6001;
  double t6541;
  double t6553;
  double t3534;
  double t3610;
  double t3753;
  double t4013;
  double t4059;
  double t4081;
  double t8503;
  double t8581;
  double t8583;
  double t8655;
  double t8662;
  double t8665;
  double t4098;
  double t4119;
  double t4156;
  double t4201;
  double t4232;
  double t4251;
  double t8673;
  double t8677;
  double t8678;
  double t8682;
  double t8690;
  double t8692;
  double t4263;
  double t4268;
  double t4272;
  double t4313;
  double t4316;
  double t4319;
  double t8695;
  double t8702;
  double t8706;
  double t8738;
  double t8740;
  double t8743;
  double t4345;
  double t4346;
  double t4357;
  double t8750;
  double t8765;
  double t8775;
  double t8799;
  double t8807;
  double t8808;
  double t8909;
  double t8910;
  double t8913;
  double t8919;
  double t8924;
  double t8926;
  double t8944;
  double t8946;
  double t8950;
  double t8957;
  double t8960;
  double t8961;
  double t8969;
  double t8978;
  double t8979;
  double t8983;
  double t8984;
  double t8986;
  double t8989;
  double t8994;
  double t9000;
  double t9013;
  double t9014;
  double t9018;
  double t9024;
  double t9026;
  double t9029;
  double t9075;
  double t9078;
  double t9080;
  double t9085;
  double t9088;
  double t9091;
  double t9110;
  double t9111;
  double t9117;
  double t9119;
  double t9122;
  double t9124;
  double t9131;
  double t9132;
  double t9134;
  double t9139;
  double t9140;
  double t9144;
  double t9149;
  double t9150;
  double t9151;
  double t9162;
  double t9165;
  double t9167;
  double t9171;
  double t9172;
  double t9173;
  double t9192;
  double t9198;
  double t9200;
  double t9203;
  double t9204;
  double t9205;
  double t9212;
  double t9214;
  double t9218;
  double t9224;
  double t9225;
  double t9229;
  double t9231;
  double t9233;
  double t9234;
  double t9238;
  double t9239;
  double t9240;
  double t9242;
  double t9243;
  double t9244;
  double t9247;
  double t9248;
  double t9250;
  double t9255;
  double t9256;
  double t9257;
  double t9275;
  double t9276;
  double t9277;
  double t9283;
  double t9284;
  double t9279;
  double t9280;
  double t9281;
  double t9289;
  double t9291;
  double t9292;
  double t9294;
  double t9295;
  double t9296;
  double t9298;
  double t9299;
  double t9301;
  double t9305;
  double t9307;
  double t9308;
  double t9311;
  double t9312;
  double t9314;
  double t9316;
  double t9317;
  double t9318;
  double t9335;
  double t9336;
  double t9337;
  double t9343;
  double t9344;
  double t9345;
  double t9340;
  double t9341;
  double t9349;
  double t9350;
  double t9351;
  double t9354;
  double t9355;
  double t9356;
  double t9358;
  double t9359;
  double t9360;
  double t9362;
  double t9363;
  double t9364;
  double t9367;
  double t9368;
  double t9369;
  double t9371;
  double t9372;
  double t9373;
  double t9390;
  double t9391;
  double t9392;
  double t9386;
  double t9387;
  double t9388;
  double t9396;
  double t9397;
  double t9398;
  double t9400;
  double t9401;
  double t9402;
  double t9404;
  double t9405;
  double t9406;
  double t9408;
  double t9409;
  double t9410;
  double t9412;
  double t9413;
  double t9414;
  double t9416;
  double t9417;
  double t9418;
  double t9431;
  double t9432;
  double t9437;
  double t9438;
  double t9439;
  double t9441;
  double t9442;
  double t9443;
  double t9445;
  double t9446;
  double t9447;
  double t9449;
  double t9450;
  double t9451;
  double t9453;
  double t9454;
  double t9455;
  double t9457;
  double t9458;
  double t9459;
  double t9471;
  double t9472;
  double t9473;
  double t9478;
  double t9479;
  double t9475;
  double t9476;
  double t9483;
  double t9484;
  double t9485;
  double t9487;
  double t9488;
  double t9489;
  double t9491;
  double t9492;
  double t9493;
  double t9495;
  double t9496;
  double t9497;
  double t9499;
  double t9500;
  double t9501;
  double t9503;
  double t9504;
  double t9505;
  double t9389;
  double t9393;
  double t9394;
  double t9395;
  double t9399;
  double t9403;
  double t9407;
  double t9411;
  double t9415;
  double t9419;
  double t9420;
  double t9421;
  double t9422;
  double t9423;
  double t9424;
  double t9425;
  double t9426;
  double t9427;
  double t8629;
  double t8630;
  double t8633;
  double t9533;
  double t9534;
  double t9535;
  double t9537;
  double t9538;
  double t9539;
  double t9541;
  double t9542;
  double t9543;
  double t9545;
  double t9546;
  double t9547;
  double t9519;
  double t9520;
  double t9521;
  double t9523;
  double t9524;
  double t9559;
  double t9560;
  double t9561;
  double t9563;
  double t9564;
  double t9565;
  double t9572;
  double t9573;
  double t9574;
  double t9576;
  double t9577;
  double t9578;
  double t9580;
  double t9581;
  double t9582;
  double t9584;
  double t9585;
  double t9586;
  double t9598;
  double t9599;
  double t9600;
  double t9602;
  double t9603;
  double t9604;
  double t9612;
  double t9613;
  double t9614;
  double t9616;
  double t9617;
  double t9618;
  double t9620;
  double t9621;
  double t9622;
  double t9624;
  double t9625;
  double t9626;
  double t9644;
  double t9645;
  double t9646;
  double t9649;
  double t9650;
  double t9652;
  double t9653;
  double t9654;
  double t9656;
  double t9657;
  double t9658;
  double t9660;
  double t9661;
  double t9662;
  double t9637;
  double t9638;
  double t9640;
  double t9641;
  double t9642;
  double t9674;
  double t9675;
  double t9676;
  double t9678;
  double t9679;
  double t9680;
  double t9682;
  double t9683;
  double t9684;
  double t9686;
  double t9687;
  double t9688;
  double t9690;
  double t9691;
  double t9692;
  double t9694;
  double t9695;
  double t9696;
  double t9698;
  double t9699;
  double t9700;
  double t9712;
  double t9713;
  double t9714;
  double t9716;
  double t9717;
  double t9718;
  double t9720;
  double t9721;
  double t9722;
  double t9724;
  double t9725;
  double t9726;
  double t9728;
  double t9729;
  double t9730;
  double t9732;
  double t9733;
  double t9734;
  double t9736;
  double t9737;
  double t9738;
  double t9757;
  double t9758;
  double t9760;
  double t9761;
  double t9762;
  double t9764;
  double t9765;
  double t9749;
  double t9750;
  double t9751;
  double t9753;
  double t9754;
  double t9776;
  double t9777;
  double t9778;
  double t9781;
  double t9782;
  double t9784;
  double t9785;
  double t9787;
  double t9788;
  double t9789;
  double t9791;
  double t9792;
  double t9793;
  double t9804;
  double t9805;
  double t9806;
  double t9809;
  double t9810;
  double t9812;
  double t9813;
  double t9815;
  double t9816;
  double t9817;
  double t9819;
  double t9820;
  double t9821;
  double t9839;
  double t9840;
  double t8827;
  double t9832;
  double t9833;
  double t9835;
  double t9836;
  double t9837;
  double t9852;
  double t9853;
  double t9854;
  double t9856;
  double t9857;
  double t9859;
  double t9860;
  double t9872;
  double t9873;
  double t9874;
  double t9876;
  double t9877;
  double t9879;
  double t9880;
  double t8824;
  double t8829;
  double t9847;
  double t9891;
  double t9892;
  double t9893;
  double t9895;
  double t9896;
  double t9903;
  double t9904;
  double t9905;
  double t9863;
  double t9867;
  double t9915;
  double t9916;
  double t9917;
  double t9883;
  double t9887;
  t2010 = Sin(var1[3]);
  t2152 = Cos(var1[3]);
  t2141 = Cos(var1[5]);
  t2146 = Sin(var1[4]);
  t2156 = Sin(var1[5]);
  t27 = Cos(var1[14]);
  t30 = -1.*t27;
  t32 = 1. + t30;
  t1708 = Sin(var1[14]);
  t2129 = Sin(var1[13]);
  t2151 = -1.*t2141*t2010*t2146;
  t2160 = t2152*t2156;
  t2164 = t2151 + t2160;
  t2169 = Cos(var1[13]);
  t2181 = -1.*t2152*t2141;
  t2182 = -1.*t2010*t2146*t2156;
  t2183 = t2181 + t2182;
  t25 = Cos(var1[4]);
  t2191 = t2129*t2164;
  t2195 = t2169*t2183;
  t2196 = t2191 + t2195;
  t2198 = Cos(var1[15]);
  t2199 = -1.*t2198;
  t2203 = 1. + t2199;
  t2213 = Sin(var1[15]);
  t2266 = t2169*t2164;
  t2333 = -1.*t2129*t2183;
  t2385 = t2266 + t2333;
  t3781 = -1.*t27*t25*t2010;
  t3836 = t1708*t2196;
  t3950 = t3781 + t3836;
  t3999 = Cos(var1[16]);
  t4001 = -1.*t3999;
  t4005 = 1. + t4001;
  t4027 = Sin(var1[16]);
  t4086 = t2213*t2385;
  t4090 = t2198*t3950;
  t4093 = t4086 + t4090;
  t4160 = t2198*t2385;
  t4161 = -1.*t2213*t3950;
  t4162 = t4160 + t4161;
  t4170 = Cos(var1[17]);
  t4171 = -1.*t4170;
  t4178 = 1. + t4171;
  t4202 = Sin(var1[17]);
  t4256 = -1.*t4027*t4093;
  t4259 = t3999*t4162;
  t4260 = t4256 + t4259;
  t4277 = t3999*t4093;
  t4280 = t4027*t4162;
  t4291 = t4277 + t4280;
  t4296 = Cos(var1[18]);
  t4300 = -1.*t4296;
  t4305 = 1. + t4300;
  t4314 = Sin(var1[18]);
  t4320 = t4202*t4260;
  t4326 = t4170*t4291;
  t4333 = t4320 + t4326;
  t4361 = t4170*t4260;
  t4366 = -1.*t4202*t4291;
  t4376 = t4361 + t4366;
  t1674 = -0.049*t32;
  t1781 = -0.135*t1708;
  t1790 = 0. + t1674 + t1781;
  t2135 = 0.135*t2129;
  t2139 = 0. + t2135;
  t2170 = -1.*t2169;
  t2171 = 1. + t2170;
  t2174 = -0.135*t2171;
  t2179 = 0. + t2174;
  t2186 = -0.135*t32;
  t2187 = 0.049*t1708;
  t2190 = 0. + t2186 + t2187;
  t4620 = t2152*t2141*t2146;
  t4842 = t2010*t2156;
  t4848 = t4620 + t4842;
  t5002 = -1.*t2141*t2010;
  t5329 = t2152*t2146*t2156;
  t5577 = t5002 + t5329;
  t2206 = -0.09*t2203;
  t2217 = 0.049*t2213;
  t2224 = 0. + t2206 + t2217;
  t6001 = t2129*t4848;
  t6541 = t2169*t5577;
  t6553 = t6001 + t6541;
  t3534 = -0.049*t2203;
  t3610 = -0.09*t2213;
  t3753 = 0. + t3534 + t3610;
  t4013 = -0.049*t4005;
  t4059 = -0.21*t4027;
  t4081 = 0. + t4013 + t4059;
  t8503 = t2169*t4848;
  t8581 = -1.*t2129*t5577;
  t8583 = t8503 + t8581;
  t8655 = t27*t2152*t25;
  t8662 = t1708*t6553;
  t8665 = t8655 + t8662;
  t4098 = -0.21*t4005;
  t4119 = 0.049*t4027;
  t4156 = 0. + t4098 + t4119;
  t4201 = -0.2707*t4178;
  t4232 = 0.0016*t4202;
  t4251 = 0. + t4201 + t4232;
  t8673 = t2213*t8583;
  t8677 = t2198*t8665;
  t8678 = t8673 + t8677;
  t8682 = t2198*t8583;
  t8690 = -1.*t2213*t8665;
  t8692 = t8682 + t8690;
  t4263 = -0.0016*t4178;
  t4268 = -0.2707*t4202;
  t4272 = 0. + t4263 + t4268;
  t4313 = 0.0184*t4305;
  t4316 = -0.7055*t4314;
  t4319 = 0. + t4313 + t4316;
  t8695 = -1.*t4027*t8678;
  t8702 = t3999*t8692;
  t8706 = t8695 + t8702;
  t8738 = t3999*t8678;
  t8740 = t4027*t8692;
  t8743 = t8738 + t8740;
  t4345 = -0.7055*t4305;
  t4346 = -0.0184*t4314;
  t4357 = 0. + t4345 + t4346;
  t8750 = t4202*t8706;
  t8765 = t4170*t8743;
  t8775 = t8750 + t8765;
  t8799 = t4170*t8706;
  t8807 = -1.*t4202*t8743;
  t8808 = t8799 + t8807;
  t8909 = t2152*t25*t2141*t2129;
  t8910 = t2169*t2152*t25*t2156;
  t8913 = t8909 + t8910;
  t8919 = t2169*t2152*t25*t2141;
  t8924 = -1.*t2152*t25*t2129*t2156;
  t8926 = t8919 + t8924;
  t8944 = -1.*t27*t2152*t2146;
  t8946 = t1708*t8913;
  t8950 = t8944 + t8946;
  t8957 = t2213*t8926;
  t8960 = t2198*t8950;
  t8961 = t8957 + t8960;
  t8969 = t2198*t8926;
  t8978 = -1.*t2213*t8950;
  t8979 = t8969 + t8978;
  t8983 = -1.*t4027*t8961;
  t8984 = t3999*t8979;
  t8986 = t8983 + t8984;
  t8989 = t3999*t8961;
  t8994 = t4027*t8979;
  t9000 = t8989 + t8994;
  t9013 = t4202*t8986;
  t9014 = t4170*t9000;
  t9018 = t9013 + t9014;
  t9024 = t4170*t8986;
  t9026 = -1.*t4202*t9000;
  t9029 = t9024 + t9026;
  t9075 = t25*t2141*t2129*t2010;
  t9078 = t2169*t25*t2010*t2156;
  t9080 = t9075 + t9078;
  t9085 = t2169*t25*t2141*t2010;
  t9088 = -1.*t25*t2129*t2010*t2156;
  t9091 = t9085 + t9088;
  t9110 = -1.*t27*t2010*t2146;
  t9111 = t1708*t9080;
  t9117 = t9110 + t9111;
  t9119 = t2213*t9091;
  t9122 = t2198*t9117;
  t9124 = t9119 + t9122;
  t9131 = t2198*t9091;
  t9132 = -1.*t2213*t9117;
  t9134 = t9131 + t9132;
  t9139 = -1.*t4027*t9124;
  t9140 = t3999*t9134;
  t9144 = t9139 + t9140;
  t9149 = t3999*t9124;
  t9150 = t4027*t9134;
  t9151 = t9149 + t9150;
  t9162 = t4202*t9144;
  t9165 = t4170*t9151;
  t9167 = t9162 + t9165;
  t9171 = t4170*t9144;
  t9172 = -1.*t4202*t9151;
  t9173 = t9171 + t9172;
  t9192 = -1.*t2141*t2129*t2146;
  t9198 = -1.*t2169*t2146*t2156;
  t9200 = t9192 + t9198;
  t9203 = -1.*t2169*t2141*t2146;
  t9204 = t2129*t2146*t2156;
  t9205 = t9203 + t9204;
  t9212 = -1.*t27*t25;
  t9214 = t1708*t9200;
  t9218 = t9212 + t9214;
  t9224 = t2213*t9205;
  t9225 = t2198*t9218;
  t9229 = t9224 + t9225;
  t9231 = t2198*t9205;
  t9233 = -1.*t2213*t9218;
  t9234 = t9231 + t9233;
  t9238 = -1.*t4027*t9229;
  t9239 = t3999*t9234;
  t9240 = t9238 + t9239;
  t9242 = t3999*t9229;
  t9243 = t4027*t9234;
  t9244 = t9242 + t9243;
  t9247 = t4202*t9240;
  t9248 = t4170*t9244;
  t9250 = t9247 + t9248;
  t9255 = t4170*t9240;
  t9256 = -1.*t4202*t9244;
  t9257 = t9255 + t9256;
  t9275 = t2141*t2010;
  t9276 = -1.*t2152*t2146*t2156;
  t9277 = t9275 + t9276;
  t9283 = t2129*t9277;
  t9284 = t8503 + t9283;
  t9279 = -1.*t2129*t4848;
  t9280 = t2169*t9277;
  t9281 = t9279 + t9280;
  t9289 = t2213*t9281;
  t9291 = t2198*t1708*t9284;
  t9292 = t9289 + t9291;
  t9294 = t2198*t9281;
  t9295 = -1.*t1708*t2213*t9284;
  t9296 = t9294 + t9295;
  t9298 = -1.*t4027*t9292;
  t9299 = t3999*t9296;
  t9301 = t9298 + t9299;
  t9305 = t3999*t9292;
  t9307 = t4027*t9296;
  t9308 = t9305 + t9307;
  t9311 = t4202*t9301;
  t9312 = t4170*t9308;
  t9314 = t9311 + t9312;
  t9316 = t4170*t9301;
  t9317 = -1.*t4202*t9308;
  t9318 = t9316 + t9317;
  t9335 = t2141*t2010*t2146;
  t9336 = -1.*t2152*t2156;
  t9337 = t9335 + t9336;
  t9343 = t2169*t9337;
  t9344 = t2129*t2183;
  t9345 = t9343 + t9344;
  t9340 = -1.*t2129*t9337;
  t9341 = t9340 + t2195;
  t9349 = t2213*t9341;
  t9350 = t2198*t1708*t9345;
  t9351 = t9349 + t9350;
  t9354 = t2198*t9341;
  t9355 = -1.*t1708*t2213*t9345;
  t9356 = t9354 + t9355;
  t9358 = -1.*t4027*t9351;
  t9359 = t3999*t9356;
  t9360 = t9358 + t9359;
  t9362 = t3999*t9351;
  t9363 = t4027*t9356;
  t9364 = t9362 + t9363;
  t9367 = t4202*t9360;
  t9368 = t4170*t9364;
  t9369 = t9367 + t9368;
  t9371 = t4170*t9360;
  t9372 = -1.*t4202*t9364;
  t9373 = t9371 + t9372;
  t9390 = t2169*t25*t2141;
  t9391 = -1.*t25*t2129*t2156;
  t9392 = t9390 + t9391;
  t9386 = -1.*t25*t2141*t2129;
  t9387 = -1.*t2169*t25*t2156;
  t9388 = t9386 + t9387;
  t9396 = t2213*t9388;
  t9397 = t2198*t1708*t9392;
  t9398 = t9396 + t9397;
  t9400 = t2198*t9388;
  t9401 = -1.*t1708*t2213*t9392;
  t9402 = t9400 + t9401;
  t9404 = -1.*t4027*t9398;
  t9405 = t3999*t9402;
  t9406 = t9404 + t9405;
  t9408 = t3999*t9398;
  t9409 = t4027*t9402;
  t9410 = t9408 + t9409;
  t9412 = t4202*t9406;
  t9413 = t4170*t9410;
  t9414 = t9412 + t9413;
  t9416 = t4170*t9406;
  t9417 = -1.*t4202*t9410;
  t9418 = t9416 + t9417;
  t9431 = -1.*t2169*t5577;
  t9432 = t9279 + t9431;
  t9437 = t2213*t9432;
  t9438 = t2198*t1708*t8583;
  t9439 = t9437 + t9438;
  t9441 = t2198*t9432;
  t9442 = -1.*t1708*t2213*t8583;
  t9443 = t9441 + t9442;
  t9445 = -1.*t4027*t9439;
  t9446 = t3999*t9443;
  t9447 = t9445 + t9446;
  t9449 = t3999*t9439;
  t9450 = t4027*t9443;
  t9451 = t9449 + t9450;
  t9453 = t4202*t9447;
  t9454 = t4170*t9451;
  t9455 = t9453 + t9454;
  t9457 = t4170*t9447;
  t9458 = -1.*t4202*t9451;
  t9459 = t9457 + t9458;
  t9471 = t2152*t2141;
  t9472 = t2010*t2146*t2156;
  t9473 = t9471 + t9472;
  t9478 = -1.*t2129*t9473;
  t9479 = t9343 + t9478;
  t9475 = -1.*t2169*t9473;
  t9476 = t9340 + t9475;
  t9483 = t2213*t9476;
  t9484 = t2198*t1708*t9479;
  t9485 = t9483 + t9484;
  t9487 = t2198*t9476;
  t9488 = -1.*t1708*t2213*t9479;
  t9489 = t9487 + t9488;
  t9491 = -1.*t4027*t9485;
  t9492 = t3999*t9489;
  t9493 = t9491 + t9492;
  t9495 = t3999*t9485;
  t9496 = t4027*t9489;
  t9497 = t9495 + t9496;
  t9499 = t4202*t9493;
  t9500 = t4170*t9497;
  t9501 = t9499 + t9500;
  t9503 = t4170*t9493;
  t9504 = -1.*t4202*t9497;
  t9505 = t9503 + t9504;
  t9389 = t2224*t9388;
  t9393 = -0.1305*t27*t9392;
  t9394 = t2190*t9392;
  t9395 = t1708*t3753*t9392;
  t9399 = t4081*t9398;
  t9403 = t4156*t9402;
  t9407 = t4251*t9406;
  t9411 = t4272*t9410;
  t9415 = t4319*t9414;
  t9419 = t4357*t9418;
  t9420 = -1.*t4314*t9414;
  t9421 = t4296*t9418;
  t9422 = t9420 + t9421;
  t9423 = -0.7055*t9422;
  t9424 = t4296*t9414;
  t9425 = t4314*t9418;
  t9426 = t9424 + t9425;
  t9427 = 0.0184*t9426;
  t8629 = -1.*t2152*t25*t1708;
  t8630 = t27*t6553;
  t8633 = t8629 + t8630;
  t9533 = -1.*t3999*t2213*t8633;
  t9534 = -1.*t2198*t4027*t8633;
  t9535 = t9533 + t9534;
  t9537 = t2198*t3999*t8633;
  t9538 = -1.*t2213*t4027*t8633;
  t9539 = t9537 + t9538;
  t9541 = t4202*t9535;
  t9542 = t4170*t9539;
  t9543 = t9541 + t9542;
  t9545 = t4170*t9535;
  t9546 = -1.*t4202*t9539;
  t9547 = t9545 + t9546;
  t9519 = -0.135*t27;
  t9520 = -0.049*t1708;
  t9521 = t9519 + t9520;
  t9523 = 0.049*t27;
  t9524 = t9523 + t1781;
  t9559 = t2129*t9337;
  t9560 = t2169*t9473;
  t9561 = t9559 + t9560;
  t9563 = -1.*t25*t1708*t2010;
  t9564 = t27*t9561;
  t9565 = t9563 + t9564;
  t9572 = -1.*t3999*t2213*t9565;
  t9573 = -1.*t2198*t4027*t9565;
  t9574 = t9572 + t9573;
  t9576 = t2198*t3999*t9565;
  t9577 = -1.*t2213*t4027*t9565;
  t9578 = t9576 + t9577;
  t9580 = t4202*t9574;
  t9581 = t4170*t9578;
  t9582 = t9580 + t9581;
  t9584 = t4170*t9574;
  t9585 = -1.*t4202*t9578;
  t9586 = t9584 + t9585;
  t9598 = t25*t2141*t2129;
  t9599 = t2169*t25*t2156;
  t9600 = t9598 + t9599;
  t9602 = t1708*t2146;
  t9603 = t27*t9600;
  t9604 = t9602 + t9603;
  t9612 = -1.*t3999*t2213*t9604;
  t9613 = -1.*t2198*t4027*t9604;
  t9614 = t9612 + t9613;
  t9616 = t2198*t3999*t9604;
  t9617 = -1.*t2213*t4027*t9604;
  t9618 = t9616 + t9617;
  t9620 = t4202*t9614;
  t9621 = t4170*t9618;
  t9622 = t9620 + t9621;
  t9624 = t4170*t9614;
  t9625 = -1.*t4202*t9618;
  t9626 = t9624 + t9625;
  t9644 = -1.*t2213*t8583;
  t9645 = -1.*t2198*t8665;
  t9646 = t9644 + t9645;
  t9649 = t4027*t9646;
  t9650 = t9649 + t8702;
  t9652 = t3999*t9646;
  t9653 = -1.*t4027*t8692;
  t9654 = t9652 + t9653;
  t9656 = -1.*t4202*t9650;
  t9657 = t4170*t9654;
  t9658 = t9656 + t9657;
  t9660 = t4170*t9650;
  t9661 = t4202*t9654;
  t9662 = t9660 + t9661;
  t9637 = 0.049*t2198;
  t9638 = t9637 + t3610;
  t9640 = -0.09*t2198;
  t9641 = -0.049*t2213;
  t9642 = t9640 + t9641;
  t9674 = t27*t25*t2010;
  t9675 = t1708*t9561;
  t9676 = t9674 + t9675;
  t9678 = -1.*t2213*t9479;
  t9679 = -1.*t2198*t9676;
  t9680 = t9678 + t9679;
  t9682 = t2198*t9479;
  t9683 = -1.*t2213*t9676;
  t9684 = t9682 + t9683;
  t9686 = t4027*t9680;
  t9687 = t3999*t9684;
  t9688 = t9686 + t9687;
  t9690 = t3999*t9680;
  t9691 = -1.*t4027*t9684;
  t9692 = t9690 + t9691;
  t9694 = -1.*t4202*t9688;
  t9695 = t4170*t9692;
  t9696 = t9694 + t9695;
  t9698 = t4170*t9688;
  t9699 = t4202*t9692;
  t9700 = t9698 + t9699;
  t9712 = -1.*t27*t2146;
  t9713 = t1708*t9600;
  t9714 = t9712 + t9713;
  t9716 = -1.*t2213*t9392;
  t9717 = -1.*t2198*t9714;
  t9718 = t9716 + t9717;
  t9720 = t2198*t9392;
  t9721 = -1.*t2213*t9714;
  t9722 = t9720 + t9721;
  t9724 = t4027*t9718;
  t9725 = t3999*t9722;
  t9726 = t9724 + t9725;
  t9728 = t3999*t9718;
  t9729 = -1.*t4027*t9722;
  t9730 = t9728 + t9729;
  t9732 = -1.*t4202*t9726;
  t9733 = t4170*t9730;
  t9734 = t9732 + t9733;
  t9736 = t4170*t9726;
  t9737 = t4202*t9730;
  t9738 = t9736 + t9737;
  t9757 = -1.*t3999*t8678;
  t9758 = t9757 + t9653;
  t9760 = -1.*t4202*t8706;
  t9761 = t4170*t9758;
  t9762 = t9760 + t9761;
  t9764 = t4202*t9758;
  t9765 = t8799 + t9764;
  t9749 = -0.21*t3999;
  t9750 = -0.049*t4027;
  t9751 = t9749 + t9750;
  t9753 = 0.049*t3999;
  t9754 = t9753 + t4059;
  t9776 = t2213*t9479;
  t9777 = t2198*t9676;
  t9778 = t9776 + t9777;
  t9781 = -1.*t4027*t9778;
  t9782 = t9781 + t9687;
  t9784 = -1.*t3999*t9778;
  t9785 = t9784 + t9691;
  t9787 = -1.*t4202*t9782;
  t9788 = t4170*t9785;
  t9789 = t9787 + t9788;
  t9791 = t4170*t9782;
  t9792 = t4202*t9785;
  t9793 = t9791 + t9792;
  t9804 = t2213*t9392;
  t9805 = t2198*t9714;
  t9806 = t9804 + t9805;
  t9809 = -1.*t4027*t9806;
  t9810 = t9809 + t9725;
  t9812 = -1.*t3999*t9806;
  t9813 = t9812 + t9729;
  t9815 = -1.*t4202*t9810;
  t9816 = t4170*t9813;
  t9817 = t9815 + t9816;
  t9819 = t4170*t9810;
  t9820 = t4202*t9813;
  t9821 = t9819 + t9820;
  t9839 = -1.*t4170*t8743;
  t9840 = t9760 + t9839;
  t8827 = t4296*t8808;
  t9832 = 0.0016*t4170;
  t9833 = t9832 + t4268;
  t9835 = -0.2707*t4170;
  t9836 = -0.0016*t4202;
  t9837 = t9835 + t9836;
  t9852 = t3999*t9778;
  t9853 = t4027*t9684;
  t9854 = t9852 + t9853;
  t9856 = -1.*t4170*t9854;
  t9857 = t9787 + t9856;
  t9859 = -1.*t4202*t9854;
  t9860 = t9791 + t9859;
  t9872 = t3999*t9806;
  t9873 = t4027*t9722;
  t9874 = t9872 + t9873;
  t9876 = -1.*t4170*t9874;
  t9877 = t9815 + t9876;
  t9879 = -1.*t4202*t9874;
  t9880 = t9819 + t9879;
  t8824 = -1.*t4314*t8775;
  t8829 = t8824 + t8827;
  t9847 = -1.*t4314*t8808;
  t9891 = -0.7055*t4296;
  t9892 = 0.0184*t4314;
  t9893 = t9891 + t9892;
  t9895 = -0.0184*t4296;
  t9896 = t9895 + t4316;
  t9903 = t4202*t9782;
  t9904 = t4170*t9854;
  t9905 = t9903 + t9904;
  t9863 = t4296*t9860;
  t9867 = -1.*t4314*t9860;
  t9915 = t4202*t9810;
  t9916 = t4170*t9874;
  t9917 = t9915 + t9916;
  t9883 = t4296*t9880;
  t9887 = -1.*t4314*t9880;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=t2139*t2164 + t2179*t2183 + t2190*t2196 + t2224*t2385 - 1.*t1790*t2010*t25 - 0.1305*(t1708*t2010*t25 + t2196*t27) + t3753*t3950 + t4081*t4093 + t4156*t4162 + t4251*t4260 + t4272*t4291 + t4319*t4333 + t4357*t4376 - 0.7055*(-1.*t4314*t4333 + t4296*t4376) + 0.0184*(t4296*t4333 + t4314*t4376);
  p_output1[10]=t1790*t2152*t25 + t2139*t4848 + t2179*t5577 + t2190*t6553 + t2224*t8583 - 0.1305*t8633 + t3753*t8665 + t4081*t8678 + t4156*t8692 + t4251*t8706 + t4272*t8743 + t4319*t8775 + t4357*t8808 + 0.0184*(t4296*t8775 + t4314*t8808) - 0.7055*t8829;
  p_output1[11]=0;
  p_output1[12]=-1.*t1790*t2146*t2152 + t2139*t2141*t2152*t25 + t2152*t2156*t2179*t25 + t2190*t8913 - 0.1305*(t1708*t2146*t2152 + t27*t8913) + t2224*t8926 + t3753*t8950 + t4081*t8961 + t4156*t8979 + t4251*t8986 + t4272*t9000 + t4319*t9018 + t4357*t9029 - 0.7055*(-1.*t4314*t9018 + t4296*t9029) + 0.0184*(t4296*t9018 + t4314*t9029);
  p_output1[13]=-1.*t1790*t2010*t2146 + t2010*t2139*t2141*t25 + t2010*t2156*t2179*t25 + t2190*t9080 - 0.1305*(t1708*t2010*t2146 + t27*t9080) + t2224*t9091 + t3753*t9117 + t4081*t9124 + t4156*t9134 + t4251*t9144 + t4272*t9151 + t4319*t9167 + t4357*t9173 - 0.7055*(-1.*t4314*t9167 + t4296*t9173) + 0.0184*(t4296*t9167 + t4314*t9173);
  p_output1[14]=-1.*t2139*t2141*t2146 - 1.*t2146*t2156*t2179 - 1.*t1790*t25 + t2190*t9200 - 0.1305*(t1708*t25 + t27*t9200) + t2224*t9205 + t3753*t9218 + t4081*t9229 + t4156*t9234 + t4251*t9240 + t4272*t9244 + t4319*t9250 + t4357*t9257 - 0.7055*(-1.*t4314*t9250 + t4296*t9257) + 0.0184*(t4296*t9250 + t4314*t9257);
  p_output1[15]=t2179*t4848 + t2139*t9277 + t2224*t9281 + t2190*t9284 - 0.1305*t27*t9284 + t1708*t3753*t9284 + t4081*t9292 + t4156*t9296 + t4251*t9301 + t4272*t9308 + t4319*t9314 + t4357*t9318 - 0.7055*(-1.*t4314*t9314 + t4296*t9318) + 0.0184*(t4296*t9314 + t4314*t9318);
  p_output1[16]=t2139*t2183 + t2179*t9337 + t2224*t9341 + t2190*t9345 - 0.1305*t27*t9345 + t1708*t3753*t9345 + t4081*t9351 + t4156*t9356 + t4251*t9360 + t4272*t9364 + t4319*t9369 + t4357*t9373 - 0.7055*(-1.*t4314*t9369 + t4296*t9373) + 0.0184*(t4296*t9369 + t4314*t9373);
  p_output1[17]=-1.*t2139*t2156*t25 + t2141*t2179*t25 + t9389 + t9393 + t9394 + t9395 + t9399 + t9403 + t9407 + t9411 + t9415 + t9419 + t9423 + t9427;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0.135*t2169*t4848 - 0.135*t2129*t5577 + t2190*t8583 - 0.1305*t27*t8583 + t1708*t3753*t8583 + t2224*t9432 + t4081*t9439 + t4156*t9443 + t4251*t9447 + t4272*t9451 + t4319*t9455 + t4357*t9459 - 0.7055*(-1.*t4314*t9455 + t4296*t9459) + 0.0184*(t4296*t9455 + t4314*t9459);
  p_output1[40]=0.135*t2169*t9337 - 0.135*t2129*t9473 + t2224*t9476 + t2190*t9479 - 0.1305*t27*t9479 + t1708*t3753*t9479 + t4081*t9485 + t4156*t9489 + t4251*t9493 + t4272*t9497 + t4319*t9501 + t4357*t9505 - 0.7055*(-1.*t4314*t9501 + t4296*t9505) + 0.0184*(t4296*t9501 + t4314*t9505);
  p_output1[41]=-0.135*t2129*t2156*t25 + 0.135*t2141*t2169*t25 + t9389 + t9393 + t9394 + t9395 + t9399 + t9403 + t9407 + t9411 + t9415 + t9419 + t9423 + t9427;
  p_output1[42]=-0.1305*(-1.*t2152*t25*t27 - 1.*t1708*t6553) + t3753*t8633 + t2198*t4081*t8633 - 1.*t2213*t4156*t8633 + t2152*t25*t9521 + t6553*t9524 + t4251*t9535 + t4272*t9539 + t4319*t9543 + t4357*t9547 - 0.7055*(-1.*t4314*t9543 + t4296*t9547) + 0.0184*(t4296*t9543 + t4314*t9547);
  p_output1[43]=t2010*t25*t9521 + t9524*t9561 - 0.1305*(t3781 - 1.*t1708*t9561) + t3753*t9565 + t2198*t4081*t9565 - 1.*t2213*t4156*t9565 + t4251*t9574 + t4272*t9578 + t4319*t9582 + t4357*t9586 - 0.7055*(-1.*t4314*t9582 + t4296*t9586) + 0.0184*(t4296*t9582 + t4314*t9586);
  p_output1[44]=-1.*t2146*t9521 + t9524*t9600 - 0.1305*(t2146*t27 - 1.*t1708*t9600) + t3753*t9604 + t2198*t4081*t9604 - 1.*t2213*t4156*t9604 + t4251*t9614 + t4272*t9618 + t4319*t9622 + t4357*t9626 - 0.7055*(-1.*t4314*t9622 + t4296*t9626) + 0.0184*(t4296*t9622 + t4314*t9626);
  p_output1[45]=t4081*t8692 + t8583*t9638 + t8665*t9642 + t4156*t9646 + t4272*t9650 + t4251*t9654 + t4357*t9658 + t4319*t9662 + 0.0184*(t4314*t9658 + t4296*t9662) - 0.7055*(t4296*t9658 - 1.*t4314*t9662);
  p_output1[46]=t9479*t9638 + t9642*t9676 + t4156*t9680 + t4081*t9684 + t4272*t9688 + t4251*t9692 + t4357*t9696 + t4319*t9700 + 0.0184*(t4314*t9696 + t4296*t9700) - 0.7055*(t4296*t9696 - 1.*t4314*t9700);
  p_output1[47]=t9392*t9638 + t9642*t9714 + t4156*t9718 + t4081*t9722 + t4272*t9726 + t4251*t9730 + t4357*t9734 + t4319*t9738 + 0.0184*(t4314*t9734 + t4296*t9738) - 0.7055*(t4296*t9734 - 1.*t4314*t9738);
  p_output1[48]=t4272*t8706 + t8678*t9751 + t8692*t9754 + t4251*t9758 + t4357*t9762 + t4319*t9765 + 0.0184*(t4314*t9762 + t4296*t9765) - 0.7055*(t4296*t9762 - 1.*t4314*t9765);
  p_output1[49]=t9684*t9754 + t9751*t9778 + t4272*t9782 + t4251*t9785 + t4357*t9789 + t4319*t9793 + 0.0184*(t4314*t9789 + t4296*t9793) - 0.7055*(t4296*t9789 - 1.*t4314*t9793);
  p_output1[50]=t9722*t9754 + t9751*t9806 + t4272*t9810 + t4251*t9813 + t4357*t9817 + t4319*t9821 + 0.0184*(t4314*t9817 + t4296*t9821) - 0.7055*(t4296*t9817 - 1.*t4314*t9821);
  p_output1[51]=t4319*t8808 + t8706*t9833 + t8743*t9837 + t4357*t9840 + 0.0184*(t8827 + t4314*t9840) - 0.7055*(t4296*t9840 + t9847);
  p_output1[52]=t9782*t9833 + t9837*t9854 + t4357*t9857 + t4319*t9860 + 0.0184*(t4314*t9857 + t9863) - 0.7055*(t4296*t9857 + t9867);
  p_output1[53]=t9810*t9833 + t9837*t9874 + t4357*t9877 + t4319*t9880 + 0.0184*(t4314*t9877 + t9883) - 0.7055*(t4296*t9877 + t9887);
  p_output1[54]=0.0184*t8829 - 0.7055*(-1.*t4296*t8775 + t9847) + t8775*t9893 + t8808*t9896;
  p_output1[55]=t9860*t9896 + t9893*t9905 - 0.7055*(t9867 - 1.*t4296*t9905) + 0.0184*(t9863 - 1.*t4314*t9905);
  p_output1[56]=t9880*t9896 + t9893*t9917 - 0.7055*(t9887 - 1.*t4296*t9917) + 0.0184*(t9883 - 1.*t4314*t9917);
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 20 && ncols == 1) && 
      !(mrows == 1 && ncols == 20))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 20, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "J_ankle_joint_right_mex.hh"

namespace SymExpression
{

void J_ankle_joint_right_mex_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
