/*
 * Automatically Generated from Mathematica.
 * Mon 2 Jul 2018 15:37:23 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "J_VectorNav_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t35;
  double t154;
  double t555;
  double t723;
  double t817;
  double t819;
  double t932;
  double t1028;
  double t1288;
  double t1353;
  double t1489;
  double t1646;
  double t1201;
  double t1245;
  double t1276;
  double t1720;
  double t1736;
  double t1768;
  double t2098;
  double t2141;
  double t2200;
  double t2205;
  double t2030;
  double t2042;
  double t2090;
  double t2651;
  double t2731;
  double t2740;
  double t3028;
  double t3039;
  double t3241;
  double t3478;
  double t2900;
  double t2932;
  double t2971;
  double t3663;
  double t3670;
  double t3710;
  double t3972;
  double t4025;
  double t4030;
  double t4078;
  double t3885;
  double t3924;
  double t3933;
  double t4323;
  double t4347;
  double t4404;
  double t163;
  double t183;
  double t326;
  double t565;
  double t594;
  double t855;
  double t934;
  double t976;
  double t1070;
  double t1118;
  double t1188;
  double t1609;
  double t1656;
  double t1664;
  double t1799;
  double t1814;
  double t1818;
  double t5025;
  double t5060;
  double t5066;
  double t5118;
  double t5146;
  double t5150;
  double t2201;
  double t2273;
  double t2298;
  double t2772;
  double t2831;
  double t2845;
  double t5168;
  double t5212;
  double t5217;
  double t5352;
  double t5367;
  double t5383;
  double t3366;
  double t3484;
  double t3620;
  double t3730;
  double t3749;
  double t3805;
  double t5426;
  double t5457;
  double t5480;
  double t5533;
  double t5543;
  double t5566;
  double t4054;
  double t4087;
  double t4204;
  double t4418;
  double t4504;
  double t4561;
  double t5613;
  double t5625;
  double t5707;
  double t5775;
  double t5782;
  double t5786;
  double t6142;
  double t6147;
  double t6149;
  double t6171;
  double t6172;
  double t6200;
  double t6232;
  double t6282;
  double t6292;
  double t6309;
  double t6323;
  double t6325;
  double t6348;
  double t6373;
  double t6389;
  double t6458;
  double t6515;
  double t6526;
  double t6884;
  double t6897;
  double t6909;
  double t6916;
  double t6925;
  double t6943;
  double t6979;
  double t6981;
  double t7003;
  double t7030;
  double t7034;
  double t7035;
  double t7115;
  double t7131;
  double t7160;
  double t7168;
  double t7174;
  double t7176;
  double t6690;
  double t6706;
  double t6731;
  double t7362;
  double t7363;
  double t7364;
  double t7384;
  double t7385;
  double t7386;
  double t7406;
  double t7407;
  double t7425;
  double t7441;
  double t7448;
  double t7460;
  double t7509;
  double t7553;
  double t7584;
  double t7643;
  double t7677;
  double t7678;
  double t7931;
  double t7954;
  double t7960;
  double t7982;
  double t7984;
  double t7990;
  double t8149;
  double t8151;
  double t8188;
  double t8230;
  double t8255;
  double t8259;
  double t8335;
  double t8345;
  double t8383;
  double t8283;
  double t8285;
  double t8317;
  double t7840;
  double t7851;
  double t7853;
  double t8551;
  double t8583;
  double t8584;
  double t8596;
  double t8615;
  double t8626;
  double t8634;
  double t8644;
  double t8648;
  double t8651;
  double t8654;
  double t8666;
  double t8677;
  double t8687;
  double t8736;
  double t8739;
  double t8742;
  double t8712;
  double t8720;
  double t8728;
  double t8465;
  double t8481;
  double t8888;
  double t8892;
  double t8893;
  double t8940;
  double t8942;
  double t8945;
  double t8955;
  double t8957;
  double t8965;
  double t8976;
  double t8977;
  double t8984;
  double t8985;
  double t8986;
  double t8998;
  double t8999;
  double t9009;
  double t8991;
  double t8992;
  double t8996;
  double t7966;
  double t8054;
  double t8214;
  double t8266;
  double t8329;
  double t8386;
  double t8413;
  double t8420;
  double t8425;
  double t8426;
  double t8440;
  double t8442;
  double t8457;
  double t8458;
  double t9043;
  double t9044;
  double t9048;
  double t9050;
  double t9051;
  double t9065;
  double t9066;
  double t9069;
  double t9070;
  double t9073;
  double t9075;
  double t9076;
  double t9086;
  double t9087;
  double t9089;
  double t9079;
  double t9082;
  double t9084;
  double t9106;
  double t9107;
  double t9111;
  double t9114;
  double t9116;
  double t9118;
  double t9119;
  double t9123;
  double t9125;
  double t9126;
  double t9131;
  double t9132;
  double t9135;
  double t9147;
  double t9148;
  double t9150;
  double t9138;
  double t9139;
  double t9141;
  double t9172;
  double t9174;
  double t9175;
  double t9183;
  double t9184;
  double t9186;
  double t9188;
  double t9198;
  double t9199;
  double t9200;
  double t9190;
  double t9195;
  double t9196;
  double t9164;
  double t9166;
  double t9176;
  double t9178;
  double t9180;
  double t9222;
  double t9223;
  double t9234;
  double t9235;
  double t9236;
  double t9226;
  double t9230;
  double t9252;
  double t9253;
  double t9256;
  double t9262;
  double t9263;
  double t9265;
  double t9267;
  double t9276;
  double t9277;
  double t9278;
  double t9270;
  double t9272;
  double t9273;
  double t9305;
  double t9306;
  double t9308;
  double t9323;
  double t9324;
  double t9318;
  double t9319;
  double t9302;
  double t9303;
  double t9311;
  double t9312;
  double t9313;
  double t9355;
  double t9356;
  double t5971;
  double t9372;
  double t9373;
  double t9375;
  double t9386;
  double t9387;
  double t9381;
  double t9383;
  double t9404;
  double t9405;
  double t9406;
  double t9331;
  double t9336;
  double t9400;
  double t9401;
  double t9407;
  double t9408;
  double t9409;
  double t9361;
  double t5998;
  double t6006;
  double t9429;
  double t9430;
  double t9432;
  double t9391;
  double t9394;
  t35 = Sin(var1[7]);
  t154 = Cos(var1[8]);
  t555 = Sin(var1[8]);
  t723 = Cos(var1[9]);
  t817 = -1.*t723;
  t819 = 1. + t817;
  t932 = Sin(var1[9]);
  t1028 = Cos(var1[7]);
  t1288 = Cos(var1[10]);
  t1353 = -1.*t1288;
  t1489 = 1. + t1353;
  t1646 = Sin(var1[10]);
  t1201 = -1.*t723*t35*t555;
  t1245 = -1.*t1028*t932;
  t1276 = t1201 + t1245;
  t1720 = -1.*t1028*t723;
  t1736 = t35*t555*t932;
  t1768 = t1720 + t1736;
  t2098 = Cos(var1[11]);
  t2141 = -1.*t2098;
  t2200 = 1. + t2141;
  t2205 = Sin(var1[11]);
  t2030 = t1288*t1276;
  t2042 = t1768*t1646;
  t2090 = t2030 + t2042;
  t2651 = t1288*t1768;
  t2731 = -1.*t1276*t1646;
  t2740 = t2651 + t2731;
  t3028 = Cos(var1[12]);
  t3039 = -1.*t3028;
  t3241 = 1. + t3039;
  t3478 = Sin(var1[12]);
  t2900 = t2098*t2090;
  t2932 = t2740*t2205;
  t2971 = t2900 + t2932;
  t3663 = t2098*t2740;
  t3670 = -1.*t2090*t2205;
  t3710 = t3663 + t3670;
  t3972 = Cos(var1[13]);
  t4025 = -1.*t3972;
  t4030 = 1. + t4025;
  t4078 = Sin(var1[13]);
  t3885 = t3028*t2971;
  t3924 = t3710*t3478;
  t3933 = t3885 + t3924;
  t4323 = t3028*t3710;
  t4347 = -1.*t2971*t3478;
  t4404 = t4323 + t4347;
  t163 = -1.*t154;
  t183 = 1. + t163;
  t326 = -0.135*t183;
  t565 = 0.049*t555;
  t594 = 0. + t326 + t565;
  t855 = -0.049*t819;
  t934 = -0.09*t932;
  t976 = 0. + t855 + t934;
  t1070 = -0.09*t819;
  t1118 = 0.049*t932;
  t1188 = 0. + t1070 + t1118;
  t1609 = -0.049*t1489;
  t1656 = -0.21*t1646;
  t1664 = 0. + t1609 + t1656;
  t1799 = -0.21*t1489;
  t1814 = 0.049*t1646;
  t1818 = 0. + t1799 + t1814;
  t5025 = t1028*t723*t555;
  t5060 = -1.*t35*t932;
  t5066 = t5025 + t5060;
  t5118 = -1.*t723*t35;
  t5146 = -1.*t1028*t555*t932;
  t5150 = t5118 + t5146;
  t2201 = -0.0016*t2200;
  t2273 = -0.2707*t2205;
  t2298 = 0. + t2201 + t2273;
  t2772 = -0.2707*t2200;
  t2831 = 0.0016*t2205;
  t2845 = 0. + t2772 + t2831;
  t5168 = t1288*t5066;
  t5212 = t5150*t1646;
  t5217 = t5168 + t5212;
  t5352 = t1288*t5150;
  t5367 = -1.*t5066*t1646;
  t5383 = t5352 + t5367;
  t3366 = 0.0184*t3241;
  t3484 = -0.7055*t3478;
  t3620 = 0. + t3366 + t3484;
  t3730 = -0.7055*t3241;
  t3749 = -0.0184*t3478;
  t3805 = 0. + t3730 + t3749;
  t5426 = t2098*t5217;
  t5457 = t5383*t2205;
  t5480 = t5426 + t5457;
  t5533 = t2098*t5383;
  t5543 = -1.*t5217*t2205;
  t5566 = t5533 + t5543;
  t4054 = -0.0216*t4030;
  t4087 = -1.1135*t4078;
  t4204 = 0. + t4054 + t4087;
  t4418 = -1.1135*t4030;
  t4504 = 0.0216*t4078;
  t4561 = 0. + t4418 + t4504;
  t5613 = t3028*t5480;
  t5625 = t5566*t3478;
  t5707 = t5613 + t5625;
  t5775 = t3028*t5566;
  t5782 = -1.*t5480*t3478;
  t5786 = t5775 + t5782;
  t6142 = -1.*t723*t1288*t555;
  t6147 = t555*t932*t1646;
  t6149 = t6142 + t6147;
  t6171 = t1288*t555*t932;
  t6172 = t723*t555*t1646;
  t6200 = t6171 + t6172;
  t6232 = t2098*t6149;
  t6282 = t6200*t2205;
  t6292 = t6232 + t6282;
  t6309 = t2098*t6200;
  t6323 = -1.*t6149*t2205;
  t6325 = t6309 + t6323;
  t6348 = t3028*t6292;
  t6373 = t6325*t3478;
  t6389 = t6348 + t6373;
  t6458 = t3028*t6325;
  t6515 = -1.*t6292*t3478;
  t6526 = t6458 + t6515;
  t6884 = t1028*t154*t723*t1288;
  t6897 = -1.*t1028*t154*t932*t1646;
  t6909 = t6884 + t6897;
  t6916 = -1.*t1028*t154*t1288*t932;
  t6925 = -1.*t1028*t154*t723*t1646;
  t6943 = t6916 + t6925;
  t6979 = t2098*t6909;
  t6981 = t6943*t2205;
  t7003 = t6979 + t6981;
  t7030 = t2098*t6943;
  t7034 = -1.*t6909*t2205;
  t7035 = t7030 + t7034;
  t7115 = t3028*t7003;
  t7131 = t7035*t3478;
  t7160 = t7115 + t7131;
  t7168 = t3028*t7035;
  t7174 = -1.*t7003*t3478;
  t7176 = t7168 + t7174;
  t6690 = 0.049*t154;
  t6706 = -0.135*t555;
  t6731 = t6690 + t6706;
  t7362 = t154*t723*t1288*t35;
  t7363 = -1.*t154*t35*t932*t1646;
  t7364 = t7362 + t7363;
  t7384 = -1.*t154*t1288*t35*t932;
  t7385 = -1.*t154*t723*t35*t1646;
  t7386 = t7384 + t7385;
  t7406 = t2098*t7364;
  t7407 = t7386*t2205;
  t7425 = t7406 + t7407;
  t7441 = t2098*t7386;
  t7448 = -1.*t7364*t2205;
  t7460 = t7441 + t7448;
  t7509 = t3028*t7425;
  t7553 = t7460*t3478;
  t7584 = t7509 + t7553;
  t7643 = t3028*t7460;
  t7677 = -1.*t7425*t3478;
  t7678 = t7643 + t7677;
  t7931 = -1.*t154*t1288*t932;
  t7954 = -1.*t154*t723*t1646;
  t7960 = t7931 + t7954;
  t7982 = -1.*t154*t723*t1288;
  t7984 = t154*t932*t1646;
  t7990 = t7982 + t7984;
  t8149 = t2098*t7960;
  t8151 = t7990*t2205;
  t8188 = t8149 + t8151;
  t8230 = t2098*t7990;
  t8255 = -1.*t7960*t2205;
  t8259 = t8230 + t8255;
  t8335 = t3028*t8259;
  t8345 = -1.*t8188*t3478;
  t8383 = t8335 + t8345;
  t8283 = t3028*t8188;
  t8285 = t8259*t3478;
  t8317 = t8283 + t8285;
  t7840 = -0.09*t723;
  t7851 = -0.049*t932;
  t7853 = t7840 + t7851;
  t8551 = -1.*t1028*t723*t555;
  t8583 = t35*t932;
  t8584 = t8551 + t8583;
  t8596 = t8584*t1646;
  t8615 = t5352 + t8596;
  t8626 = t1288*t8584;
  t8634 = -1.*t5150*t1646;
  t8644 = t8626 + t8634;
  t8648 = t2098*t8615;
  t8651 = t8644*t2205;
  t8654 = t8648 + t8651;
  t8666 = t2098*t8644;
  t8677 = -1.*t8615*t2205;
  t8687 = t8666 + t8677;
  t8736 = t3028*t8687;
  t8739 = -1.*t8654*t3478;
  t8742 = t8736 + t8739;
  t8712 = t3028*t8654;
  t8720 = t8687*t3478;
  t8728 = t8712 + t8720;
  t8465 = 0.049*t723;
  t8481 = t8465 + t934;
  t8888 = t1028*t723;
  t8892 = -1.*t35*t555*t932;
  t8893 = t8888 + t8892;
  t8940 = t1288*t8893;
  t8942 = t1276*t1646;
  t8945 = t8940 + t8942;
  t8955 = -1.*t8893*t1646;
  t8957 = t2030 + t8955;
  t8965 = t2098*t8945;
  t8976 = t8957*t2205;
  t8977 = t8965 + t8976;
  t8984 = t2098*t8957;
  t8985 = -1.*t8945*t2205;
  t8986 = t8984 + t8985;
  t8998 = t3028*t8986;
  t8999 = -1.*t8977*t3478;
  t9009 = t8998 + t8999;
  t8991 = t3028*t8977;
  t8992 = t8986*t3478;
  t8996 = t8991 + t8992;
  t7966 = t7960*t2298;
  t8054 = t7990*t2845;
  t8214 = t8188*t3620;
  t8266 = t8259*t3805;
  t8329 = t8317*t4204;
  t8386 = t8383*t4561;
  t8413 = t3972*t8383;
  t8420 = -1.*t8317*t4078;
  t8425 = t8413 + t8420;
  t8426 = -1.1312*t8425;
  t8440 = t3972*t8317;
  t8442 = t8383*t4078;
  t8457 = t8440 + t8442;
  t8458 = 0.0306*t8457;
  t9043 = 0.049*t1288;
  t9044 = t9043 + t1656;
  t9048 = -0.21*t1288;
  t9050 = -0.049*t1646;
  t9051 = t9048 + t9050;
  t9065 = -1.*t1288*t5066;
  t9066 = t9065 + t8634;
  t9069 = t9066*t2205;
  t9070 = t5533 + t9069;
  t9073 = t2098*t9066;
  t9075 = -1.*t5383*t2205;
  t9076 = t9073 + t9075;
  t9086 = t3028*t9076;
  t9087 = -1.*t9070*t3478;
  t9089 = t9086 + t9087;
  t9079 = t3028*t9070;
  t9082 = t9076*t3478;
  t9084 = t9079 + t9082;
  t9106 = t723*t35*t555;
  t9107 = t1028*t932;
  t9111 = t9106 + t9107;
  t9114 = -1.*t9111*t1646;
  t9116 = t8940 + t9114;
  t9118 = -1.*t1288*t9111;
  t9119 = t9118 + t8955;
  t9123 = t2098*t9116;
  t9125 = t9119*t2205;
  t9126 = t9123 + t9125;
  t9131 = t2098*t9119;
  t9132 = -1.*t9116*t2205;
  t9135 = t9131 + t9132;
  t9147 = t3028*t9135;
  t9148 = -1.*t9126*t3478;
  t9150 = t9147 + t9148;
  t9138 = t3028*t9126;
  t9139 = t9135*t3478;
  t9141 = t9138 + t9139;
  t9172 = t154*t723*t1288;
  t9174 = -1.*t154*t932*t1646;
  t9175 = t9172 + t9174;
  t9183 = -1.*t9175*t2205;
  t9184 = t8149 + t9183;
  t9186 = -1.*t2098*t9175;
  t9188 = t9186 + t8255;
  t9198 = t3028*t9188;
  t9199 = -1.*t9184*t3478;
  t9200 = t9198 + t9199;
  t9190 = t3028*t9184;
  t9195 = t9188*t3478;
  t9196 = t9190 + t9195;
  t9164 = 0.0016*t2098;
  t9166 = t9164 + t2273;
  t9176 = -0.2707*t2098;
  t9178 = -0.0016*t2205;
  t9180 = t9176 + t9178;
  t9222 = -1.*t2098*t5217;
  t9223 = t9222 + t9075;
  t9234 = t3028*t9223;
  t9235 = -1.*t5566*t3478;
  t9236 = t9234 + t9235;
  t9226 = t9223*t3478;
  t9230 = t5775 + t9226;
  t9252 = t1288*t9111;
  t9253 = t8893*t1646;
  t9256 = t9252 + t9253;
  t9262 = -1.*t9256*t2205;
  t9263 = t9123 + t9262;
  t9265 = -1.*t2098*t9256;
  t9267 = t9265 + t9132;
  t9276 = t3028*t9267;
  t9277 = -1.*t9263*t3478;
  t9278 = t9276 + t9277;
  t9270 = t3028*t9263;
  t9272 = t9267*t3478;
  t9273 = t9270 + t9272;
  t9305 = t2098*t9175;
  t9306 = t7960*t2205;
  t9308 = t9305 + t9306;
  t9323 = -1.*t3028*t9308;
  t9324 = t9323 + t9199;
  t9318 = -1.*t9308*t3478;
  t9319 = t9190 + t9318;
  t9302 = -0.0184*t3028;
  t9303 = t9302 + t3484;
  t9311 = -0.7055*t3028;
  t9312 = 0.0184*t3478;
  t9313 = t9311 + t9312;
  t9355 = -1.*t3028*t5480;
  t9356 = t9355 + t9235;
  t5971 = t3972*t5786;
  t9372 = t2098*t9256;
  t9373 = t9116*t2205;
  t9375 = t9372 + t9373;
  t9386 = -1.*t3028*t9375;
  t9387 = t9386 + t9277;
  t9381 = -1.*t9375*t3478;
  t9383 = t9270 + t9381;
  t9404 = t3028*t9308;
  t9405 = t9184*t3478;
  t9406 = t9404 + t9405;
  t9331 = -1.*t9319*t4078;
  t9336 = t3972*t9319;
  t9400 = 0.0216*t3972;
  t9401 = t9400 + t4087;
  t9407 = -1.1135*t3972;
  t9408 = -0.0216*t4078;
  t9409 = t9407 + t9408;
  t9361 = -1.*t5786*t4078;
  t5998 = -1.*t5707*t4078;
  t6006 = t5971 + t5998;
  t9429 = t3028*t9375;
  t9430 = t9263*t3478;
  t9432 = t9429 + t9430;
  t9391 = -1.*t9383*t4078;
  t9394 = t3972*t9383;

  p_output1(0)=0;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=0;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=0;
  p_output1(9)=0;
  p_output1(10)=0;
  p_output1(11)=0;
  p_output1(12)=0;
  p_output1(13)=0;
  p_output1(14)=0;
  p_output1(15)=0;
  p_output1(16)=0;
  p_output1(17)=0;
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=-1.*t1028*t1188 + t1276*t1664 + t1768*t1818 + t2090*t2298 + t2740*t2845 - 0.135*t35 + 0.1305*t154*t35 + t2971*t3620 + t3710*t3805 + t3933*t4204 - 1.1312*(-1.*t3933*t4078 + t3972*t4404) + 0.0306*(t3933*t3972 + t4078*t4404) + t4404*t4561 - 1.*t35*t594 - 1.*t35*t555*t976;
  p_output1(23)=0.135*t1028 - 0.1305*t1028*t154 - 1.*t1188*t35 + t1664*t5066 + t1818*t5150 + t2298*t5217 + t2845*t5383 + t3620*t5480 + t3805*t5566 + t4204*t5707 + t4561*t5786 + 0.0306*(t3972*t5707 + t4078*t5786) + t1028*t594 - 1.1312*t6006 + t1028*t555*t976;
  p_output1(24)=-0.004500000000000004*t154 - 0.049*t555 + t2298*t6149 + t2845*t6200 + t3620*t6292 + t3805*t6325 + t4204*t6389 + t4561*t6526 - 1.1312*(-1.*t4078*t6389 + t3972*t6526) + 0.0306*(t3972*t6389 + t4078*t6526) - 1.*t1664*t555*t723 + t1818*t555*t932 - 1.*t555*t976;
  p_output1(25)=0.1305*t1028*t555 + t1028*t6731 + t2298*t6909 + t2845*t6943 + t3620*t7003 + t3805*t7035 + t4204*t7160 + t4561*t7176 - 1.1312*(-1.*t4078*t7160 + t3972*t7176) + 0.0306*(t3972*t7160 + t4078*t7176) + t1028*t154*t1664*t723 - 1.*t1028*t154*t1818*t932 + t1028*t154*t976;
  p_output1(26)=0.1305*t35*t555 + t35*t6731 + t154*t1664*t35*t723 + t2298*t7364 + t2845*t7386 + t3620*t7425 + t3805*t7460 + t4204*t7584 + t4561*t7678 - 1.1312*(-1.*t4078*t7584 + t3972*t7678) + 0.0306*(t3972*t7584 + t4078*t7678) - 1.*t154*t1818*t35*t932 + t154*t35*t976;
  p_output1(27)=-1.*t154*t1818*t723 + t154*t7853 + t7966 + t8054 + t8214 + t8266 + t8329 + t8386 + t8426 + t8458 - 1.*t154*t1664*t932;
  p_output1(28)=t1664*t5150 + t1028*t555*t7853 - 1.*t35*t8481 + t1818*t8584 + t2298*t8615 + t2845*t8644 + t3620*t8654 + t3805*t8687 + t4204*t8728 + t4561*t8742 - 1.1312*(-1.*t4078*t8728 + t3972*t8742) + 0.0306*(t3972*t8728 + t4078*t8742);
  p_output1(29)=t1276*t1818 + t35*t555*t7853 + t1028*t8481 + t1664*t8893 + t2298*t8945 + t2845*t8957 + t3620*t8977 + t3805*t8986 + t4204*t8996 + t4561*t9009 - 1.1312*(-1.*t4078*t8996 + t3972*t9009) + 0.0306*(t3972*t8996 + t4078*t9009);
  p_output1(30)=t7966 + t8054 + t8214 + t8266 + t8329 + t8386 + t8426 + t8458 + t154*t723*t9051 - 1.*t154*t9044*t932;
  p_output1(31)=t2298*t5383 + t5150*t9044 + t5066*t9051 + t2845*t9066 + t3620*t9070 + t3805*t9076 + t4204*t9084 + t4561*t9089 - 1.1312*(-1.*t4078*t9084 + t3972*t9089) + 0.0306*(t3972*t9084 + t4078*t9089);
  p_output1(32)=t8893*t9044 + t9051*t9111 + t2298*t9116 + t2845*t9119 + t3620*t9126 + t3805*t9135 + t4204*t9141 + t4561*t9150 - 1.1312*(-1.*t4078*t9141 + t3972*t9150) + 0.0306*(t3972*t9141 + t4078*t9150);
  p_output1(33)=t7960*t9166 + t9175*t9180 + t3620*t9184 + t3805*t9188 + t4204*t9196 + t4561*t9200 - 1.1312*(-1.*t4078*t9196 + t3972*t9200) + 0.0306*(t3972*t9196 + t4078*t9200);
  p_output1(34)=t3620*t5566 + t5383*t9166 + t5217*t9180 + t3805*t9223 + t4204*t9230 + t4561*t9236 - 1.1312*(-1.*t4078*t9230 + t3972*t9236) + 0.0306*(t3972*t9230 + t4078*t9236);
  p_output1(35)=t9116*t9166 + t9180*t9256 + t3620*t9263 + t3805*t9267 + t4204*t9273 + t4561*t9278 - 1.1312*(-1.*t4078*t9273 + t3972*t9278) + 0.0306*(t3972*t9273 + t4078*t9278);
  p_output1(36)=t9184*t9303 + t9308*t9313 + t4204*t9319 + t4561*t9324 - 1.1312*(t3972*t9324 + t9331) + 0.0306*(t4078*t9324 + t9336);
  p_output1(37)=t4204*t5786 + t5566*t9303 + t5480*t9313 + t4561*t9356 + 0.0306*(t5971 + t4078*t9356) - 1.1312*(t3972*t9356 + t9361);
  p_output1(38)=t9263*t9303 + t9313*t9375 + t4204*t9383 + t4561*t9387 - 1.1312*(t3972*t9387 + t9391) + 0.0306*(t4078*t9387 + t9394);
  p_output1(39)=t9319*t9401 - 1.1312*(t9331 - 1.*t3972*t9406) + 0.0306*(t9336 - 1.*t4078*t9406) + t9406*t9409;
  p_output1(40)=0.0306*t6006 - 1.1312*(-1.*t3972*t5707 + t9361) + t5786*t9401 + t5707*t9409;
  p_output1(41)=t9383*t9401 + t9409*t9432 - 1.1312*(t9391 - 1.*t3972*t9432) + 0.0306*(t9394 - 1.*t4078*t9432);
}


       
void J_VectorNav_to_RightToeBottom(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
