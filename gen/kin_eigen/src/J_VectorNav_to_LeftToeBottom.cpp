/*
 * Automatically Generated from Mathematica.
 * Fri 16 Mar 2018 12:16:33 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "J_VectorNav_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t32;
  double t90;
  double t200;
  double t392;
  double t458;
  double t466;
  double t597;
  double t672;
  double t969;
  double t983;
  double t1029;
  double t1085;
  double t1116;
  double t1131;
  double t1154;
  double t1325;
  double t1328;
  double t1339;
  double t1414;
  double t1444;
  double t1448;
  double t1556;
  double t1807;
  double t1831;
  double t1900;
  double t2324;
  double t2398;
  double t2424;
  double t2488;
  double t2530;
  double t2583;
  double t2671;
  double t2779;
  double t2844;
  double t3019;
  double t3282;
  double t3285;
  double t3336;
  double t3394;
  double t3599;
  double t3767;
  double t3837;
  double t4715;
  double t5053;
  double t5054;
  double t6390;
  double t6453;
  double t6473;
  double t105;
  double t164;
  double t165;
  double t205;
  double t249;
  double t538;
  double t598;
  double t601;
  double t763;
  double t829;
  double t875;
  double t1046;
  double t1097;
  double t1108;
  double t1216;
  double t1230;
  double t1303;
  double t1491;
  double t1687;
  double t1733;
  double t6591;
  double t6602;
  double t6627;
  double t6654;
  double t6659;
  double t6661;
  double t2058;
  double t2144;
  double t2238;
  double t2604;
  double t2761;
  double t2766;
  double t6676;
  double t6678;
  double t6681;
  double t6686;
  double t6687;
  double t6688;
  double t3090;
  double t3165;
  double t3210;
  double t3768;
  double t3876;
  double t3953;
  double t6690;
  double t6691;
  double t6692;
  double t6694;
  double t6695;
  double t6696;
  double t6338;
  double t6342;
  double t6357;
  double t6700;
  double t6701;
  double t6708;
  double t6718;
  double t6724;
  double t6727;
  double t6767;
  double t6768;
  double t6770;
  double t6772;
  double t6775;
  double t6776;
  double t6779;
  double t6780;
  double t6781;
  double t6783;
  double t6784;
  double t6786;
  double t6794;
  double t6795;
  double t6798;
  double t6802;
  double t6803;
  double t6806;
  double t6830;
  double t6832;
  double t6836;
  double t6840;
  double t6841;
  double t6842;
  double t6845;
  double t6848;
  double t6850;
  double t6853;
  double t6854;
  double t6856;
  double t6858;
  double t6859;
  double t6860;
  double t6862;
  double t6863;
  double t6864;
  double t6822;
  double t6823;
  double t6824;
  double t6890;
  double t6891;
  double t6892;
  double t6895;
  double t6896;
  double t6897;
  double t6899;
  double t6900;
  double t6901;
  double t6903;
  double t6904;
  double t6905;
  double t6908;
  double t6909;
  double t6915;
  double t6918;
  double t6919;
  double t6920;
  double t6950;
  double t6951;
  double t6952;
  double t6955;
  double t6958;
  double t6960;
  double t6963;
  double t6964;
  double t6966;
  double t6968;
  double t6970;
  double t6971;
  double t6975;
  double t6976;
  double t6977;
  double t6979;
  double t6980;
  double t6981;
  double t6942;
  double t6943;
  double t6945;
  double t7002;
  double t7003;
  double t7005;
  double t7009;
  double t7010;
  double t7014;
  double t7015;
  double t7016;
  double t7018;
  double t7019;
  double t7020;
  double t7022;
  double t7023;
  double t7024;
  double t7027;
  double t7029;
  double t7030;
  double t7032;
  double t7033;
  double t7036;
  double t6997;
  double t6998;
  double t7056;
  double t7057;
  double t7058;
  double t7060;
  double t7061;
  double t7062;
  double t7065;
  double t7068;
  double t7073;
  double t7075;
  double t7076;
  double t7079;
  double t7080;
  double t7081;
  double t7084;
  double t7087;
  double t7088;
  double t7090;
  double t7091;
  double t7092;
  double t6954;
  double t6962;
  double t6967;
  double t6974;
  double t6978;
  double t6982;
  double t6983;
  double t6984;
  double t6985;
  double t6986;
  double t6987;
  double t6990;
  double t6991;
  double t6992;
  double t7108;
  double t7109;
  double t7112;
  double t7114;
  double t7116;
  double t7124;
  double t7125;
  double t7127;
  double t7128;
  double t7129;
  double t7131;
  double t7134;
  double t7136;
  double t7138;
  double t7139;
  double t7143;
  double t7144;
  double t7145;
  double t7159;
  double t7162;
  double t7163;
  double t7167;
  double t7170;
  double t7172;
  double t7173;
  double t7175;
  double t7176;
  double t7177;
  double t7179;
  double t7180;
  double t7181;
  double t7184;
  double t7186;
  double t7187;
  double t7192;
  double t7194;
  double t7195;
  double t7217;
  double t7218;
  double t7219;
  double t7222;
  double t7223;
  double t7229;
  double t7231;
  double t7233;
  double t7235;
  double t7236;
  double t7238;
  double t7239;
  double t7241;
  double t7210;
  double t7212;
  double t7214;
  double t7215;
  double t7216;
  double t7256;
  double t7257;
  double t7260;
  double t7261;
  double t7263;
  double t7264;
  double t7265;
  double t7278;
  double t7279;
  double t7280;
  double t7282;
  double t7283;
  double t7285;
  double t7286;
  double t7288;
  double t7289;
  double t7290;
  double t7292;
  double t7293;
  double t7294;
  double t7308;
  double t7309;
  double t7310;
  double t7315;
  double t7316;
  double t7318;
  double t7319;
  double t7305;
  double t7306;
  double t7307;
  double t7312;
  double t7313;
  double t7333;
  double t7334;
  double t6744;
  double t7344;
  double t7345;
  double t7346;
  double t7349;
  double t7350;
  double t7352;
  double t7353;
  double t7321;
  double t7370;
  double t7371;
  double t7372;
  double t7325;
  double t7364;
  double t7365;
  double t7367;
  double t7368;
  double t7369;
  double t7336;
  double t6748;
  double t6751;
  double t7355;
  double t7389;
  double t7390;
  double t7391;
  double t7359;
  t32 = Sin(var1[0]);
  t90 = Cos(var1[1]);
  t200 = Sin(var1[1]);
  t392 = Cos(var1[2]);
  t458 = -1.*t392;
  t466 = 1. + t458;
  t597 = Sin(var1[2]);
  t672 = Cos(var1[0]);
  t969 = Cos(var1[3]);
  t983 = -1.*t969;
  t1029 = 1. + t983;
  t1085 = Sin(var1[3]);
  t1116 = -1.*t392*t32*t200;
  t1131 = -1.*t672*t597;
  t1154 = t1116 + t1131;
  t1325 = -1.*t672*t392;
  t1328 = t32*t200*t597;
  t1339 = t1325 + t1328;
  t1414 = Cos(var1[4]);
  t1444 = -1.*t1414;
  t1448 = 1. + t1444;
  t1556 = Sin(var1[4]);
  t1807 = -1.*t1085*t1154;
  t1831 = t969*t1339;
  t1900 = t1807 + t1831;
  t2324 = t969*t1154;
  t2398 = t1085*t1339;
  t2424 = t2324 + t2398;
  t2488 = Cos(var1[5]);
  t2530 = -1.*t2488;
  t2583 = 1. + t2530;
  t2671 = Sin(var1[5]);
  t2779 = t1556*t1900;
  t2844 = t1414*t2424;
  t3019 = t2779 + t2844;
  t3282 = t1414*t1900;
  t3285 = -1.*t1556*t2424;
  t3336 = t3282 + t3285;
  t3394 = Cos(var1[6]);
  t3599 = -1.*t3394;
  t3767 = 1. + t3599;
  t3837 = Sin(var1[6]);
  t4715 = -1.*t2671*t3019;
  t5053 = t2488*t3336;
  t5054 = t4715 + t5053;
  t6390 = t2488*t3019;
  t6453 = t2671*t3336;
  t6473 = t6390 + t6453;
  t105 = -1.*t90;
  t164 = 1. + t105;
  t165 = 0.135*t164;
  t205 = 0.049*t200;
  t249 = 0. + t165 + t205;
  t538 = -0.049*t466;
  t598 = -0.09*t597;
  t601 = 0. + t538 + t598;
  t763 = -0.09*t466;
  t829 = 0.049*t597;
  t875 = 0. + t763 + t829;
  t1046 = -0.049*t1029;
  t1097 = -0.21*t1085;
  t1108 = 0. + t1046 + t1097;
  t1216 = -0.21*t1029;
  t1230 = 0.049*t1085;
  t1303 = 0. + t1216 + t1230;
  t1491 = -0.2707*t1448;
  t1687 = 0.0016*t1556;
  t1733 = 0. + t1491 + t1687;
  t6591 = t672*t392*t200;
  t6602 = -1.*t32*t597;
  t6627 = t6591 + t6602;
  t6654 = -1.*t392*t32;
  t6659 = -1.*t672*t200*t597;
  t6661 = t6654 + t6659;
  t2058 = -0.0016*t1448;
  t2144 = -0.2707*t1556;
  t2238 = 0. + t2058 + t2144;
  t2604 = 0.0184*t2583;
  t2761 = -0.7055*t2671;
  t2766 = 0. + t2604 + t2761;
  t6676 = -1.*t1085*t6627;
  t6678 = t969*t6661;
  t6681 = t6676 + t6678;
  t6686 = t969*t6627;
  t6687 = t1085*t6661;
  t6688 = t6686 + t6687;
  t3090 = -0.7055*t2583;
  t3165 = -0.0184*t2671;
  t3210 = 0. + t3090 + t3165;
  t3768 = -1.1135*t3767;
  t3876 = 0.0216*t3837;
  t3953 = 0. + t3768 + t3876;
  t6690 = t1556*t6681;
  t6691 = t1414*t6688;
  t6692 = t6690 + t6691;
  t6694 = t1414*t6681;
  t6695 = -1.*t1556*t6688;
  t6696 = t6694 + t6695;
  t6338 = -0.0216*t3767;
  t6342 = -1.1135*t3837;
  t6357 = 0. + t6338 + t6342;
  t6700 = -1.*t2671*t6692;
  t6701 = t2488*t6696;
  t6708 = t6700 + t6701;
  t6718 = t2488*t6692;
  t6724 = t2671*t6696;
  t6727 = t6718 + t6724;
  t6767 = t392*t1085*t200;
  t6768 = t969*t200*t597;
  t6770 = t6767 + t6768;
  t6772 = -1.*t969*t392*t200;
  t6775 = t1085*t200*t597;
  t6776 = t6772 + t6775;
  t6779 = t1556*t6770;
  t6780 = t1414*t6776;
  t6781 = t6779 + t6780;
  t6783 = t1414*t6770;
  t6784 = -1.*t1556*t6776;
  t6786 = t6783 + t6784;
  t6794 = -1.*t2671*t6781;
  t6795 = t2488*t6786;
  t6798 = t6794 + t6795;
  t6802 = t2488*t6781;
  t6803 = t2671*t6786;
  t6806 = t6802 + t6803;
  t6830 = -1.*t672*t90*t392*t1085;
  t6832 = -1.*t969*t672*t90*t597;
  t6836 = t6830 + t6832;
  t6840 = t969*t672*t90*t392;
  t6841 = -1.*t672*t90*t1085*t597;
  t6842 = t6840 + t6841;
  t6845 = t1556*t6836;
  t6848 = t1414*t6842;
  t6850 = t6845 + t6848;
  t6853 = t1414*t6836;
  t6854 = -1.*t1556*t6842;
  t6856 = t6853 + t6854;
  t6858 = -1.*t2671*t6850;
  t6859 = t2488*t6856;
  t6860 = t6858 + t6859;
  t6862 = t2488*t6850;
  t6863 = t2671*t6856;
  t6864 = t6862 + t6863;
  t6822 = 0.049*t90;
  t6823 = 0.135*t200;
  t6824 = t6822 + t6823;
  t6890 = -1.*t90*t392*t1085*t32;
  t6891 = -1.*t969*t90*t32*t597;
  t6892 = t6890 + t6891;
  t6895 = t969*t90*t392*t32;
  t6896 = -1.*t90*t1085*t32*t597;
  t6897 = t6895 + t6896;
  t6899 = t1556*t6892;
  t6900 = t1414*t6897;
  t6901 = t6899 + t6900;
  t6903 = t1414*t6892;
  t6904 = -1.*t1556*t6897;
  t6905 = t6903 + t6904;
  t6908 = -1.*t2671*t6901;
  t6909 = t2488*t6905;
  t6915 = t6908 + t6909;
  t6918 = t2488*t6901;
  t6919 = t2671*t6905;
  t6920 = t6918 + t6919;
  t6950 = -1.*t90*t392*t1085;
  t6951 = -1.*t969*t90*t597;
  t6952 = t6950 + t6951;
  t6955 = -1.*t969*t90*t392;
  t6958 = t90*t1085*t597;
  t6960 = t6955 + t6958;
  t6963 = -1.*t1556*t6952;
  t6964 = t1414*t6960;
  t6966 = t6963 + t6964;
  t6968 = t1414*t6952;
  t6970 = t1556*t6960;
  t6971 = t6968 + t6970;
  t6975 = t2671*t6966;
  t6976 = t2488*t6971;
  t6977 = t6975 + t6976;
  t6979 = t2488*t6966;
  t6980 = -1.*t2671*t6971;
  t6981 = t6979 + t6980;
  t6942 = -0.09*t392;
  t6943 = -0.049*t597;
  t6945 = t6942 + t6943;
  t7002 = -1.*t672*t392*t200;
  t7003 = t32*t597;
  t7005 = t7002 + t7003;
  t7009 = t1085*t7005;
  t7010 = t7009 + t6678;
  t7014 = t969*t7005;
  t7015 = -1.*t1085*t6661;
  t7016 = t7014 + t7015;
  t7018 = -1.*t1556*t7010;
  t7019 = t1414*t7016;
  t7020 = t7018 + t7019;
  t7022 = t1414*t7010;
  t7023 = t1556*t7016;
  t7024 = t7022 + t7023;
  t7027 = t2671*t7020;
  t7029 = t2488*t7024;
  t7030 = t7027 + t7029;
  t7032 = t2488*t7020;
  t7033 = -1.*t2671*t7024;
  t7036 = t7032 + t7033;
  t6997 = 0.049*t392;
  t6998 = t6997 + t598;
  t7056 = t672*t392;
  t7057 = -1.*t32*t200*t597;
  t7058 = t7056 + t7057;
  t7060 = t1085*t1154;
  t7061 = t969*t7058;
  t7062 = t7060 + t7061;
  t7065 = -1.*t1085*t7058;
  t7068 = t2324 + t7065;
  t7073 = -1.*t1556*t7062;
  t7075 = t1414*t7068;
  t7076 = t7073 + t7075;
  t7079 = t1414*t7062;
  t7080 = t1556*t7068;
  t7081 = t7079 + t7080;
  t7084 = t2671*t7076;
  t7087 = t2488*t7081;
  t7088 = t7084 + t7087;
  t7090 = t2488*t7076;
  t7091 = -1.*t2671*t7081;
  t7092 = t7090 + t7091;
  t6954 = t2238*t6952;
  t6962 = t1733*t6960;
  t6967 = t3210*t6966;
  t6974 = t2766*t6971;
  t6978 = t6357*t6977;
  t6982 = t3953*t6981;
  t6983 = -1.*t3837*t6977;
  t6984 = t3394*t6981;
  t6985 = t6983 + t6984;
  t6986 = -1.1312*t6985;
  t6987 = t3394*t6977;
  t6990 = t3837*t6981;
  t6991 = t6987 + t6990;
  t6992 = 0.0306*t6991;
  t7108 = -0.21*t969;
  t7109 = -0.049*t1085;
  t7112 = t7108 + t7109;
  t7114 = 0.049*t969;
  t7116 = t7114 + t1097;
  t7124 = -1.*t969*t6627;
  t7125 = t7124 + t7015;
  t7127 = -1.*t1556*t6681;
  t7128 = t1414*t7125;
  t7129 = t7127 + t7128;
  t7131 = t1556*t7125;
  t7134 = t6694 + t7131;
  t7136 = t2671*t7129;
  t7138 = t2488*t7134;
  t7139 = t7136 + t7138;
  t7143 = t2488*t7129;
  t7144 = -1.*t2671*t7134;
  t7145 = t7143 + t7144;
  t7159 = t392*t32*t200;
  t7162 = t672*t597;
  t7163 = t7159 + t7162;
  t7167 = -1.*t1085*t7163;
  t7170 = t7167 + t7061;
  t7172 = -1.*t969*t7163;
  t7173 = t7172 + t7065;
  t7175 = -1.*t1556*t7170;
  t7176 = t1414*t7173;
  t7177 = t7175 + t7176;
  t7179 = t1414*t7170;
  t7180 = t1556*t7173;
  t7181 = t7179 + t7180;
  t7184 = t2671*t7177;
  t7186 = t2488*t7181;
  t7187 = t7184 + t7186;
  t7192 = t2488*t7177;
  t7194 = -1.*t2671*t7181;
  t7195 = t7192 + t7194;
  t7217 = t969*t90*t392;
  t7218 = -1.*t90*t1085*t597;
  t7219 = t7217 + t7218;
  t7222 = -1.*t1414*t7219;
  t7223 = t6963 + t7222;
  t7229 = -1.*t1556*t7219;
  t7231 = t6968 + t7229;
  t7233 = t2671*t7223;
  t7235 = t2488*t7231;
  t7236 = t7233 + t7235;
  t7238 = t2488*t7223;
  t7239 = -1.*t2671*t7231;
  t7241 = t7238 + t7239;
  t7210 = 0.0016*t1414;
  t7212 = t7210 + t2144;
  t7214 = -0.2707*t1414;
  t7215 = -0.0016*t1556;
  t7216 = t7214 + t7215;
  t7256 = -1.*t1414*t6688;
  t7257 = t7127 + t7256;
  t7260 = t2671*t7257;
  t7261 = t7260 + t6701;
  t7263 = t2488*t7257;
  t7264 = -1.*t2671*t6696;
  t7265 = t7263 + t7264;
  t7278 = t969*t7163;
  t7279 = t1085*t7058;
  t7280 = t7278 + t7279;
  t7282 = -1.*t1414*t7280;
  t7283 = t7175 + t7282;
  t7285 = -1.*t1556*t7280;
  t7286 = t7179 + t7285;
  t7288 = t2671*t7283;
  t7289 = t2488*t7286;
  t7290 = t7288 + t7289;
  t7292 = t2488*t7283;
  t7293 = -1.*t2671*t7286;
  t7294 = t7292 + t7293;
  t7308 = t1556*t6952;
  t7309 = t1414*t7219;
  t7310 = t7308 + t7309;
  t7315 = -1.*t2671*t7310;
  t7316 = t7315 + t7235;
  t7318 = -1.*t2488*t7310;
  t7319 = t7318 + t7239;
  t7305 = -0.7055*t2488;
  t7306 = 0.0184*t2671;
  t7307 = t7305 + t7306;
  t7312 = -0.0184*t2488;
  t7313 = t7312 + t2761;
  t7333 = -1.*t2488*t6692;
  t7334 = t7333 + t7264;
  t6744 = t3394*t6708;
  t7344 = t1556*t7170;
  t7345 = t1414*t7280;
  t7346 = t7344 + t7345;
  t7349 = -1.*t2671*t7346;
  t7350 = t7349 + t7289;
  t7352 = -1.*t2488*t7346;
  t7353 = t7352 + t7293;
  t7321 = -1.*t3837*t7316;
  t7370 = t2488*t7310;
  t7371 = t2671*t7231;
  t7372 = t7370 + t7371;
  t7325 = t3394*t7316;
  t7364 = 0.0216*t3394;
  t7365 = t7364 + t6342;
  t7367 = -1.1135*t3394;
  t7368 = -0.0216*t3837;
  t7369 = t7367 + t7368;
  t7336 = -1.*t3837*t6708;
  t6748 = -1.*t3837*t6727;
  t6751 = t6744 + t6748;
  t7355 = -1.*t3837*t7350;
  t7389 = t2488*t7346;
  t7390 = t2671*t7286;
  t7391 = t7389 + t7390;
  t7359 = t3394*t7350;

  p_output1(0)=0;
  p_output1(1)=-1.*t1108*t1154 - 1.*t1303*t1339 - 1.*t1733*t1900 - 1.*t2238*t2424 - 1.*t2766*t3019 - 0.135*t32 + t249*t32 - 1.*t3210*t3336 - 1.*t3953*t5054 + t200*t32*t601 - 1.*t6357*t6473 - 0.0306*(t3837*t5054 + t3394*t6473) + 1.1312*(t3394*t5054 - 1.*t3837*t6473) + t672*t875 + 0.1305*t32*t90;
  p_output1(2)=-1.*t1108*t6627 - 1.*t1303*t6661 - 1.*t1733*t6681 - 1.*t2238*t6688 - 1.*t2766*t6692 - 1.*t3210*t6696 - 1.*t3953*t6708 + 0.135*t672 - 1.*t249*t672 - 1.*t200*t601*t672 - 1.*t6357*t6727 - 0.0306*(t3837*t6708 + t3394*t6727) + 1.1312*t6751 + t32*t875 - 0.1305*t672*t90;
  p_output1(3)=-0.049*t200 - 1.*t1108*t200*t392 + t1303*t200*t597 - 1.*t200*t601 + t1733*t6770 + t2238*t6776 + t2766*t6781 + t3210*t6786 + t3953*t6798 + t6357*t6806 + 0.0306*(t3837*t6798 + t3394*t6806) - 1.1312*(t3394*t6798 - 1.*t3837*t6806) + 0.004500000000000004*t90;
  p_output1(4)=0.1305*t200*t672 - 1.*t672*t6824 - 1.*t1733*t6836 - 1.*t2238*t6842 - 1.*t2766*t6850 - 1.*t3210*t6856 - 1.*t3953*t6860 - 1.*t6357*t6864 - 0.0306*(t3837*t6860 + t3394*t6864) + 1.1312*(t3394*t6860 - 1.*t3837*t6864) - 1.*t1108*t392*t672*t90 + t1303*t597*t672*t90 - 1.*t601*t672*t90;
  p_output1(5)=0.1305*t200*t32 - 1.*t32*t6824 - 1.*t1733*t6892 - 1.*t2238*t6897 - 1.*t2766*t6901 - 1.*t3210*t6905 - 1.*t3953*t6915 - 1.*t6357*t6920 - 0.0306*(t3837*t6915 + t3394*t6920) + 1.1312*(t3394*t6915 - 1.*t3837*t6920) - 1.*t1108*t32*t392*t90 + t1303*t32*t597*t90 - 1.*t32*t601*t90;
  p_output1(6)=t6954 + t6962 + t6967 + t6974 + t6978 + t6982 + t6986 + t6992 - 1.*t1303*t392*t90 - 1.*t1108*t597*t90 + t6945*t90;
  p_output1(7)=-1.*t1108*t6661 - 1.*t200*t672*t6945 + t32*t6998 - 1.*t1303*t7005 - 1.*t2238*t7010 - 1.*t1733*t7016 - 1.*t3210*t7020 - 1.*t2766*t7024 - 1.*t6357*t7030 - 1.*t3953*t7036 + 1.1312*(-1.*t3837*t7030 + t3394*t7036) - 0.0306*(t3394*t7030 + t3837*t7036);
  p_output1(8)=-1.*t1154*t1303 - 1.*t200*t32*t6945 - 1.*t672*t6998 - 1.*t1108*t7058 - 1.*t2238*t7062 - 1.*t1733*t7068 - 1.*t3210*t7076 - 1.*t2766*t7081 - 1.*t6357*t7088 - 1.*t3953*t7092 + 1.1312*(-1.*t3837*t7088 + t3394*t7092) - 0.0306*(t3394*t7088 + t3837*t7092);
  p_output1(9)=t6954 + t6962 + t6967 + t6974 + t6978 + t6982 + t6986 + t6992 + t392*t7112*t90 - 1.*t597*t7116*t90;
  p_output1(10)=-1.*t2238*t6681 - 1.*t6627*t7112 - 1.*t6661*t7116 - 1.*t1733*t7125 - 1.*t3210*t7129 - 1.*t2766*t7134 - 1.*t6357*t7139 - 1.*t3953*t7145 + 1.1312*(-1.*t3837*t7139 + t3394*t7145) - 0.0306*(t3394*t7139 + t3837*t7145);
  p_output1(11)=-1.*t7058*t7116 - 1.*t7112*t7163 - 1.*t2238*t7170 - 1.*t1733*t7173 - 1.*t3210*t7177 - 1.*t2766*t7181 - 1.*t6357*t7187 - 1.*t3953*t7195 + 1.1312*(-1.*t3837*t7187 + t3394*t7195) - 0.0306*(t3394*t7187 + t3837*t7195);
  p_output1(12)=t6952*t7212 + t7216*t7219 + t3210*t7223 + t2766*t7231 + t6357*t7236 + t3953*t7241 - 1.1312*(-1.*t3837*t7236 + t3394*t7241) + 0.0306*(t3394*t7236 + t3837*t7241);
  p_output1(13)=-1.*t2766*t6696 - 1.*t6681*t7212 - 1.*t6688*t7216 - 1.*t3210*t7257 - 1.*t6357*t7261 - 1.*t3953*t7265 + 1.1312*(-1.*t3837*t7261 + t3394*t7265) - 0.0306*(t3394*t7261 + t3837*t7265);
  p_output1(14)=-1.*t7170*t7212 - 1.*t7216*t7280 - 1.*t3210*t7283 - 1.*t2766*t7286 - 1.*t6357*t7290 - 1.*t3953*t7294 + 1.1312*(-1.*t3837*t7290 + t3394*t7294) - 0.0306*(t3394*t7290 + t3837*t7294);
  p_output1(15)=t7307*t7310 + t7231*t7313 + t6357*t7316 + t3953*t7319 - 1.1312*(t3394*t7319 + t7321) + 0.0306*(t3837*t7319 + t7325);
  p_output1(16)=-1.*t6357*t6708 - 1.*t6692*t7307 - 1.*t6696*t7313 - 1.*t3953*t7334 - 0.0306*(t6744 + t3837*t7334) + 1.1312*(t3394*t7334 + t7336);
  p_output1(17)=-1.*t7286*t7313 - 1.*t7307*t7346 - 1.*t6357*t7350 - 1.*t3953*t7353 + 1.1312*(t3394*t7353 + t7355) - 0.0306*(t3837*t7353 + t7359);
  p_output1(18)=t7316*t7365 + t7369*t7372 - 1.1312*(t7321 - 1.*t3394*t7372) + 0.0306*(t7325 - 1.*t3837*t7372);
  p_output1(19)=-0.0306*t6751 + 1.1312*(-1.*t3394*t6727 + t7336) - 1.*t6708*t7365 - 1.*t6727*t7369;
  p_output1(20)=-1.*t7350*t7365 - 1.*t7369*t7391 + 1.1312*(t7355 - 1.*t3394*t7391) - 0.0306*(t7359 - 1.*t3837*t7391);
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
}


       
void J_VectorNav_to_LeftToeBottom(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
